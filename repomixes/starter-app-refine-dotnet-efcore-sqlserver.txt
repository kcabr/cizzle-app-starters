This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/copilot-instructions.md
.gitignore
.repomixignore
README.md
repomix.config.json
WORKITEMS.md
WORKPLAN.md
xdent-ops-dotnet-backend/.rules/DDL.sql
xdent-ops-dotnet-backend/.rules/RULE-AZDO-TASKS.md
xdent-ops-dotnet-backend/.rules/RULE-AZDO-WI.md
xdent-ops-dotnet-backend/appsettings.Development.json
xdent-ops-dotnet-backend/appsettings.json
xdent-ops-dotnet-backend/Common/Constants.cs
xdent-ops-dotnet-backend/Controllers/AccountController.cs
xdent-ops-dotnet-backend/Controllers/AppSettingsController.cs
xdent-ops-dotnet-backend/Controllers/AvailabilityController.cs
xdent-ops-dotnet-backend/Controllers/TechnicianController.cs
xdent-ops-dotnet-backend/DLLz/Cizzle.AI.deps.json
xdent-ops-dotnet-backend/Dockerfile
xdent-ops-dotnet-backend/Gen/AppVersion.tsx
xdent-ops-dotnet-backend/Gen/AppVersion.tt
xdent-ops-dotnet-backend/Gen/Common.Constants.template.txt
xdent-ops-dotnet-backend/Gen/CommonJS.template.txt
xdent-ops-dotnet-backend/Gen/CS.API.Controller.template.txt
xdent-ops-dotnet-backend/Gen/JSX.Grid.Component.template.txt
xdent-ops-dotnet-backend/Gen/JSX.Grid2.Component.template.txt
xdent-ops-dotnet-backend/Middleware/DebugMiddleware.cs
xdent-ops-dotnet-backend/Migrations/20230430053025_ExtendUserAndRoles.cs
xdent-ops-dotnet-backend/Migrations/20230430053025_ExtendUserAndRoles.Designer.cs
xdent-ops-dotnet-backend/Migrations/ApplicationDbContextModelSnapshot.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/ApplicationDbContext.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/AppSetting.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/AspNetRole.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/AspNetUser.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/Document.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/DocumentState.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/DocumentStateHistory.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/DocumentType.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/DocumentView.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/ManagerTechnicianAssignment.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/Module.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/Notification.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/NotificationView.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/PaymentLog.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/PaymentLogView.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/ProfileNote.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/ProfileNoteView.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/RoleAllowedModule.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/RolesView.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/TechnicianProfile.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/TechnicianRosterView.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/TechnicianView.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/UserAgreement.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/UserAgreementView.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/UserAllowedModule.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/UserView.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/W9Data.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/W9DataView.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/XDentOpsAPI.Converters.cs
xdent-ops-dotnet-backend/Models/_ENTDEV/XDentOpsAPI.DTOs.cs
xdent-ops-dotnet-backend/Models/Data/ApplicationRole.cs
xdent-ops-dotnet-backend/Models/Data/ApplicationUser.cs
xdent-ops-dotnet-backend/Models/DTO/AspNetUserDTO.cs
xdent-ops-dotnet-backend/Models/MappingProfile.cs
xdent-ops-dotnet-backend/Models/VM/LoginResultVM.cs
xdent-ops-dotnet-backend/Models/VM/LoginVM.cs
xdent-ops-dotnet-backend/Models/VM/PagedLists.cs
xdent-ops-dotnet-backend/Models/VM/RegisterVM.cs
xdent-ops-dotnet-backend/Models/VM/RoleVM.cs
xdent-ops-dotnet-backend/Models/VM/TechnicianVM.cs
xdent-ops-dotnet-backend/Models/VM/UserVM.cs
xdent-ops-dotnet-backend/Models/VM/ViewModelMappingExtensions.cs
xdent-ops-dotnet-backend/Program.cs
xdent-ops-dotnet-backend/Properties/launchSettings.json
xdent-ops-dotnet-backend/Properties/PublishProfiles/FolderProfile.pubxml
xdent-ops-dotnet-backend/XDentOpsAPI.csproj
xdent-ops-dotnet-backend/XDentOpsAPI.nswag
xdent-ops-dotnet-backend/XDentOpsAPI.sln
xdent-ops-frontend/.claude/settings.local.json
xdent-ops-frontend/.cursor/rules/general.mdc
xdent-ops-frontend/.cursor/rules/project-general.mdc
xdent-ops-frontend/.cursor/rules/refine-pages.mdc
xdent-ops-frontend/.cursor/rules/refine-resources.mdc
xdent-ops-frontend/.cursor/rules/troubleshooting.mdc
xdent-ops-frontend/.eslintrc.cjs
xdent-ops-frontend/.gitignore
xdent-ops-frontend/.npmrc
xdent-ops-frontend/.rules/DDL.sql
xdent-ops-frontend/.rules/RULE-AZDO-TASKS.md
xdent-ops-frontend/.rules/RULE-AZDO-WI.md
xdent-ops-frontend/CLAUDE.md
xdent-ops-frontend/Dockerfile
xdent-ops-frontend/index.html
xdent-ops-frontend/package.json
xdent-ops-frontend/public/refine.svg
xdent-ops-frontend/README.MD
xdent-ops-frontend/src/App.tsx
xdent-ops-frontend/src/components/header/index.tsx
xdent-ops-frontend/src/components/index.ts
xdent-ops-frontend/src/contexts/color-mode/index.tsx
xdent-ops-frontend/src/index.tsx
xdent-ops-frontend/src/interfaces/google.d.ts
xdent-ops-frontend/src/pages/blog-posts/create.tsx
xdent-ops-frontend/src/pages/blog-posts/edit.tsx
xdent-ops-frontend/src/pages/blog-posts/index.ts
xdent-ops-frontend/src/pages/blog-posts/list.tsx
xdent-ops-frontend/src/pages/blog-posts/show.tsx
xdent-ops-frontend/src/pages/categories/create.tsx
xdent-ops-frontend/src/pages/categories/edit.tsx
xdent-ops-frontend/src/pages/categories/index.ts
xdent-ops-frontend/src/pages/categories/list.tsx
xdent-ops-frontend/src/pages/categories/show.tsx
xdent-ops-frontend/src/pages/Dashboard.tsx
xdent-ops-frontend/src/pages/login.tsx
xdent-ops-frontend/src/pages/technicians/create.tsx
xdent-ops-frontend/src/pages/technicians/edit.tsx
xdent-ops-frontend/src/pages/technicians/index.ts
xdent-ops-frontend/src/pages/technicians/list.tsx
xdent-ops-frontend/src/pages/technicians/show.tsx
xdent-ops-frontend/src/providers/dab-provider.ts
xdent-ops-frontend/src/services/XDentOps/api.ts
xdent-ops-frontend/src/utils/parse-jwt.ts
xdent-ops-frontend/src/vite-env.d.ts
xdent-ops-frontend/tsconfig.json
xdent-ops-frontend/tsconfig.node.json
xdent-ops-frontend/vite.config.ts

================================================================
Files
================================================================

================
File: .github/copilot-instructions.md
================
# Context

Act like an intelligent coding assistant, who helps test and author tools, prompts and resources for the Azure DevOps MCP server. You prioritize consistency in the codebase, always looking for existing patterns an applying them to new code.

If the user clearly intends to use a tool, do it.
If the user wants to author a new one, help him.

## Using MCP tools

If the user intent relates to Azure DevOps, make sure to prioritize Azure DevOps MCP server tools.

## Adding new tools

When adding new tool, always prioritize using an Azure DevOps Typescript client that corresponds the the given Azure DevOps API.
Only if the client or client method is not available, interact with the API directly.
The tools are located in the `src/tools.ts` file.

## Adding new prompts

Ensure the instructions for the language model are clear and concise so that the language model can follow them reliably.
The prompts are located in the `src/prompts.ts` file.

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*


## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
 
# User-specific files
*.suo
*.user
*.userosscache
*.sln.docstates
*.jfm
*.DotSettings

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Build results
[Dd]ebugPublic/
[Dd]ebug/
[Rr]eleases/
[Xx]64/
[Xx]86/
[Bb]uild/
bld/
[Bb]in/
[Oo]bj/
[Pp]rojectBinaries/
[Xx]TELLibraries/
[Uu]tilityBinaries/
[Xx]PlanBinaries/
DynConfigs/
GuiStateCache/
FileCache/
SM1Touch/bin/
out.SM1.LogicalObjectModel.XML
BuildPackage/
GuiStatesCache/

# Visual Studio 2015 cache/options directory
.vs/

# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUNIT
*.VisualState.xml
TestResult.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# DNX
project.lock.json
artifacts/

*_i.c
*_p.c
*_i.h
*.ilk
*.meta
*.obj
*.pch
*.pdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# JustCode is a .NET coding add-in
.JustCode

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml

# TODO: Un-comment the next line if you do not want to checkin
# your web deploy settings because they may include unencrypted
# passwords
#*.pubxml
*.publishproj

# NuGet Packages
*.nupkg
# The packages folder can be ignored because of Package Restore
**/packages/*
# except build/, which is used as an MSBuild target.
!**/packages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/packages/repositories.config
# NuGet v3's project.json files produces more ignoreable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directory
AppPackages/
BundleArtifacts/

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!*.[Cc]ache/

# Others
ClientBin/
[Ss]tyle[Cc]op.*
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.pfx
*.publishsettings
node_modules/
orleans.codegen.cs

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm

# SQL Server files
*.mdf
*.ldf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# LightSwitch generated files
GeneratedArtifacts/
ModelManifest.xml

# Paket dependency manager
.paket/paket.exe

# FAKE - F# Make
.fake/

# SM1
**/binaries/

#Plan
**/XPlan_Sede/OfflineService/DynStore/
**/XPlan_Sede/OfflineService/App_Data/

# TypeScript Generated
/BuildPackages/

#Docs
**/Docs/*
**/Docs/Xtel.Extensions.Doc.xml
/Core/Product/Xtel.Doc.Site/Versions/*
/Core/Product/Xtel.Doc.Site/App_Data
/Project/Sites/SM1Touch/DynStore
/Database

================
File: .repomixignore
================
.support/*
xdent-ops-dotnet-backend/Controllers/CRUDController.AutoGen.cs

================
File: README.md
================
# Introduction 
TODO: Give a short introduction of your project. Let this section explain the objectives or the motivation behind this project. 

# Getting Started
TODO: Guide users through getting your code up and running on their own system. In this section you can talk about:
1.	Installation process
2.	Software dependencies
3.	Latest releases
4.	API references

# Build and Test
TODO: Describe and show how to build your code and run the tests. 

# Contribute
TODO: Explain how other users and developers can contribute to make your code better. 

If you want to learn more about creating good readme files then refer the following [guidelines](https://docs.microsoft.com/en-us/azure/devops/repos/git/create-a-readme?view=azure-devops). You can also seek inspiration from the below readme files:
- [ASP.NET Core](https://github.com/aspnet/Home)
- [Visual Studio Code](https://github.com/Microsoft/vscode)
- [Chakra Core](https://github.com/Microsoft/ChakraCore)

================
File: repomix.config.json
================
{
  "output": {
    "filePath": "repomix-output.txt",
    "style": "plain",
    "parsableStyle": false,
    "fileSummary": true,
    "directoryStructure": true,
    "removeComments": false,
    "removeEmptyLines": false,
    "compress": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  },
  "tokenCount": {
    "encoding": "o200k_base"
  }
}

================
File: WORKITEMS.md
================
### Objective: Using az devops and board commands create all of the below work items that are unchecked. When workitem created successfully check the checkbox next to it and update with the Azure Devops Workitem id.

### Azure Devops Project: XDent

### CLI Examples:

```powershell
# Create Epic
az boards work-item create --title "TEST" --type Epic --project XDent

# Create Feature
az boards work-item create --title "Test Feature" --type Feature --project XDent

# Add Feature under Epic
az boards work-item relation add --id 157 --relation-type child --target-id 156
```

### Azure Devops Work Items to Create

- [x] EPIC: Foundational Setup & Core Infrastructure (ID: 158)
      Description: Establish the core technical foundation, security, and deployment pipeline for the XDent platform on Azure to ensure a scalable and secure application environment.

  - [x] FEATURE: Project Environment & CI/CD Setup (ID: 159)
        Description: Configure the Azure DevOps project, source control, and automated build/release pipelines to enable continuous integration and deployment.

    - [x] USER STORY: Initial Solution Scaffolding (ID: 160)
          Description: Create the initial frontend (React/Refine) and backend (.NET/Data API Builder) solutions and commit them to the Git repository.

    - [x] USER STORY: Dockerization for Development (ID: 161)
          Description: Create Dockerfiles for both the frontend and backend applications to standardize the local development environment.

    - [x] USER STORY: Azure Resource Provisioning (ID: 162)
          Description: Provision necessary Azure resources including Azure SQL Database, App Service/Container Apps for hosting, and a resource group.

    - [x] USER STORY: CI/CD Pipeline for Deployment (ID: 163)
          Description: Implement a basic CI/CD pipeline in Azure DevOps to automatically build and deploy the application to a development environment on Azure.

    - [x] USER STORY: Dashboard Scaffolding with Hardcoded Data (ID: 211)
          Description: As an Admin/Manager/Technician, I can see a complete dashboard layout with realistic sample data to get an immediate visual prototype of the system's capabilities.

    - [x] USER STORY: Dynamic Dashboard with Live Data (ID: 217)
          Description: As a user, I can see a dashboard that displays live database queries reflecting my role and permissions instead of static hardcoded data, providing real-time operational insights.

    - [x] USER STORY: End-to-End Testing and Polish (ID: 220)
          Description: As a developer, I can conduct comprehensive end-to-end testing of all three user views (Admin, Manager, and Tech) to ensure every requirement is met and the application is ready for deployment.

  - [x] FEATURE: Secure Authentication & Authorization (ID: 164)
        Description: Implement a robust, role-based security model allowing users to log in securely using their Microsoft credentials and access only the features permitted by their role.

    - [x] USER STORY: Microsoft SSO Integration (ID: 165)
          Description: As a user, I can log in to the application securely using my corporate Microsoft (Entra ID/Azure AD) account.

    - [x] USER STORY: Role-Based Access Control (RBAC) (ID: 166)
          Description: As the system, I can identify a user's role (Admin, Manager, Tech) upon login and enforce permissions throughout the application.

    - [x] USER STORY: Secure Logout (ID: 167)
          Description: As a logged-in user, I can securely log out of the application, terminating my session.

    - [x] USER STORY: Implement Role-Based Data Views and Masking (ID: 216)
          Description: As the system, I can ensure that when Managers request technician data, sensitive fields (PayRate, bank info, etc.) are explicitly removed or nulled out from the returned data, while Admins continue to see all information.

    - [x] USER STORY: Full Authentication and Authorization Implementation (ID: 219)
          Description: As the system, I can integrate ASP.NET Identity with JWT, secure all controllers with [Authorize] attributes and role checks, and provide a complete authentication framework with login page and token handling.

- [x] EPIC: Unified User & Profile Management (ID: 168)
      Description: Provide a centralized system for creating, managing, and viewing user profiles, tailored with role-specific views and actions for Admins, Managers, and Technicians.

  - [x] FEATURE: Technician Self-Service Portal (ID: 169)
        Description: Enable technicians to manage their own profiles, update their information, and track their readiness status, reducing administrative overhead.

    - [x] USER STORY: View Personal Profile (ID: 173)
          Description: As a Technician, I can view my own profile information, including contact details, certifications, and uploaded documents.

    - [x] USER STORY: Edit Personal Profile (ID: 174)
          Description: As a Technician, I can edit my contact information (address, phone number) and upload a new profile photo.

    - [x] USER STORY: Update Work Availability (ID: 175)
          Description: As a Technician, I can update my work availability status (e.g., Available, Unavailable), which notifies management.

    - [x] USER STORY: View Profile Readiness Meter (ID: 176)
          Description: As a Technician, I can see a visual "Deployment Ready" meter on my dashboard that shows my profile completion progress.

    - [x] USER STORY: Manage Bank/Direct Deposit Information (ID: 212)
          Description: As a Technician, I can add and update my bank account and direct deposit information securely within my profile to ensure accurate payment processing.

  - [x] FEATURE: Administrator User Management (ID: 170)
        Description: Provide Admins with full control over all user accounts and profiles, enabling them to maintain data accuracy and manage the user lifecycle.

    - [x] USER STORY: Create New User Accounts (ID: 177)
          Description: As an Admin, I can create new user accounts for Technicians and Managers and assign their roles.

    - [x] USER STORY: Edit Any User Profile (ID: 178)
          Description: As an Admin, I can edit all fields on any user's profile, including sensitive information like pay rates and contact details.

    - [x] USER STORY: Deactivate/Reactivate Users (ID: 179)
          Description: As an Admin, I can deactivate a user's account to revoke their access, and reactivate it if needed.

    - [x] USER STORY: Invite New Technician via SMS (ID: 213)
          Description: As an Admin, I can enter a technician's phone number and send them an SMS invitation with a unique link to create their profile, streamlining the onboarding process.

  - [x] FEATURE: Manager Team View & Annotation (ID: 183)
        Description: Allow Managers to view their assigned team's profiles and add private notes, facilitating better team management and performance tracking.

    - [x] USER STORY: View Assigned Technician Profiles (ID: 184)
          Description: As a Manager, I can view the profiles of technicians assigned to me, excluding their sensitive (pay/SSN) information.

    - [x] USER STORY: Add Private Notes to Profiles (ID: 185)
          Description: As a Manager, I can add private, timestamped notes (e.g., performance grades, job site details) to a technician's profile that are only visible to other Managers and Admins.

- [x] EPIC: Compliance & Document Automation (ID: 171)
      Description: Digitize and automate the collection, signing, and tracking of all required documents and certifications to ensure fleet-wide compliance and reduce liability.

  - [x] FEATURE: Centralized Document Hub (ID: 186)
        Description: Provide a system for users to upload required documents and for management to easily view and verify them.

    - [x] USER STORY: Upload Personal Documents (ID: 187)
          Description: As a Technician, I can upload files for my Driver's License, Passport, and other certifications.

    - [x] USER STORY: Set Document Expiration Dates (ID: 188)
          Description: As an Admin or Technician, I can set an expiration date when uploading a time-sensitive document like a passport or certification.

    - [x] USER STORY: View Uploaded Documents (ID: 189)
          Description: As an Admin or Manager, I can view the documents uploaded by technicians on their profile pages.

    - [x] USER STORY: Admin Upload Documents on Behalf of Technicians (ID: 214)
          Description: As an Admin, I can upload documents (such as 1099s, pay stubs, or certificates) directly to a technician's profile, and the technician can view these documents in their My Documents section.

  - [x] FEATURE: Digital Form & Agreement Management (ID: 190)
        Description: Enable the digital completion and acknowledgment of critical forms like W-9s, IC Agreements, and company policies.

    - [x] USER STORY: Acknowledge Agreements with Checkbox (ID: 191)
          Description: As a Technician, I can digitally "sign" documents like the IC Agreement and company policies by checking a box, which records my agreement and a timestamp.

    - [x] USER STORY: Complete W-9 via Web Form (ID: 192)
          Description: As a Technician, I can fill out my W-9 information through a secure web form.

    - [x] USER STORY: Generate Printable W-9 PDF (ID: 193)
          Description: As an Admin, I can generate a completed, printable PDF of a technician's W-9 form from the data they submitted.

  - [x] FEATURE: Compliance Tracking Dashboard (ID: 194)
        Description: Give Admins and Managers an at-a-glance view of technician compliance status to quickly identify who is ready for deployment.

    - [x] USER STORY: View Compliance Status Icons (ID: 195)
          Description: As an Admin or Manager, I can see a simple icon (e.g., a green or yellow dot) next to each technician's name in lists to indicate their document compliance status.

    - [x] USER STORY: Filter by Compliance Status (ID: 196)
          Description: As an Admin, I can filter the list of all technicians to show only those who are "Fully Compliant" or "Missing Documents."

    - [x] USER STORY: Live Technician Roster with Compliance Status (ID: 215)
          Description: As an Admin/Manager, I can view a real-time technician roster that displays accurate compliance statuses with color-coded icons, providing immediate operational insight for deployment decisions.

- [x] EPIC: Operational Management & Communications (ID: 172)
      Description: Deliver advanced tools for efficient operational control, including technician assignment, communication, and historical data tracking.

  - [x] FEATURE: Advanced Technician Search & Filtering (ID: 197)
        Description: Enable Admins and Managers to quickly find qualified and available technicians using powerful, multi-field search capabilities.

    - [x] USER STORY: Multi-Field Search (ID: 198)
          Description: As an Admin/Manager, I can search for technicians by combining multiple criteria, such as Location, Certification, and Availability Status.

    - [x] USER STORY: Keyword Search (ID: 199)
          Description: As an Admin/Manager, I can perform a simple keyword search that scans across multiple profile fields like name, notes, and skills.

  - [x] FEATURE: Multi-Channel Notification System (ID: 200)
        Description: Implement a notification system to send timely alerts and broadcast messages to users via email, SMS/WhatsApp, and in-app alerts.

    - [x] USER STORY: Email Notification Integration (ID: 201)
          Description: As the system, I can send email notifications for key events like document expiry warnings or new job assignments.

    - [x] USER STORY: Twilio API Integration for SMS/WhatsApp (ID: 202)
          Description: As an Admin, I can send broadcast messages to groups of users via SMS/WhatsApp through a Twilio integration.

    - [x] USER STORY: In-App Alert Center (ID: 203)
          Description: As a logged-in user, I can see a list of my recent, unread notifications in an alert center within the application.

    - [x] USER STORY: Group SMS Blast for Job Communication (ID: 218)
          Description: As an Admin, I can select multiple technicians from the roster and send them a group SMS message with job site information, hotel details, or other communications to initiate a thread on their phones.

  - [x] FEATURE: Job & Financial Record Keeping (ID: 204)
        Description: Provide tools for Admins to assign technicians to managers and manually log payment history for bookkeeping purposes.

    - [x] USER STORY: Assign Managers to Technicians (ID: 205)
          Description: As an Admin, I can assign one or more technicians to a specific Manager from within the user profile interfaces.

    - [x] USER STORY: Manually Log Payment History (ID: 206)
          Description: As an Admin, I can add payment records (Date, Amount, Job ID, Notes) to a technician's profile.

    - [x] USER STORY: View Payment History (ID: 207)
          Description: As an Admin, I can view a chronological list of all payment records for a specific technician.

  - [x] FEATURE: Interactive Global Readiness Map (v2) (ID: 208)
        Description: Provide Admins with a visual, map-based dashboard to see the location and readiness status of their global workforce.

    - [x] USER STORY: View Managers/Job Sites on Map (ID: 209)
          Description: As an Admin, I can see pins on a world map representing the primary locations of my managers or active job sites.

    - [x] USER STORY: View Team Status from Map (ID: 210)
          Description: As an Admin, when I click on a map pin, I can see a pop-up list of the assigned technicians and their at-a-glance compliance status.

================
File: WORKPLAN.md
================
#### **Phase 1: Immediate Visual Impact & Complete User Foundation (Sprints 1-2)**
**Goal:** Deliver an immediate visual win with a scaffolded dashboard. Then, build the complete user and profile management engine that underpins the entire system, including the Technician's self-service capabilities.

1.  **Dashboard Scaffolding (Immediate Priority):**
    *   **Task (UI & API):** Build the complete dashboard layout in Refine and create a `DashboardController` that returns hardcoded, realistic-looking data. This provides an instant visual prototype for the client.

2.  **Full User & Profile CRUD Operations:**
    *   **Task (User Management):** Build the `UserController` for full CRUD on `AspNetUsers`.
    *   **Task (Technician Profile):** Build the CRUD operations for the `TechnicianProfile` table, ensuring it's linked one-to-one with the `AspNetUsers` record.
    *   **UI (Admin):** Create the "User Management" page for Admins to manage all users (Admins, Managers, Technicians).
    *   **UI (Tech/Manager):** Create the **"My Profile"** page where logged-in Technicians and Managers can view and edit their own core information (Name, Phone, etc.) and **update their work availability**.

3.  **Address & Bank Information Management:**
    *   **Task:** Create `AddressController` and a new `BankInfoController` with full CRUD capabilities.
    *   **UI (Tech/Manager):** On the "My Profile" page, add sections for users to manage their own addresses and **update their bank/direct deposit information**.

4.  **Admin "Invite New Tech" Feature:**
    *   **Task:** Create a special API endpoint for Admins. When an Admin enters a new tech's phone number, the system will send an SMS (via Twilio) with a unique link for them to create their profile.
    *   **UI (Admin):** Add a simple "Invite New Technician" form in the User Management section.

#### **Phase 2: The Core Value Proposition - Document & Compliance (Sprints 3-4)**
**Goal:** Build the complete, two-way document management system that directly replaces the insecure email/spreadsheet process and empowers technicians to manage their own compliance.

5.  **Technician Document Self-Service:**
    *   **Task:** Build the `DocumentController` for handling file uploads from the authenticated user.
    *   **UI (Tech View):** Create the **"My Documents"** or "Certifications" page. This is the central hub for a technician to **upload copies of their DL, Passport, and other certifications**. The UI will display all their uploaded documents from `DocumentView`.

6.  **Admin/Manager Document Review Workflow:**
    *   **Task:** Implement the API logic for changing a document's state (`Pending Review`, `Verified`, `Rejected`).
    *   **UI (Admin/Manager):** On the technician's detail page (when viewed by an Admin/Manager), add the tools to review and change the status of each document.

7.  **Admin-Led Document Upload:**
    *   **Task:** Enhance the `DocumentController` to allow an Admin to upload a document on behalf of a technician.
    *   **UI (Admin):** On a technician's profile page, provide a way for an Admin to **upload documents like 1099s or pay stubs** directly to that tech's profile. These documents will then be visible to the technician in their "My Documents" area.

8.  **Digital Form & Agreement Handling:**
    *   **Task:** Build the `W9DataController` and `UserAgreementController`.
    *   **UI (Tech View):** Create a **"Required Forms"** page where a technician can click links to fill out their W-9 and acknowledge company policies.

9.  **Implement *Live* Technician Roster:**
    *   **Task:** Ensure the `TechnicianRosterView` and its calculated `ComplianceStatus` are working with live data.
    *   **UI:** The main technician list now displays accurate compliance statuses with color-coded icons, providing immediate operational insight.

#### **Phase 3: Operational Control & Data Visibility (Sprint 5)**
**Goal:** Empower Managers and Admins with the tools for daily operations, including search, assignments, and private notes, while ensuring the right data is visible to the right roles.

10. **Advanced Search Implementation:**
    *   **Task:** Enhance the `TechnicianController.GetList` endpoint to support multi-field filtering.
    *   **UI (Admin/Manager):** Add a search bar to the technician roster that allows searching by **name, location, position, and certification type (e.g., "forklift")**.

11. **Manager-Technician Assignment & Private Notes:**
    *   **Task:** Build the API endpoints for managing the `ManagerTechnicianAssignment` table and the `ProfileNote` table.
    *   **UI (Admin/Manager):** Provide the UI for Admins to assign techs to managers. On the technician detail page, add a **private "Notes" section** for Managers to add their grades, position details, and location notes, which are **not visible to the technician**.

12. **Implement Role-Based Data Views & Masking:**
    *   **Task (API):** This is a critical security task. Modify API endpoints so that when a Manager requests technician data, sensitive fields (`PayRate`, bank info, etc.) are **explicitly removed or nulled out** from the returned ViewModel. Admins will continue to see all data.
    *   **Why now?** The core data structures are now in place, making it the perfect time to implement these access rules.

13. **Make the Dashboard Dynamic:**
    *   **Task (API):** Revisit the `DashboardController` and replace all the static, hardcoded data with live database queries that reflect the currently logged-in user's role and permissions.

#### **Phase 4: Communication, Security & Final Polish (Sprint 6)**
**Goal:** Finalize the application by implementing the communication tools, robust security, and the notification system.

14. **Notification System:**
    *   **Task:** Build the back-end services that trigger notifications for key events. This must include: **notifying `XDENTADMIN@XDENTREPAIR.COM` when a technician updates their availability or paperwork**, and when a manager makes updates.
    *   **UI:** Add the notification bell icon and alert center.

15. **Group SMS Blast / Job Communication Initiator:**
    *   **Task:** Create a dedicated API endpoint for Admins.
    *   **UI (Admin):** On the technician roster page, allow an Admin to **select multiple specific technicians** and open a modal. In the modal, they can type a message (job site info, hotel, etc.) and click "Send." The back end will use Twilio to **send this message as a group SMS to initiate a thread** on their phones.

16. **Implement Full Authentication & Authorization:**
    *   **Task:** Integrate ASP.NET Identity with JWT. Secure all controllers with `[Authorize]` attributes and role checks.
    *   **UI:** Build the **Personal Login** page and implement all token handling.

17. **Final Testing & Polish:**
    *   **Task:** Conduct end-to-end testing of all three user views (Admin, Manager, and Tech) to ensure every requirement is met. Prepare for deployment.

================
File: xdent-ops-dotnet-backend/.rules/DDL.sql
================
USE [XDentOps]
GO

/****** Object:  Table [dbo].[AppSettings]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AppSettings](
	[AppSettingId] [int] IDENTITY(1,1) NOT NULL,
	[Key] [nvarchar](255) NOT NULL,
	[Value] [nvarchar](max) NOT NULL,
	[DateAdded] [datetime2](7) NOT NULL,
	[UserAddedId] [nvarchar](450) NOT NULL,
	[DateModified] [datetime2](7) NULL,
	[UserModifiedId] [nvarchar](450) NULL,
PRIMARY KEY CLUSTERED 
(
	[AppSettingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[Key] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetRoleClaims]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetRoleClaims](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RoleId] [nvarchar](128) NOT NULL,
	[ClaimType] [nvarchar](max) NULL,
	[ClaimValue] [nvarchar](max) NULL,
 CONSTRAINT [PK_AspNetRoleClaims] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetRoles]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetRoles](
	[Id] [nvarchar](128) NOT NULL,
	[Name] [nvarchar](256) NULL,
	[NormalizedName] [nvarchar](256) NULL,
	[ConcurrencyStamp] [nvarchar](max) NULL,
	[Description] [nvarchar](4000) NULL,
 CONSTRAINT [PK_AspNetRoles] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetUserClaims]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserClaims](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[ClaimType] [nvarchar](max) NULL,
	[ClaimValue] [nvarchar](max) NULL,
 CONSTRAINT [PK_AspNetUserClaims] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetUserLogins]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserLogins](
	[LoginProvider] [nvarchar](128) NOT NULL,
	[ProviderKey] [nvarchar](128) NOT NULL,
	[ProviderDisplayName] [nvarchar](max) NULL,
	[UserId] [nvarchar](128) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetUserRoles]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserRoles](
	[UserId] [nvarchar](128) NOT NULL,
	[RoleId] [nvarchar](128) NOT NULL
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetUsers]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUsers](
	[Id] [nvarchar](128) NOT NULL,
	[UserName] [nvarchar](256) NULL,
	[NormalizedUserName] [nvarchar](256) NULL,
	[Email] [nvarchar](256) NULL,
	[NormalizedEmail] [nvarchar](256) NULL,
	[EmailConfirmed] [bit] NOT NULL,
	[PasswordHash] [nvarchar](max) NULL,
	[SecurityStamp] [nvarchar](max) NULL,
	[ConcurrencyStamp] [nvarchar](max) NULL,
	[PhoneNumber] [nvarchar](max) NULL,
	[PhoneNumberConfirmed] [bit] NOT NULL,
	[TwoFactorEnabled] [bit] NOT NULL,
	[LockoutEnd] [datetimeoffset](7) NULL,
	[LockoutEnabled] [bit] NOT NULL,
	[AccessFailedCount] [int] NOT NULL,
	[FirstName] [nvarchar](255) NOT NULL,
	[LastName] [nvarchar](255) NOT NULL,
	[Suffix] [nvarchar](255) NULL,
	[IsActive] [bit] NOT NULL,
	[DateLastLogin] [datetime2](7) NULL,
	[Email2] [nvarchar](1000) NULL,
	[Phone2] [nvarchar](50) NULL,
	[PreferredName] [nvarchar](50) NULL,
	[Creds] [nvarchar](255) NULL,
	[ProfilePicUrl] [nvarchar](1000) NULL,
 CONSTRAINT [PK_AspNetUsers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetUserTokens]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserTokens](
	[UserId] [nvarchar](128) NOT NULL,
	[LoginProvider] [nvarchar](128) NOT NULL,
	[Name] [nvarchar](450) NOT NULL,
	[Value] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[Document]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Document](
	[DocumentId] [uniqueidentifier] NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[DocumentTypeId] [uniqueidentifier] NOT NULL,
	[FileName] [nvarchar](255) NOT NULL,
	[StoragePath] [nvarchar](2083) NOT NULL,
	[MimeType] [nvarchar](100) NOT NULL,
	[ExpirationDate] [datetimeoffset](7) NULL,
	[IsActive] [bit] NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
	[DateModified] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DocumentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[DocumentState]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[DocumentState](
	[DocumentStateId] [uniqueidentifier] NOT NULL,
	[StateName] [nvarchar](50) NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DocumentStateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[StateName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[DocumentStateHistory]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[DocumentStateHistory](
	[DocumentStateHistoryId] [uniqueidentifier] NOT NULL,
	[DocumentId] [uniqueidentifier] NOT NULL,
	[DocumentStateId] [uniqueidentifier] NOT NULL,
	[ActorUserId] [nvarchar](128) NOT NULL,
	[Notes] [nvarchar](1000) NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DocumentStateHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[DocumentType]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[DocumentType](
	[DocumentTypeId] [uniqueidentifier] NOT NULL,
	[TypeName] [nvarchar](100) NOT NULL,
	[IsComplianceRequired] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DocumentTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[TypeName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[ManagerTechnicianAssignment]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ManagerTechnicianAssignment](
	[ManagerUserId] [nvarchar](128) NOT NULL,
	[TechnicianUserId] [nvarchar](128) NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ManagerUserId] ASC,
	[TechnicianUserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[Module]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Module](
	[ModuleId] [nvarchar](4) NOT NULL,
	[ModuleName] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_Module] PRIMARY KEY CLUSTERED 
(
	[ModuleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[ModuleRoleLookup]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ModuleRoleLookup](
	[ModuleId] [nvarchar](4) NOT NULL,
	[RoleId] [nvarchar](128) NOT NULL,
 CONSTRAINT [PK_ModuleRoleLookup] PRIMARY KEY CLUSTERED 
(
	[ModuleId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[Notification]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Notification](
	[NotificationId] [uniqueidentifier] NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[Channel] [nvarchar](50) NOT NULL,
	[Subject] [nvarchar](255) NOT NULL,
	[Message] [nvarchar](max) NOT NULL,
	[IsRead] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[NotificationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[PaymentLog]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[PaymentLog](
	[PaymentLogId] [uniqueidentifier] NOT NULL,
	[TechnicianUserId] [nvarchar](128) NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[PaymentDate] [datetimeoffset](7) NOT NULL,
	[JobId] [nvarchar](100) NULL,
	[Notes] [nvarchar](1000) NULL,
	[RecordedByUserId] [nvarchar](128) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[PaymentLogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[ProfileNote]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ProfileNote](
	[NoteId] [uniqueidentifier] NOT NULL,
	[TechnicianUserId] [nvarchar](128) NOT NULL,
	[AuthorUserId] [nvarchar](128) NOT NULL,
	[NoteText] [nvarchar](max) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[NoteId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[TechnicianProfile]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[TechnicianProfile](
	[TechnicianId] [nvarchar](128) NOT NULL,
	[AvailabilityStatus] [nvarchar](50) NOT NULL,
	[PayRate] [decimal](18, 2) NULL,
	[ProfileReadinessPercent] [int] NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
	[DateModified] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[TechnicianId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[UserAgreement]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[UserAgreement](
	[UserAgreementId] [uniqueidentifier] NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[AgreementName] [nvarchar](100) NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[UserAgreementId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[W9Data]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[W9Data](
	[W9DataId] [uniqueidentifier] NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[TaxYear] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[FullName] [nvarchar](255) NOT NULL,
	[BusinessName] [nvarchar](255) NULL,
	[TaxClassification] [nvarchar](100) NOT NULL,
	[AddressStreet] [nvarchar](255) NOT NULL,
	[AddressCityStateZip] [nvarchar](255) NOT NULL,
	[TaxIDNumber_Encrypted] [varbinary](max) NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
	[DateModified] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[W9DataId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [dbo].[Document] ADD  DEFAULT (newid()) FOR [DocumentId]
GO

ALTER TABLE [dbo].[Document] ADD  DEFAULT ((1)) FOR [IsActive]
GO

ALTER TABLE [dbo].[Document] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[Document] ADD  DEFAULT (getutcdate()) FOR [DateModified]
GO

ALTER TABLE [dbo].[DocumentState] ADD  DEFAULT (newid()) FOR [DocumentStateId]
GO

ALTER TABLE [dbo].[DocumentState] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[DocumentStateHistory] ADD  DEFAULT (newid()) FOR [DocumentStateHistoryId]
GO

ALTER TABLE [dbo].[DocumentStateHistory] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[DocumentType] ADD  DEFAULT (newid()) FOR [DocumentTypeId]
GO

ALTER TABLE [dbo].[DocumentType] ADD  DEFAULT ((1)) FOR [IsComplianceRequired]
GO

ALTER TABLE [dbo].[ManagerTechnicianAssignment] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[Notification] ADD  DEFAULT (newid()) FOR [NotificationId]
GO

ALTER TABLE [dbo].[Notification] ADD  DEFAULT ((0)) FOR [IsRead]
GO

ALTER TABLE [dbo].[Notification] ADD  DEFAULT ((1)) FOR [IsActive]
GO

ALTER TABLE [dbo].[Notification] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[PaymentLog] ADD  DEFAULT (newid()) FOR [PaymentLogId]
GO

ALTER TABLE [dbo].[PaymentLog] ADD  DEFAULT ((1)) FOR [IsActive]
GO

ALTER TABLE [dbo].[PaymentLog] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[ProfileNote] ADD  DEFAULT (newid()) FOR [NoteId]
GO

ALTER TABLE [dbo].[ProfileNote] ADD  DEFAULT ((1)) FOR [IsActive]
GO

ALTER TABLE [dbo].[ProfileNote] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[TechnicianProfile] ADD  DEFAULT ('Unavailable') FOR [AvailabilityStatus]
GO

ALTER TABLE [dbo].[TechnicianProfile] ADD  DEFAULT ((0)) FOR [ProfileReadinessPercent]
GO

ALTER TABLE [dbo].[TechnicianProfile] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[TechnicianProfile] ADD  DEFAULT (getutcdate()) FOR [DateModified]
GO

ALTER TABLE [dbo].[UserAgreement] ADD  DEFAULT (newid()) FOR [UserAgreementId]
GO

ALTER TABLE [dbo].[UserAgreement] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[W9Data] ADD  DEFAULT (newid()) FOR [W9DataId]
GO

ALTER TABLE [dbo].[W9Data] ADD  DEFAULT ((1)) FOR [IsActive]
GO

ALTER TABLE [dbo].[W9Data] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[W9Data] ADD  DEFAULT (getutcdate()) FOR [DateModified]
GO

ALTER TABLE [dbo].[AspNetRoleClaims]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetRoleClaims_AspNetRoles_RoleId] FOREIGN KEY([RoleId])
REFERENCES [dbo].[AspNetRoles] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetRoleClaims] NOCHECK CONSTRAINT [FK_AspNetRoleClaims_AspNetRoles_RoleId]
GO

ALTER TABLE [dbo].[AspNetUserClaims]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetUserClaims_AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserClaims] NOCHECK CONSTRAINT [FK_AspNetUserClaims_AspNetUsers_UserId]
GO

ALTER TABLE [dbo].[AspNetUserLogins]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetUserLogins_AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserLogins] NOCHECK CONSTRAINT [FK_AspNetUserLogins_AspNetUsers_UserId]
GO

ALTER TABLE [dbo].[AspNetUserRoles]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetUserRoles_AspNetRoles_RoleId] FOREIGN KEY([RoleId])
REFERENCES [dbo].[AspNetRoles] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserRoles] NOCHECK CONSTRAINT [FK_AspNetUserRoles_AspNetRoles_RoleId]
GO

ALTER TABLE [dbo].[AspNetUserRoles]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetUserRoles_AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserRoles] NOCHECK CONSTRAINT [FK_AspNetUserRoles_AspNetUsers_UserId]
GO

ALTER TABLE [dbo].[AspNetUserTokens]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserTokens] NOCHECK CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId]
GO

ALTER TABLE [dbo].[Document]  WITH CHECK ADD  CONSTRAINT [FK_Document_DocumentType] FOREIGN KEY([DocumentTypeId])
REFERENCES [dbo].[DocumentType] ([DocumentTypeId])
GO

ALTER TABLE [dbo].[Document] CHECK CONSTRAINT [FK_Document_DocumentType]
GO

ALTER TABLE [dbo].[Document]  WITH CHECK ADD  CONSTRAINT [FK_Document_WebUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[Document] CHECK CONSTRAINT [FK_Document_WebUser]
GO

ALTER TABLE [dbo].[DocumentStateHistory]  WITH CHECK ADD  CONSTRAINT [FK_DocumentStateHistory_Document] FOREIGN KEY([DocumentId])
REFERENCES [dbo].[Document] ([DocumentId])
GO

ALTER TABLE [dbo].[DocumentStateHistory] CHECK CONSTRAINT [FK_DocumentStateHistory_Document]
GO

ALTER TABLE [dbo].[DocumentStateHistory]  WITH CHECK ADD  CONSTRAINT [FK_DocumentStateHistory_DocumentState] FOREIGN KEY([DocumentStateId])
REFERENCES [dbo].[DocumentState] ([DocumentStateId])
GO

ALTER TABLE [dbo].[DocumentStateHistory] CHECK CONSTRAINT [FK_DocumentStateHistory_DocumentState]
GO

ALTER TABLE [dbo].[DocumentStateHistory]  WITH CHECK ADD  CONSTRAINT [FK_DocumentStateHistory_WebUser] FOREIGN KEY([ActorUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[DocumentStateHistory] CHECK CONSTRAINT [FK_DocumentStateHistory_WebUser]
GO

ALTER TABLE [dbo].[ManagerTechnicianAssignment]  WITH CHECK ADD  CONSTRAINT [FK_ManagerTechnicianAssignment_Manager] FOREIGN KEY([ManagerUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[ManagerTechnicianAssignment] CHECK CONSTRAINT [FK_ManagerTechnicianAssignment_Manager]
GO

ALTER TABLE [dbo].[ManagerTechnicianAssignment]  WITH CHECK ADD  CONSTRAINT [FK_ManagerTechnicianAssignment_Technician] FOREIGN KEY([TechnicianUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[ManagerTechnicianAssignment] CHECK CONSTRAINT [FK_ManagerTechnicianAssignment_Technician]
GO

ALTER TABLE [dbo].[ModuleRoleLookup]  WITH CHECK ADD  CONSTRAINT [FK_ModuleRoleLookup_AspNetRoles] FOREIGN KEY([RoleId])
REFERENCES [dbo].[AspNetRoles] ([Id])
GO

ALTER TABLE [dbo].[ModuleRoleLookup] CHECK CONSTRAINT [FK_ModuleRoleLookup_AspNetRoles]
GO

ALTER TABLE [dbo].[ModuleRoleLookup]  WITH CHECK ADD  CONSTRAINT [FK_ModuleRoleLookup_Module] FOREIGN KEY([ModuleId])
REFERENCES [dbo].[Module] ([ModuleId])
GO

ALTER TABLE [dbo].[ModuleRoleLookup] CHECK CONSTRAINT [FK_ModuleRoleLookup_Module]
GO

ALTER TABLE [dbo].[Notification]  WITH CHECK ADD  CONSTRAINT [FK_Notification_WebUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[Notification] CHECK CONSTRAINT [FK_Notification_WebUser]
GO

ALTER TABLE [dbo].[PaymentLog]  WITH CHECK ADD  CONSTRAINT [FK_PaymentLog_RecordedBy] FOREIGN KEY([RecordedByUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[PaymentLog] CHECK CONSTRAINT [FK_PaymentLog_RecordedBy]
GO

ALTER TABLE [dbo].[PaymentLog]  WITH CHECK ADD  CONSTRAINT [FK_PaymentLog_Technician] FOREIGN KEY([TechnicianUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[PaymentLog] CHECK CONSTRAINT [FK_PaymentLog_Technician]
GO

ALTER TABLE [dbo].[ProfileNote]  WITH CHECK ADD  CONSTRAINT [FK_ProfileNote_Author] FOREIGN KEY([AuthorUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[ProfileNote] CHECK CONSTRAINT [FK_ProfileNote_Author]
GO

ALTER TABLE [dbo].[ProfileNote]  WITH CHECK ADD  CONSTRAINT [FK_ProfileNote_Technician] FOREIGN KEY([TechnicianUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[ProfileNote] CHECK CONSTRAINT [FK_ProfileNote_Technician]
GO

ALTER TABLE [dbo].[TechnicianProfile]  WITH CHECK ADD  CONSTRAINT [FK_TechnicianProfile_WebUser] FOREIGN KEY([TechnicianId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[TechnicianProfile] CHECK CONSTRAINT [FK_TechnicianProfile_WebUser]
GO

ALTER TABLE [dbo].[UserAgreement]  WITH CHECK ADD  CONSTRAINT [FK_UserAgreement_WebUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[UserAgreement] CHECK CONSTRAINT [FK_UserAgreement_WebUser]
GO

ALTER TABLE [dbo].[W9Data]  WITH CHECK ADD  CONSTRAINT [FK_W9Data_WebUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[W9Data] CHECK CONSTRAINT [FK_W9Data_WebUser]
GO


USE [XDentOps]
GO

/****** Object:  View [dbo].[UserView]    Script Date: 7/4/2025 2:05:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[UserView]
AS
SELECT
    -- Core User Information
    u.Id AS UserID,
    r.Id AS RoleID,
    r.Name AS RoleName,
    u.Email,
    u.FirstName,
    u.LastName,
    u.FirstName + ' ' + u.LastName AS FullName,
    u.PhoneNumber,
    u.ProfilePicUrl AS ProfilePictureUrl,
    u.IsActive,
    u.UserName,

    -- Primary Address Information from the new Address table
    a.AddressID,
    a.AddressType,
    a.AddressLine1,
    a.AddressLine2,
    a.City,
    a.State,
    a.ZipCode,
    a.Country

FROM
    dbo.AspNetUsers AS u
INNER JOIN
    dbo.AspNetUserRoles AS ur ON u.Id = ur.UserId
INNER JOIN
    dbo.AspNetRoles AS r ON ur.RoleId = r.Id
LEFT JOIN
    -- Use a LEFT JOIN to ensure all users are returned, even if they don't have a primary address yet.
    -- The join condition specifically looks for the address marked as primary.
    dbo.Address AS a ON u.Id = a.UserID AND a.IsPrimary = 1;

GO

/****** Object:  View [dbo].[TechnicianView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[TechnicianView]
AS
SELECT
    uv.*,	
    --
    tp.AvailabilityStatus,
    tp.PayRate,
    tp.ProfileReadinessPercent,
    tp.DateAdded AS ProfileDateAdded,
    tp.DateModified AS ProfileDateModified
FROM
    dbo.UserView AS uv
INNER JOIN
    dbo.TechnicianProfile AS tp ON uv.UserID = tp.TechnicianID;
GO

/****** Object:  View [dbo].[TechnicianRosterView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[TechnicianRosterView]
AS
SELECT
    uv.UserID,
    uv.FirstName,
    uv.LastName,
    uv.FullName,
    uv.Email,
    uv.PhoneNumber,
    uv.ProfilePictureUrl,
    tp.AvailabilityStatus,
    ComplianceStatus = CASE
        -- Condition 1: Check if there are any required documents that are missing entirely.
        WHEN EXISTS (
            SELECT 1
            FROM dbo.DocumentType dt
            WHERE dt.IsComplianceRequired = 1
            AND NOT EXISTS (
                SELECT 1
                FROM dbo.Document d
                WHERE d.UserID = uv.UserID AND d.DocumentTypeID = dt.DocumentTypeID AND d.IsActive = 1
            )
        ) THEN 'Missing Required Documents'
        -- Condition 2: Check if any active, required documents have expired.
        WHEN EXISTS (
            SELECT 1
            FROM dbo.Document d
            INNER JOIN dbo.DocumentType dt ON d.DocumentTypeID = dt.DocumentTypeID
            WHERE d.UserID = uv.UserID AND d.IsActive = 1 AND dt.IsComplianceRequired = 1
            AND d.ExpirationDate IS NOT NULL AND d.ExpirationDate < GETUTCDATE()
        ) THEN 'Expired Documents'
        -- Otherwise, they are compliant.
        ELSE 'Compliant'
    END
FROM
    dbo.UserView AS uv
INNER JOIN
    dbo.TechnicianProfile AS tp ON uv.UserID = tp.TechnicianID
WHERE
    uv.RoleName = 'Technician';
GO

/****** Object:  View [dbo].[DocumentView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[DocumentView]
AS
SELECT
    d.DocumentID,
    d.UserID,
    uv.FullName AS UserFullName,
    d.DocumentTypeID,
    dt.TypeName AS DocumentTypeName,
    d.FileName,
    d.StoragePath,
    d.MimeType,
    d.ExpirationDate,
    d.IsActive,
    d.DateAdded,
    d.DateModified,
    -- Get details from the most recent status history record
    LastState.StateName AS CurrentStateName,
    LastState.StateDateAdded AS CurrentStateDateAdded,
    LastState.ActorFullName AS CurrentStateActorFullName,
    LastState.Notes AS CurrentStateNotes
FROM
    dbo.Document AS d
INNER JOIN
    dbo.UserView AS uv ON d.UserID = uv.UserID
INNER JOIN
    dbo.DocumentType AS dt ON d.DocumentTypeID = dt.DocumentTypeID
OUTER APPLY (
    SELECT TOP 1
        ds.StateName,
        dsh.DateAdded AS StateDateAdded,
        actor.FullName AS ActorFullName,
        dsh.Notes
    FROM
        dbo.DocumentStateHistory dsh
    INNER JOIN
        dbo.DocumentState ds ON dsh.DocumentStateID = ds.DocumentStateID
    INNER JOIN
        dbo.UserView actor ON dsh.ActorUserID = actor.UserID
    WHERE
        dsh.DocumentID = d.DocumentID
    ORDER BY
        dsh.DateAdded DESC
) AS LastState;
GO

/****** Object:  View [dbo].[ProfileNoteView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[ProfileNoteView]
AS
SELECT
    pn.NoteID,
    pn.TechnicianUserID,
    tech.FullName AS TechnicianFullName,
    pn.AuthorUserID,
    author.FullName AS AuthorFullName,
    pn.NoteText,
    pn.IsActive,
    pn.DateAdded
FROM
    dbo.ProfileNote AS pn
INNER JOIN
    dbo.UserView AS tech ON pn.TechnicianUserID = tech.UserID
INNER JOIN
    dbo.UserView AS author ON pn.AuthorUserID = author.UserID;
GO

/****** Object:  View [dbo].[W9DataView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[W9DataView]
AS
SELECT
    w9.W9DataID,
    w9.UserID,
    uv.FullName AS UserFullName,
    w9.TaxYear,
    w9.IsActive,
    w9.FullName,
    w9.BusinessName,
    w9.TaxClassification,
    w9.AddressStreet,
    w9.AddressCityStateZip,
    w9.DateAdded,
    w9.DateModified
FROM
    dbo.W9Data AS w9
INNER JOIN
    dbo.UserView AS uv ON w9.UserID = uv.UserID;
GO

/****** Object:  View [dbo].[PaymentLogView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[PaymentLogView]
AS
SELECT
    pl.PaymentLogID,
    pl.TechnicianUserID,
    tech.FullName AS TechnicianFullName,
    pl.Amount,
    pl.PaymentDate,
    pl.JobID,
    pl.Notes,
    pl.RecordedByUserID,
    recorder.FullName AS RecordedByFullName,
    pl.IsActive,
    pl.DateAdded
FROM
    dbo.PaymentLog AS pl
INNER JOIN
    dbo.UserView AS tech ON pl.TechnicianUserID = tech.UserID
INNER JOIN
    dbo.UserView AS recorder ON pl.RecordedByUserID = recorder.UserID;
GO

/****** Object:  View [dbo].[NotificationView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[NotificationView]
AS
SELECT
    n.NotificationID,
    n.UserID,
    uv.FullName AS UserFullName,
    n.Channel,
    n.Subject,
    n.Message,
    n.IsRead,
    n.IsActive,
    n.DateAdded
FROM
    dbo.Notification AS n
INNER JOIN
    dbo.UserView AS uv ON n.UserID = uv.UserID;
GO

/****** Object:  View [dbo].[UserAgreementView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[UserAgreementView]
AS
SELECT
    ua.UserAgreementID,
    ua.UserID,
    uv.FullName AS UserFullName,
    ua.AgreementName,
    ua.DateAdded
FROM
    dbo.UserAgreement AS ua
INNER JOIN
    dbo.UserView AS uv ON ua.UserID = uv.UserID;
GO

/****** Object:  View [dbo].[RoleAllowedModules]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE   VIEW [dbo].[RoleAllowedModules]
AS
--1) Common for all
SELECT
	R.Id as RoleId,
	R.Name as RoleName,
	M.ModuleId, 
	M.ModuleName
FROM
	AspNetRoles R
CROSS JOIN Module M
WHERE
	M.ModuleId = 'COMM'
--	
UNION
--2) SuperUser gets all modules
SELECT
	R.Id as RoleId,
	R.Name as RoleName,
	M.ModuleId, 
	M.ModuleName
FROM
	AspNetRoles R
CROSS JOIN Module M
WHERE
	R.Name IN ('SuperAdmin')
--	
UNION
--3) Explictly assigned modules
SELECT
	R.Id as RoleId,
	R.Name as RoleName,
	M.ModuleId,
	M.ModuleName
FROM
	AspNetRoles R 
INNER JOIN ModuleRoleLookup MR ON 
	(MR.RoleID = R.Id)
INNER JOIN Module M ON 
	M.ModuleId = MR.ModuleId;
GO

/****** Object:  View [dbo].[RolesView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- dbo.RolesView source

CREATE   VIEW [dbo].[RolesView] 
AS 
SELECT
	R.Id,
	R.Name,
	R.NormalizedName,
	R.Description,
	(SELECT COUNT(*) FROM AspNetUserRoles UR WHERE UR.RoleId = R.Id) AS UserCount,
	(SELECT STRING_AGG(RAM.ModuleName, ', ') FROM RoleAllowedModules RAM WHERE RAM.RoleId = R.Id) AS AllowedModules
FROM
	AspNetRoles R
GO

/****** Object:  View [dbo].[UserAllowedModules]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- dbo.UserAllowedModules source

CREATE    VIEW [dbo].[UserAllowedModules]
AS
--1) Everyone gets common
SELECT
	Id as UserId,
	UserName,
	M.ModuleId, 
	M.ModuleName
FROM
	ASPNETUSERS U
CROSS JOIN MODULE M
WHERE
	U.IsActive = 1
	AND M.ModuleId = 'COMM'
--	
UNION
--2) Explicit roles
SELECT
	U.Id as UserId, 
	U.UserName,
	RAM.ModuleId,
	RAM.ModuleName
FROM
	AspNetUsers U
INNER JOIN AspNetUserRoles UR ON 
	UR.UserId = U.Id 
INNER JOIN RoleAllowedModules RAM ON 
	RAM.RoleId = UR.RoleId
	

GO

================
File: xdent-ops-dotnet-backend/.rules/RULE-AZDO-TASKS.md
================
# RULE-AZDO-TASKS.md - Create Tasks Under User Story

## Purpose

This rule defines the workflow for creating frontend and backend tasks under a User Story when given a work item ID.

## Workflow Steps

### Step 1: Get User Story Details

```bash
az boards work-item show --id {WORK_ITEM_ID}
```

### Step 2: Validate Work Item

Check if the work item meets these criteria:

- **Work Item Type**: Must be "User Story"

**If validation fails, reject with reason:**

- "Work item #{ID} is a {WorkItemType}. Only User Stories are supported for task creation."

### Step 3: Review User Story Content

- Analyze the User Story title and description
- Review acceptance criteria
- Understand the business requirements
- Reference database schema from `.rules/DDL.sql` if needed

### Step 4: Create Frontend Task (IF APPLICABLE; Some User Stories will be BACKEND ONLY)

```bash
az boards work-item create \
  --title "FE: {Frontend task title based on User Story}" \
  --type "Task" \
  --parent {WORK_ITEM_ID} \
  --description "Implement frontend components and logic for {User Story summary}.

Requirements:
- Create/update React components using Refine framework
- Implement UI/UX as per acceptance criteria
- Handle client-side validation and state management
- Integrate with backend API endpoints
- Ensure responsive design and accessibility

Technical Notes:
- Use existing component patterns and conventions
- Types will be auto-generated from database schema
- Follow established routing and authentication patterns"
```

### Step 5: Create Backend Task (IF APPLICABLE; Some User Stories will be FRONTEND ONLY)

```bash
az boards work-item create \
  --title "BE: {Backend task title based on User Story}" \
  --type "Task" \
  --parent {WORK_ITEM_ID} \
  --description "Implement backend API and business logic for {User Story summary}.

Requirements:
- Create/update .NET Core Web API controllers and services
- Implement business logic and data validation
- Add/modify database operations (CRUD as needed)
- Ensure proper error handling and logging

Technical Notes:
- Follow existing service and repository patterns
- Types auto-generated from database schema in frontend and backend
- Implement proper authentication/authorization
```

### Step 6: Assign and Set State

```bash
# Assign both tasks to kc.abramson@gmail.com
az boards work-item update --id {FRONTEND_TASK_ID} --assigned-to "kc.abramson@gmail.com"
az boards work-item update --id {BACKEND_TASK_ID} --assigned-to "kc.abramson@gmail.com"
```

## Example Task Titles Based on User Story

**User Story**: "As a user, I want to manage my profile information"

**Generated Tasks**:

- `FE: Profile management UI and form handling`
- `BE: Profile API endpoints and validation logic`

**User Story**: "As an admin, I want to view system reports"

**Generated Tasks**:

- `FE: Admin dashboard with report visualization`
- `BE: Report generation and data aggregation APIs`

## Example Usage

```
User: "Create tasks for User Story 1234"

Agent Response:
1. ✅ Retrieved User Story 1234: "User profile management"
2. ✅ Validated as User Story work item
3. ✅ Analyzed requirements and acceptance criteria
4. ✅ Created FE task: "FE: Profile management UI and form handling" (ID: 1235)
5. ✅ Created BE task: "BE: Profile API endpoints and validation logic" (ID: 1236)
6. ✅ Both tasks assigned to kc.abramson@gmail.com
```

## Error Handling

- If work item doesn't exist: "Work item #{ID} not found"
- If not a User Story: "Work item #{ID} is not a User Story"
- If task creation fails: "Failed to create task: {error details}"

## Notes

- Tasks will automatically inherit area path and iteration from parent User Story
- Both tasks reference `.rules/DDL.sql` for database schema context
- Task descriptions are intentionally high-level for AI agent interpretation
- Follow existing project patterns and conventions

================
File: xdent-ops-dotnet-backend/.rules/RULE-AZDO-WI.md
================
# RULE-AZDO-WI.md - Azure DevOps Work Item Completion Instructions

## Purpose

This rule defines the complete workflow for processing and completing Azure DevOps work items when referenced by ID number.

## Workflow Steps

### Step 1: Ingest Work Item List

```bash
az boards query --wiql "SELECT [System.Id], [System.Title], [System.WorkItemType], [System.State], [System.AssignedTo], [System.CreatedDate], [System.ChangedDate], [System.AreaPath], [System.IterationPath], [System.Tags], [Microsoft.VSTS.Common.Priority], [Microsoft.VSTS.Common.Severity], [System.Description], [System.Parent], [Microsoft.VSTS.Common.AcceptanceCriteria] FROM WorkItems ORDER BY [System.Id]"
```

### Step 2: Validate Work Item Eligibility

Check if the work item meets these criteria:

- **Work Item Type**: Must be either "Task" or "User Story"
- **State**: Must be "New", "Pending", or "Active"

**If validation fails, reject with specific reason:**

- "Work item #{ID} is a {WorkItemType}. Only Tasks and User Stories are supported."
- "Work item #{ID} is in '{State}' state. Only New, Pending, or Active items can be completed."

### Step 3: Get Work Item Details and Update Assignment

```bash
# Get detailed work item information
az boards work-item show --id {WORK_ITEM_ID}

# Assign to kc.abramson@gmail.com
az boards work-item update --id {WORK_ITEM_ID} --assigned-to "kc.abramson@gmail.com"

# If not Active, set to Active
az boards work-item update --id {WORK_ITEM_ID} --state "Active"
```

### Step 4: Analyze Codebase

- Review current codebase structure
- Understand existing patterns and conventions
- Identify relevant files and components for the work item
- Check for dependencies and related code

### Step 5: Create Implementation Plan

Based on work item requirements:

- Break down the task into logical steps
- Identify files that need to be created/modified
- Plan the implementation approach
- Consider testing requirements
- Review acceptance criteria (if User Story)

### Step 6: Complete the Task

- Implement the required changes
- Follow existing code patterns and conventions
- Write/update tests as needed
- Ensure all acceptance criteria are met
- Verify the solution works as expected

### Step 7: Update Work Item with Detailed Comment

Add a comprehensive comment describing what was accomplished:

```bash
az boards work-item update --id {WORK_ITEM_ID} --discussion "Claude Code Edit: [Detailed description of changes made]

- Files modified: [list key files]
- Key changes: [summarize main implementations]
- Tests added/updated: [testing details if applicable]
- Acceptance criteria addressed: [for User Stories]
- Any considerations or notes: [technical details, dependencies, etc.]"
```

### Step 8: Close Work Item

**For User Stories:**

```bash
az boards work-item update --id {WORK_ITEM_ID} --state "Resolved"
```

**For Tasks:**

```bash
az boards work-item update --id {WORK_ITEM_ID} --state "Closed"
```

## Example Usage

```
User: "Follow instructions in RULE-AZDO-WI.md for 1234"

Agent Response:
1. ✅ Fetching work item list...
2. ✅ Validating work item 1234: User Story in Active state
3. ✅ Assigned to kc.abramson@gmail.com and set to Active
4. ✅ Analyzing codebase...
5. ✅ Implementation plan created
6. ✅ Implementing changes...
7. ✅ Added detailed comment with "Claude Code Edit" summary
8. ✅ Work item 1234 resolved successfully
```

## Error Handling

- If work item doesn't exist: "Work item #{ID} not found"
- If Azure CLI not authenticated: "Please authenticate with Azure DevOps using 'az login'"
- If insufficient permissions: "Insufficient permissions to update work item #{ID}"

## Notes

- Always confirm successful completion with the user
- Provide summary of changes made
- Include any relevant file paths or key implementations
- If implementation is complex, ask for user confirmation before proceeding

================
File: xdent-ops-dotnet-backend/appsettings.Development.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

================
File: xdent-ops-dotnet-backend/appsettings.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=192.168.86.10;Initial Catalog=XDentOps;Persist Security Info=True;User ID=sa;password=1LuvSlutz;Pooling=True;MultipleActiveResultSets=False;Trust Server Certificate=true;",
    "APPLICATIONINSIGHTS_CONNECTION_STRING": "InstrumentationKey=8e7543c2-e582-4aec-a376-41be91fa1d55;IngestionEndpoint=https://eastus-8.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus.livediagnostics.monitor.azure.com/"
  },
  "Jwt": {
    "Key": "isb3c3DgFvHcMQgoSawKMBh7UCBXRPKM3DItkEDggeY=",
    "Issuer": "XDentOps-Nt7q6e2",
    "Audience": "XDentOps"
  },
  "ApplicationInsights": {
    //"InstrumentationKey": "8e7543c2-e582-4aec-a376-41be91fa1d55"
  },
  "OAuthClientID": {
    "Google": "534587374875-ud3ccqdlbnbm25kp3g35kg7vkqclflil.apps.googleusercontent.com"
  },
  
}

================
File: xdent-ops-dotnet-backend/Common/Constants.cs
================
//DO NOT EDIT: Autogenerated from: C:\Users\kcabr\OneDrive\Code\LINQPad\LINQPad Queries\CEHR\AutoGen - Common.linq

namespace XDentOpsAPI.Common
{
    public static class RoleName
    {
			public const string OnboardingAdmin = "OnboardingAdmin";
			public const string OnboardingUser = "OnboardingUser";
			public const string SuperAdmin = "SuperAdmin";
			public const string OfficeUser = "OfficeUser";
			public const string BillingUser = "BillingUser";
			public const string BillingAdmin = "BillingAdmin";
			public const string ProviderUser = "ProviderUser";
			public const string OfficeAdmin = "OfficeAdmin";
			public const string ProviderAdmin = "ProviderAdmin";
			public const string HRUser = "HRUser";
			public const string HRAdmin = "HRAdmin";
    }
}

================
File: xdent-ops-dotnet-backend/Controllers/AccountController.cs
================
using System.Data;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using XDentOpsAPI.Models.Data;
//using AutoMapper;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using XDentOpsAPI.Models.VM;
using XDentOpsAPI.Common;
using static Microsoft.ApplicationInsights.MetricDimensionNames.TelemetryContext;
using Microsoft.SqlServer.Server;
using Google.Apis.Auth;


[ApiController]
[Route("[controller]")]
public class AccountController : ControllerBase
{
    private readonly UserManager<ApplicationUser> _userManager;
    private readonly RoleManager<ApplicationRole> _roleManager;
    private readonly SignInManager<ApplicationUser> _signInManager;
    private readonly IConfiguration _configuration;
    private readonly ILogger<AccountController> _logger;
    private readonly ApplicationDbContext _context;
    //private readonly IMapper _mapper;

    public AccountController
    (
            UserManager<ApplicationUser> userManager,
            SignInManager<ApplicationUser> signInManager,
            RoleManager<ApplicationRole> roleManager,
            IConfiguration configuration,
            ILogger<AccountController> logger,
            ApplicationDbContext context
    )
    {
        _userManager = userManager;
        _signInManager = signInManager;
        _configuration = configuration;
        _logger = logger;
        _context = context;
        _roleManager = roleManager;
    }

    // Add login and registration action methods here
    //[HttpPost("register")]
    //public async Task<IActionResult> Register([FromBody] RegisterModel model)
    //{
    //    var user = new ApplicationUser { UserName = model.Email, Email = model.Email };
    //    var result = await _userManager.CreateAsync(user, model.Password);
    //    if (result.Succeeded)
    //    {
    //        await _signInManager.SignInAsync(user, isPersistent: false);
    //        return Ok();
    //    }
    //    return BadRequest(result.Errors);
    //}

    [HttpPost("login")]
    public async Task<ActionResult<LoginResultVM>> Login([FromBody] LoginVM model)
    {
        var ipAddress = HttpContext.Connection.RemoteIpAddress.ToString();
        var user = await _userManager.FindByEmailAsync(model.Email);
        if (user != null)
        {
            var result = await _signInManager.CheckPasswordSignInAsync(user, model.Password, false);
            if (result.Succeeded)
            {
                var logResult = await LoadUserAfterLogin(user);

                // Return the user object in the response
                return Ok(logResult);
            }
        }

        _logger.LogInformation("UserLoginAttempt - Username: {Username}, Success: {Success}, IpAddress: {IpAddress}", model.Email, false, ipAddress);

        return BadRequest(new { message = "Invalid email or password" });
    }

    [HttpPost("login-google")]
    public async Task<ActionResult<LoginResultVM>> LogInWithGoogle([FromBody] string idToken)
    {
        try
        {
            var settings = new GoogleJsonWebSignature.ValidationSettings();
            // Set your Google Client ID here
            settings.Audience = new List<string>() { _configuration["OAuthClientID:Google"] };

            var payload = await GoogleJsonWebSignature.ValidateAsync(idToken, settings);
            var userId = payload.Subject;
            var userEmail = payload.Email;
            var userName = payload.Name;
            var userPictureUrl = payload.Picture;

            // Check if user already exists
            var user = await _userManager.FindByEmailAsync(userEmail);
            if (user == null)
            {
                // Create a new user with a random password
                var randomPassword = GenerateRandomPassword();
                user = new ApplicationUser { UserName = userEmail, Email = userEmail, FirstName = payload.GivenName, LastName = payload.FamilyName, ProfilePicUrl=payload.Picture, IsActive = true, };
                var result = await _userManager.CreateAsync(user, randomPassword);
                if (!result.Succeeded)
                {
                    var errors = result.Errors.Select(e => e.Description);
                    var errorMessage = string.Join(" ", errors);
                    return BadRequest(new { message = $"Failed to create a new user. Errors: {errorMessage}" });
                }
            } 
            else
            {
                // Update with latest info
                user.FirstName = payload.GivenName; 
                user.LastName = payload.FamilyName;
                user.ProfilePicUrl = payload.Picture;
                
                await _userManager.UpdateAsync(user);
                
             }

            // Sign in the user
            await _signInManager.SignInAsync(user, isPersistent: false);

            // Load user after login
            var logResult = await LoadUserAfterLogin(user);

            return Ok(logResult);
        }
        catch (InvalidJwtException ex)
        {
            return BadRequest(ex.Message);
        }
    }

    private async Task<LoginResultVM> LoadUserAfterLogin(ApplicationUser user)
    {
        var ipAddress = HttpContext.Connection.RemoteIpAddress.ToString();

        // Load the user's roles
        var roles = await _userManager.GetRolesAsync(user);

        // Define your JWT token signing key, issuer, and audience in your appsettings.json
        var key = Encoding.ASCII.GetBytes(_configuration["Jwt:Key"] ?? "NO_KEY");
        var issuer = _configuration["Jwt:Issuer"];
        var audience = _configuration["Jwt:Audience"];

        var claims = new List<Claim>()
                {
                    new Claim(ClaimTypes.Name, user.Id)
                };
        claims.AddRange(roles.Select(role => new Claim(ClaimTypes.Role, role)));

        //Load allowed modules
        var allowedModules = await _context.UserAllowedModules.Where(w => w.UserId == user.Id).ToListAsync();
        claims.AddRange(allowedModules.Select(am => new Claim("AllowedModule", am.ModuleName)));

        var tokenHandler = new JwtSecurityTokenHandler();
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(claims),
            Expires = DateTime.UtcNow.AddDays(1), // You can set the token expiration as needed
            Issuer = issuer,
            Audience = audience,
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
        };

        var token = tokenHandler.CreateToken(tokenDescriptor);
        var tokenString = tokenHandler.WriteToken(token);

        //Update last login date
        var previousLoginDate = user.DateLastLogin;
        user.DateLastLogin = DateTime.UtcNow;
        await _userManager.UpdateAsync(user);

        //var userDTO = (await _context.AspNetUsers.FindAsync(user.Id)).ToDto();

        //userDTO.Token = tokenString;
        //userDTO.DatePreviousLogin = previousLoginDate;

        _logger.LogInformation("UserLoginAttempt - Username: {Username}, Success: {Success}, IpAddress: {IpAddress}", user.Email, true, ipAddress);

        var logResult = new LoginResultVM()
        {
            Status = "ok",
            Type = "account",
            Token = tokenString,
        };

        return logResult;
    }

    [HttpGet("get-all-users")]
    //[Authorize(Roles = RoleName.SuperAdmin)] 
    public async Task<ActionResult<UserList>> GetAllUsers()
    {
        var users = _context.AspNetUsers.OrderBy(o => o.LastName).Select(user => user.ToDto()).ToList();
        var results = new UserList()
        {
            Data = users.ToArray(),
            Total = users.Count(),
            Success = true,
        };
        return Ok(results);
    }

    [HttpGet("get-current-user")]
    //[Authorize]
    public async Task<ActionResult<UserVM>> GetCurrentUser()
    {
        var userId = User?.Identity?.Name;

        if (userId == null)
        {
            return Ok(); // Unauthorized();
        }

        var user = await _userManager.FindByIdAsync(userId);

        if (user == null)
        {
            return NotFound();
        }

        var userVM = await ConvertApplicationUserToUserVMAsync(user);

        return Ok(userVM);
    }

    [HttpPut("update-user")]
    public async Task<ActionResult<UserVM>> UpdateUser(UserVM userVM)
    {
        // Find the user by username
        var user = await _userManager.FindByNameAsync(userVM.UserName);

        if (user == null)
        {
            return NotFound();
        }

        // Update these
        user.PhoneNumber = userVM.PhoneNumber;
        user.Suffix = userVM.Suffix;
        user.Email2 = userVM.Email2;
        user.Phone2 = userVM.Phone2;
        user.PreferredName = userVM.PreferredName;
        user.Creds = userVM.Creds;

        // Not these (controlled from SSO)
        //user.Email = userVM.Email;
        //user.UserName = userVM.UserName;
        //user.FirstName = userVM.FirstName;
        //user.LastName = userVM.LastName;
        //user.ProfilePicUrl = userVM.ProfilePicUrl;        

        // Update the user
        var result = await _userManager.UpdateAsync(user);        

        if (result.Succeeded)
        {
            var returnUserVM = await ConvertApplicationUserToUserVMAsync(user);
            return Ok(returnUserVM);
        }
        else
        {
            var errorMessages = result.Errors.Select(x => x.Description);
            var combinedErrorMessage = string.Join("; ", errorMessages);
            return BadRequest(new { errors = combinedErrorMessage });
        }
    }


    [HttpPost("logout")]
    public async Task<IActionResult> Logout()
    {
        var userId = User?.Identity?.Name;

        if (userId == null)
        {
            return Ok(); // Unauthorized();
        }

        var user = await _context.AspNetUsers.SingleOrDefaultAsync(u => u.Id == userId);

        // This doesn't log the user out of the JWT token but rather the Cookie if you are using one
        await _signInManager.SignOutAsync();

        _logger.LogInformation("User logged out - Username: {UserName}", user.UserName);

        // Clearing user context and claims, if any
        HttpContext.User = new ClaimsPrincipal(new ClaimsIdentity());

        return Ok(new { message = "User logged out successfully" });
    }

        #region Roles
    [HttpGet("get-all-roles")]
    //[Authorize(Roles = RoleName.SuperAdmin)] 
    public async Task<ActionResult<RoleList>> GetAllRoles()
    {
        var roles = await _context.RolesViews
                                    .OrderByDescending(o => o.Name == RoleName.SuperAdmin)
                                    .ThenBy(o => o.Name)
                                    .ToListAsync();
        var results = new RoleList()
        {
            Data = roles.ToArray(),
            Total = roles.Count(),
            Success = true,
        };

        return Ok(results);
    }

    [HttpGet("role/{id}")]
    public async Task<ActionResult<AspNetRoleDTO>> GetRoleById(string id)
    {
        var role = await _context.AspNetRoles.FindAsync(id);
        if (role == null)
        {
            return NotFound();
        }

        return role.ToDto();
    }

    // Get role by name
    [HttpGet("role/name/{name}")]
    public async Task<ActionResult<AspNetRoleDTO>> GetRoleByName(string name)
    {
        var role = await _context.AspNetRoles.FindAsync(name);
        if (role == null)
        {
            return NotFound();
        }

        return role.ToDto();
    }

    // Add a new role
    [HttpPost("role")]
    //[Authorize(Roles = RoleName.SuperAdmin)]
    public async Task<ActionResult<AspNetRoleDTO>> AddNewRole(RoleVM roleVM)
    {
        roleVM.Id = Guid.NewGuid().ToString();

        var role = new ApplicationRole() { Id = roleVM.Id, Name = roleVM.Name, Description = roleVM.Description };
        var result = await _roleManager.CreateAsync(role);

        if (result.Succeeded)
        {
            return CreatedAtAction(nameof(GetRoleById), new { id = role.Id }, roleVM);
        }

        return BadRequest(result.Errors);
    }

    // Update an existing role
    [HttpPut("role/{id}")]
    //[Authorize(Roles = RoleName.SuperAdmin)]
    public async Task<IActionResult> UpdateRole(string id, RoleVM roleVM)
    {
        if (id != roleVM.Id)
        {
            return BadRequest();
        }

        var role = await _roleManager.FindByIdAsync(id);
        if (role == null)
        {
            return NotFound();
        }

        //Name is permanent. Do not allow change
        //role.Name = roleVM.Name;
        role.Description = roleVM.Description;

        var result = await _roleManager.UpdateAsync(role);

        if (result.Succeeded)
        {
            return NoContent();
        }

        return BadRequest(result.Errors);
    }

    // Delete a role
    [HttpDelete("role/{id}")]
    //[Authorize(Roles = RoleName.SuperAdmin)]
    public async Task<IActionResult> DeleteRole(string id)
    {
        var role = await _roleManager.FindByIdAsync(id);
        if (role == null)
        {
            return NotFound();
        }

        //Block from deleting SuperAdmin role
        if (role.Name == RoleName.SuperAdmin)
        {
            return BadRequest("Cannot delete the SuperAdmin role");
        }

        var result = await _roleManager.DeleteAsync(role);

        if (result.Succeeded)
        {
            _logger.LogInformation("RoleDeleted - RoleId: {RoleId}, RoleName: {RoleName}", role.Id, role.Name);
            return NoContent();
        }

        return BadRequest(result.Errors);
    }

    #endregion

    #region Utilities
    private string GenerateRandomPassword()
    {
        // Define default min and max password lengths.
        int minLength = 8;
        int maxLength = 12;

        // Define supported password characters divided into groups.
        string passwordCharsLcase = "abcdefgijkmnopqrstwxyz";
        string passwordCharsUcase = "ABCDEFGHJKLMNPQRSTWXYZ";
        string passwordCharsNumeric = "23456789";
        string passwordCharsSpecial = "*$-+?_&=!%{}/";

        // Create a local array containing supported password characters grouped by types. 
        // You can remove character groups from this array, but doing so will weaken the password strength.
        var charGroups = new char[][]
        {
        passwordCharsLcase.ToCharArray(),
        passwordCharsUcase.ToCharArray(),
        passwordCharsNumeric.ToCharArray(),
        passwordCharsSpecial.ToCharArray()
        };

        // Use a cryptographically strong random number generator.
        Random cryptoRand = new Random();

        List<char> password = new List<char>();

        // Generate the first part of the password, the random length part.
        for (int i = 0; i < minLength; i++)
        {
            var characterGroup = charGroups[cryptoRand.Next(0, charGroups.Length)];
            password.Add(characterGroup[cryptoRand.Next(0, characterGroup.Length)]);
        }

        // Generate the last part of the password, from the remaining character groups.
        for (int i = 0; i < maxLength - minLength; i++)
        {
            var characterGroup = charGroups[i % charGroups.Length];
            password.Add(characterGroup[cryptoRand.Next(0, characterGroup.Length)]);
        }

        // Convert password characters into a string and return the result.
        return new string(password.ToArray());
    }

    private async Task<UserVM> ConvertApplicationUserToUserVMAsync(ApplicationUser user)
    {
        var roles = await _userManager.GetRolesAsync(user);

        var userVM = new UserVM()
        {
            Id = user.Id,
            UserName = user.UserName,
            FirstName = user.FirstName,
            LastName = user.LastName,
            Email = user.Email,
            PhoneNumber = user.PhoneNumber,
            Creds = user.Creds,
            Email2 = user.Email2,
            Phone2 = user.Phone2,
            Suffix = user.Suffix,
            PreferredName = user.PreferredName,
            ProfilePicUrl = user.ProfilePicUrl,
            AllowedModules = await _context.UserAllowedModules.Where(u => u.UserId == user.Id).Select(m => new ModuleDTO() { ModuleId = m.ModuleId, ModuleName = m.ModuleName }).ToArrayAsync(),
            Roles = roles.Select(r => new RoleVM()
            {
                Name = r,                
            }).ToArray()
            };

        return userVM;
    }



    #endregion
}

================
File: xdent-ops-dotnet-backend/Controllers/AppSettingsController.cs
================
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using XDentOpsAPI.Models.Data;

namespace webapi.Controllers;

[ApiController]
[Route("[controller]")]
public class AppSettingsController : ControllerBase
{
    private ApplicationDbContext _context;

    private readonly ILogger<AppSettingsController> _logger;

    public AppSettingsController(ILogger<AppSettingsController> logger, ApplicationDbContext context)
    {
        _logger = logger;        
        _context = context;
    }

    [HttpGet("get-all")]
    public IEnumerable<string> GetAll()
    {
        return _context.AppSettings.Select(x => x.Key).ToList();
    }
}

================
File: xdent-ops-dotnet-backend/Controllers/AvailabilityController.cs
================
using System.Data;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using XDentOpsAPI.Models;

[ApiController]
[Route("[controller]")]
public class AvailabilityController : ControllerBase
{
    public AvailabilityController()
    {
        
    }

    [HttpGet("check")]
    public IActionResult Check()
    {
        return Ok(new { message = "Service is available!" });
    }
}

================
File: xdent-ops-dotnet-backend/Controllers/TechnicianController.cs
================
// File: Controllers/TechnicianController.cs

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using XDentOpsAPI.Models.Data;
using XDentOpsAPI.Models.VM;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Identity;

namespace XDentOpsAPI.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class TechnicianController : ControllerBase
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly RoleManager<ApplicationRole> _roleManager;
        
        private readonly ApplicationDbContext _context;
        private readonly ILogger<TechnicianController> _logger;

        public TechnicianController(UserManager<ApplicationUser> userManager, RoleManager<ApplicationRole> roleManager, ILogger<TechnicianController> logger, ApplicationDbContext context)
        {
            _logger = logger;
            _context = context;
            _userManager = userManager;
            _roleManager = roleManager;

        }

        /// <summary>
        /// Gets a paginated, sorted, and filtered list of technicians.
        /// </summary>
        [HttpGet]
        public async Task<ActionResult<List<TechnicianVM>>> GetList(
            [FromQuery] string _sort = "FullName",
            [FromQuery] string _order = "ASC",
            [FromQuery] int _start = 0,
            [FromQuery] int _end = 10,
            [FromQuery] string? q = null)
        {
            // Start with the base IQueryable against the view
            var query = _context.TechnicianViews.Where(t => t.IsActive).AsQueryable();

            // Apply filtering
            if (!string.IsNullOrEmpty(q))
            {
                var formattedQuery = q.Trim().ToLower();
                query = query.Where(t =>
                    (t.FullName != null && t.FullName.ToLower().Contains(formattedQuery)) ||
                    (t.Email != null && t.Email.ToLower().Contains(formattedQuery))
                );
            }

            // Get the total count for the X-Total-Count header before pagination
            var totalCount = await query.CountAsync();
            Response.Headers["X-Total-Count"] = totalCount.ToString();

            // Apply sorting
            if (!string.IsNullOrWhiteSpace(_sort))
            {
                query = query.OrderBy($"{_sort} {_order}");
            }

            // **MODIFIED PART: Project from the EF entity to the ViewModel**
            // This .Select() statement is translated into SQL by EF Core,
            // so the database only returns the data needed for the ViewModel.
            var technicians = await query
                .Skip(_start)
                .Take(_end - _start)
                .Select(ViewModelMappingExtensions.TechnicianViewToVM)
                .ToListAsync();

            return Ok(technicians);
        }

        /// <summary>
        /// Gets a single technician by their ID and returns it as a ViewModel.
        /// </summary>
        [HttpGet("{id}")]
        public async Task<ActionResult<TechnicianVM>> GetOne(string id)
        {
            // **MODIFIED PART: Find, project, and then return the first result**
            var technician = await _context.TechnicianViews
                .AsNoTracking()
                .Where(tv => tv.UserID == id)
                .Select(ViewModelMappingExtensions.TechnicianViewToVM)
                .FirstOrDefaultAsync();

            if (technician == null)
            {
                return NotFound($"Technician with ID {id} not found.");
            }

            return Ok(technician);
        }

        /// <summary>
        /// Creates a new technician by first creating an ASP.NET Identity user
        /// and then creating a related technician profile. The entire operation
        /// is performed within a transaction to ensure data integrity.
        /// </summary>
        /// <param name="model">The ViewModel containing all necessary data for the new technician.</param>
        /// <returns>The newly created technician object as a ViewModel.</returns>
        [HttpPost]
        public async Task<IActionResult> Create([FromBody] TechnicianVM model)
        {
            // 1. --- SERVER-SIDE VALIDATION ---
            // Enforce business rules before attempting any database operations.
            if (model == null)
            {
                return BadRequest("Technician data is null.");
            }
            if (string.IsNullOrWhiteSpace(model.FirstName) || string.IsNullOrWhiteSpace(model.LastName))
            {
                return BadRequest("First Name and Last Name are required.");
            }
            if (string.IsNullOrWhiteSpace(model.Email))
            {
                return BadRequest("Email is required.");
            }

            // Check if a user with this email already exists.
            var existingUser = await _userManager.FindByEmailAsync(model.Email);
            if (existingUser != null)
            {
                return Conflict($"A user with the email '{model.Email}' already exists.");
            }

            // 2. --- BEGIN TRANSACTION ---
            // Use a transaction to ensure that either both the user and profile are created, or neither is.
            await using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // 3. --- CREATE ASP.NET IDENTITY USER ---
                var newUser = new ApplicationUser
                {
                    FirstName = model.FirstName,
                    LastName = model.LastName,
                    Email = model.Email,
                    UserName = model.Email, // Often, UserName is initialized to the email.
                    PhoneNumber = model.PhoneNumber,
                    ProfilePicUrl = model.ProfilePictureUrl,
                    IsActive = true, // New users should be active by default.
                };

                // For admin-created users, generate a secure temporary password.
                // The user can be required to change this on first login.
                var tempPassword = $"{Guid.NewGuid()}!A1";
                var identityResult = await _userManager.CreateAsync(newUser, tempPassword);

                if (!identityResult.Succeeded)
                {
                    // If user creation fails, roll back and return the errors.
                    await transaction.RollbackAsync();
                    return BadRequest(identityResult.Errors);
                }

                // Add the new user to the "Technician" role.
                var roleResult = await _userManager.AddToRoleAsync(newUser, "Technician");
                if (!roleResult.Succeeded)
                {
                    await transaction.RollbackAsync();
                    return BadRequest(roleResult.Errors);
                }

                // 4. --- CREATE TECHNICIAN PROFILE ---
                // Now that the user exists and has an ID, create the related profile.
                var newProfile = new TechnicianProfile
                {
                    TechnicianId = newUser.Id, // Link to the newly created user.
                    AvailabilityStatus = model.AvailabilityStatus ?? "Unavailable", // Set a default if null
                    PayRate = model.PayRate,
                    ProfileReadinessPercent = model.ProfileReadinessPercent ?? 0
                };

                _context.TechnicianProfiles.Add(newProfile);
                await _context.SaveChangesAsync();

                // 5. --- COMMIT TRANSACTION AND RETURN RESULT ---
                // If all operations succeed, commit the transaction.
                await transaction.CommitAsync();

                // Fetch the complete record from the view to return to the client.
                // This ensures the response is consistent with GetOne.
                var createdTechnicianVM = await _context.TechnicianViews
                    .AsNoTracking()
                    .Select(ViewModelMappingExtensions.TechnicianViewToVM)
                    .FirstOrDefaultAsync(t => t.UserID == newUser.Id);

                // Return a 201 Created status with a location header and the created object.
                return CreatedAtAction(nameof(GetOne), new { id = newUser.Id }, createdTechnicianVM);
            }
            catch (Exception ex)
            {
                // If any exception occurs, roll back the transaction and log the error.
                await transaction.RollbackAsync();
                _logger.LogError(ex, "An error occurred while creating a new technician.");
                return StatusCode(500, "An internal server error occurred. Please try again later.");
            }
        }

        // In TechnicianController.cs

        // Assumed constructor dependencies:
        // private readonly ApplicationDbContext _context;
        // private readonly ILogger<TechnicianController> _logger;
        // private readonly UserManager<AspNetUser> _userManager;

        /// <summary>
        /// Updates an existing technician by modifying their AspNetUser and TechnicianProfile records.
        /// The entire operation is performed within a transaction.
        /// </summary>
        /// <param name="id">The UserID of the technician to update.</param>
        /// <param name="model">The ViewModel containing the updated data.</param>
        /// <returns>The updated technician object as a ViewModel.</returns>
        [HttpPut("{id}")]
        public async Task<IActionResult> Update(string id, [FromBody] TechnicianVM model)
        {
            // 1. --- SERVER-SIDE VALIDATION ---
            if (model == null)
            {
                return BadRequest("Technician data is null.");
            }

            // Ensure the ID from the route matches the ID in the model, if provided.
            if (model.UserID != null && id != model.UserID)
            {
                return BadRequest("ID mismatch between route and request body.");
            }

            // Begin a transaction to ensure atomicity
            await using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                // 2. --- FETCH EXISTING ENTITIES ---
                // Find the user to update from the AspNetUsers table.
                var userToUpdate = await _userManager.FindByIdAsync(id);
                if (userToUpdate == null)
                {
                    return NotFound($"User with ID {id} not found.");
                }

                // Find the corresponding technician profile.
                var profileToUpdate = await _context.TechnicianProfiles.FirstOrDefaultAsync(p => p.TechnicianId == id);
                if (profileToUpdate == null)
                {
                    // This indicates data inconsistency, which should ideally not happen.
                    return NotFound($"Technician profile for User ID {id} not found.");
                }

                // 3. --- MAP AND APPLY CHANGES ---
                // Apply updates from the ViewModel to the AspNetUser entity.
                // The null-coalescing operator (??) ensures we only update fields that were provided.
                userToUpdate.FirstName = model.FirstName ?? userToUpdate.FirstName;
                userToUpdate.LastName = model.LastName ?? userToUpdate.LastName;
                userToUpdate.Email = model.Email ?? userToUpdate.Email;
                userToUpdate.UserName = model.Email ?? userToUpdate.UserName; // Keep UserName in sync with Email
                userToUpdate.PhoneNumber = model.PhoneNumber ?? userToUpdate.PhoneNumber;
                userToUpdate.ProfilePicUrl = model.ProfilePictureUrl ?? userToUpdate.ProfilePicUrl;
                userToUpdate.IsActive = model.IsActive ?? userToUpdate.IsActive;

                // Use UserManager to persist user changes. This handles security stamps and normalization.
                var identityResult = await _userManager.UpdateAsync(userToUpdate);
                if (!identityResult.Succeeded)
                {
                    await transaction.RollbackAsync();
                    return BadRequest(identityResult.Errors);
                }

                // Apply updates to the TechnicianProfile entity
                profileToUpdate.AvailabilityStatus = model.AvailabilityStatus ?? profileToUpdate.AvailabilityStatus;
                profileToUpdate.PayRate = model.PayRate ?? profileToUpdate.PayRate;
                profileToUpdate.ProfileReadinessPercent = model.ProfileReadinessPercent ?? profileToUpdate.ProfileReadinessPercent;
                profileToUpdate.DateModified = DateTimeOffset.UtcNow; // Explicitly set the modification date

                // EF Core tracks the changes, so we just need to save.
                await _context.SaveChangesAsync();

                // 4. --- COMMIT TRANSACTION AND RETURN RESULT ---
                await transaction.CommitAsync();

                // Fetch the updated record from the view to return the consistent data shape.
                var updatedTechnicianVM = await _context.TechnicianViews
                    .AsNoTracking()
                    .Select(ViewModelMappingExtensions.TechnicianViewToVM)
                    .FirstOrDefaultAsync(t => t.UserID == id);

                return Ok(updatedTechnicianVM);
            }
            catch (Exception ex)
            {
                await transaction.RollbackAsync();
                _logger.LogError(ex, "An error occurred while updating technician with ID {TechnicianId}.", id);
                return StatusCode(500, "An internal server error occurred.");
            }
        }

        /// <summary>
        /// Deletes a technician by performing a "soft delete," which sets their
        /// IsActive flag to false. This preserves the user's record for historical
        /// data while removing them from active use in the application.
        /// </summary>
        /// <param name="id">The UserID of the technician to delete.</param>
        /// <returns>A 204 No Content response on success.</returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(string id)
        {
            // 1. --- VALIDATION AND FETCH ---
            if (string.IsNullOrEmpty(id))
            {
                return BadRequest("User ID cannot be null or empty.");
            }

            // Use a transaction to ensure the operation is atomic, consistent with other CUD methods.
            await using var transaction = await _context.Database.BeginTransactionAsync();

            try
            {
                var userToDelete = await _userManager.FindByIdAsync(id);

                if (userToDelete == null)
                {
                    // If the user doesn't exist, there's nothing to delete.
                    // Returning NotFound is appropriate.
                    return NotFound($"User with ID {id} not found.");
                }

                // 2. --- PERFORM SOFT DELETE ---
                // Check if the user is already inactive to avoid redundant database writes.
                if (!userToDelete.IsActive)
                {
                    // The user is already in the desired state. Commit to close the transaction.
                    await transaction.CommitAsync();
                    return NoContent(); // Operation is successful and idempotent.
                }

                userToDelete.IsActive = false;

                // 3. --- PERSIST CHANGES ---
                // Use the UserManager to update the user. This correctly handles updating
                // the security stamp and other Identity-related fields.
                var identityResult = await _userManager.UpdateAsync(userToDelete);

                if (!identityResult.Succeeded)
                {
                    // If the update fails, roll back the transaction and return the errors.
                    await transaction.RollbackAsync();
                    return BadRequest(identityResult.Errors);
                }

                // 4. --- COMMIT TRANSACTION AND RETURN RESULT ---
                await transaction.CommitAsync();

                // A successful DELETE operation should return 204 No Content.
                return NoContent();
            }
            catch (Exception ex)
            {
                // If an unexpected error occurs, roll back the transaction and log it.
                await transaction.RollbackAsync();
                _logger.LogError(ex, "An error occurred while deleting technician with ID {TechnicianId}.", id);
                return StatusCode(500, "An internal server error occurred.");
            }
        }
    }
}

================
File: xdent-ops-dotnet-backend/DLLz/Cizzle.AI.deps.json
================
{
  "runtimeTarget": {
    "name": ".NETCoreApp,Version=v7.0",
    "signature": ""
  },
  "compilationOptions": {},
  "targets": {
    ".NETCoreApp,Version=v7.0": {
      "Cizzle.AI/1.0.0": {
        "runtime": {
          "Cizzle.AI.dll": {}
        }
      }
    }
  },
  "libraries": {
    "Cizzle.AI/1.0.0": {
      "type": "project",
      "serviceable": false,
      "sha512": ""
    }
  }
}

================
File: xdent-ops-dotnet-backend/Dockerfile
================
#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS base
WORKDIR /app

FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build
WORKDIR /src
COPY ["./XDentOpsAPI.csproj", "XDentOpsAPI/"]
RUN dotnet restore "XDentOpsAPI/XDentOpsAPI.csproj"
WORKDIR "/src/XDentOpsAPI"
COPY . .
# Set an environment variable to indicate a Docker build - !!!Must be set before build
ENV DOCKER_BUILD=true

RUN dotnet build "XDentOpsAPI.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "XDentOpsAPI.csproj" -c Release -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

EXPOSE 80
#EXPOSE 443


ENTRYPOINT ["dotnet", "XDentOpsAPI.dll"]

================
File: xdent-ops-dotnet-backend/Gen/AppVersion.tsx
================
// AppVersion.tsx - AUTO-GENERATED: DO NOT EDIT

import React from 'react';
import { Typography } from '@mui/material';
import { styled } from '@mui/system';

const VersionTypography = styled(Typography)(({ theme }) => ({
  fontWeight: 700,
  color: theme.palette.text.secondary,
  fontSize: '0.8rem', // adjust size here
  opacity: 0.6, // adjust transparency here
  padding: theme.spacing(1),
  borderRadius: theme.shape.borderRadius,
  backgroundColor: theme.palette.background.default,
  marginLeft: 'auto',
}));

const AppVersion: React.FC = () => {
  return (
    <VersionTypography>
      v2025.07.03.164757
    </VersionTypography>
  );
};

export default AppVersion;

================
File: xdent-ops-dotnet-backend/Gen/AppVersion.tt
================
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".tsx"  outputPath="\git\react-cizzle\react-cizzle-ui-vite\src\components\AppVersion.tsx" #>
// AppVersion.tsx - AUTO-GENERATED: DO NOT EDIT

import React from 'react';
import { Typography } from '@mui/material';
import { styled } from '@mui/system';

const VersionTypography = styled(Typography)(({ theme }) => ({
  fontWeight: 700,
  color: theme.palette.text.secondary,
  fontSize: '0.8rem', // adjust size here
  opacity: 0.6, // adjust transparency here
  padding: theme.spacing(1),
  borderRadius: theme.shape.borderRadius,
  backgroundColor: theme.palette.background.default,
  marginLeft: 'auto',
}));

const AppVersion: React.FC = () => {
  return (
    <VersionTypography>
      v<#= DateTime.Now.ToString("yyyy.MM.dd.HHmmss") #>
    </VersionTypography>
  );
};

export default AppVersion;

================
File: xdent-ops-dotnet-backend/Gen/Common.Constants.template.txt
================
//DO NOT EDIT: Autogenerated from: C:\Users\kcabr\OneDrive\Code\LINQPad\LINQPad Queries\CEHR\AutoGen - Common.linq

namespace XDentOpsAPI.Common
{
    public static class RoleName
    {
{ROLES}
    }
}

================
File: xdent-ops-dotnet-backend/Gen/CommonJS.template.txt
================
// src/helpers/common.js

export const Roles = {
{ROLES}
};

================
File: xdent-ops-dotnet-backend/Gen/CS.API.Controller.template.txt
================
using System.Data;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using XDentOpsAPI.Models.Data;
//using AutoMapper;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using XDentOpsAPI.Models.VM;
using XDentOpsAPI.Common;

[ApiController]
[Route("[controller]")]
[Authorize]
public class {TABLE}Controller : ControllerBase
{
    private readonly IConfiguration _configuration;
    private readonly ILogger<{TABLE}Controller> _logger;
    private readonly ApplicationDbContext _context;
    //private readonly IMapper _mapper;

    public {TABLE}Controller
    (
            IConfiguration configuration, 
            ILogger<{TABLE}Controller> logger, 
            ApplicationDbContext context
    )
    {
        _configuration = configuration;
        _logger = logger;
        _context = context;        
    }
    
    #region CRUD
    [HttpGet("get-all-{TABLE_LC}s")]
    //[Authorize(Roles = RoleName.SuperAdmin)] 
    public async Task<IActionResult> GetAll{TABLE}s()
    {
        var {TABLE_LC}s = await _context.{TABLE}s
                                    //.OrderByDescending(o => o.LastName)
                                    //.ThenBy(o => o.FirstName)
                                    .ToListAsync();

        return Ok(new { {TABLE_LC}s = {TABLE_LC}s.ToDtos() });
    }

    [HttpGet("get-by-id/{{FIRST_FIELD_LC}}")]
    public async Task<ActionResult<{TABLE}DTO>> Get{TABLE}ById(string {FIRST_FIELD_LC})
    {
        var item = await _context.{TABLE}s.FindAsync({FIRST_FIELD_LC});
        if (item == null)
        {
            return NotFound();
        }

        return item.ToDto();
    }

    // Add a new role
    [HttpPost("crud")]
    //[Authorize(Roles = RoleName.SuperAdmin)]
    public async Task<ActionResult<{TABLE}DTO>> AddNew{TABLE}({TABLE}DTO dto)
    {
        dto.{FIRST_FIELD} = Guid.NewGuid();

        var item = new {TABLE}();

{FIELD_ASSIGN}

        item.UserAddedId = User.Identity.Name;
        item.DateAdded = DateTime.UtcNow;

        _context.{TABLE}s.Add(item);
        await _context.SaveChangesAsync();
        
        return CreatedAtAction(nameof(Get{TABLE}ById), new { {FIRST_FIELD_LC} = item.{FIRST_FIELD} }, dto);        

        //return BadRequest(result.Errors);
    }

    // Update an existing role
    [HttpPut("crud/{{FIRST_FIELD_LC}}")]
    //[Authorize(Roles = RoleName.SuperAdmin)]
    public async Task<IActionResult> Update{TABLE}(Guid? {FIRST_FIELD_LC}, {TABLE}DTO dto)
    {
        if ({FIRST_FIELD_LC} != dto.{FIRST_FIELD})
        {
            return BadRequest();
        }   
            
        var item = await _context.{TABLE}s.FindAsync({FIRST_FIELD_LC});
        if (item == null)
        {   
            return NotFound();
        }
        
{FIELD_ASSIGN}

        item.UserModifiedId = User?.Identity?.Name;
        item.DateModified = DateTime.UtcNow;

        _context.{TABLE}s.Update(item);
        await _context.SaveChangesAsync();

        //if (result.Succeeded)
        // {
        return NoContent();
        //}

        //return BadRequest(result.Errors);
    }

    // Delete a role
    [HttpDelete("crud/{{FIRST_FIELD_LC}}")]
    //[Authorize(Roles = RoleName.SuperAdmin)]
    public async Task<IActionResult> Delete{TABLE}(string {FIRST_FIELD_LC})
    {
        var item = await _context.{TABLE}s.FindAsync({FIRST_FIELD_LC});
        if (item == null)
        {
            return NotFound();
        }

        var result = _context.{TABLE}s.Remove(item);
        await _context.SaveChangesAsync();

        //if (result.Succeeded)
        //{
        //    _logger.LogInformation("{TABLE}Deleted - {FIRST_FIELD}: {{FIRST_FIELD}}", item.{FIRST_FIELD});
            return NoContent();
        //}

        //return BadRequest(result.Errors);
    }
}

    #endregion

================
File: xdent-ops-dotnet-backend/Gen/JSX.Grid.Component.template.txt
================
import { useState, useEffect } from 'react';
import { DataTable } from 'mantine-datatable';
import { Group, ActionIcon, Loader } from '@mantine/core';
import AddEdit{TABLE}Modal from './AddEdit{TABLE}Modal'; 
import { fetchWrapper } from '../../../helpers';
import { IconEye, IconPlus, IconTrash } from '@tabler/icons-react';
import { IconEdit } from '@tabler/icons-react';

const {TABLE}Grid = () => {
  const [rowData, setRowData] = useState([]);
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [existingItem, setExistingItem] = useState(null);
  const [isEditMode, setIsEditMode] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const openModal = () => {
    setModalIsOpen(true);
  };

  const closeModal = () => {
    setModalIsOpen(false);
  };

  const handleNewClick = () => {
    setExistingItem(null);
    setIsEditMode(false);
    openModal();
  };

  const handleEditClick = (item) => {
    setExistingItem(item);
    setIsEditMode(true);
    openModal();
  };

  const handleDeleteClick = async (id) => {
    await fetchWrapper.delete(`/{TABLE_LC}/crud/${id}`);
    await getAll();
  };

  // Fetch users using axios
  // const fetchUsersAxios = async () => {
  //   try {
  //     const response = await axios.get('http://localhost:5000/api/users');
  //     setRowData(response.data);
  //   } catch (error) {
  //     console.error('Error fetching users:', error);
  //   }
  // };

  // Fetch users using fetch
  const getAll = async () => {
    try {
      setIsLoading(true); 
      
      const response = await fetchWrapper.get('/client/get-all-{TABLE_LC}s');
      const data = response.{TABLE_LC}s;

      setRowData(data);

      console.log(data);
    } catch (error) {
      console.error('Error fetching {TABLE_LC}s:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleAddOrEdit = async (newOrExisting) => {    
    //Upsert of new {TABLE_LC}
    if(!newOrExisting.{FIRST_FIELD_LC}) {
      await fetchWrapper.post(`/{TABLE_LC}/crud`, newOrExisting);
    } else {
      await fetchWrapper.put(`/{TABLE_LC}/crud/${newOrExisting.{FIRST_FIELD_LC}}`, newOrExisting);
    }    

    // Then, update the {TABLE_LC} list by calling getAll()
    getAll();
  };

  const [columnDefs] = useState([
    //{ accessor: '{FIRST_FIELD_LC}' },
    {
      accessor: 'actions',
      title: 
      <Group spacing={4} position="center" noWrap>
        <ActionIcon color="blue" onClick={() => handleNewClick()}>
          <IconPlus size={16} />
        </ActionIcon>      
      </Group>
      ,
      textAlignment: 'center',
      width: '100px',
      render: (item) => (
        <Group spacing={4} position="center" noWrap>
          {/* <ActionIcon color="green" onClick={() => showInfo(company)}>
            <IconEye size={16} />
          </ActionIcon> */}
          <ActionIcon color="blue" onClick={() => handleEditClick(item)}>
            <IconEdit size={16} />
          </ActionIcon>          
          {item.userCount === 0 ? 
            (
              <ActionIcon color="red" onClick={() => handleDeleteClick(item.{FIRST_FIELD_LC})}>
                <IconTrash size={16} />
              </ActionIcon>
            ) 
            : 
            null
          }
        </Group>
      ),
    },
    {ACCESSORS}
  ]);

  useEffect(() => {
    getAll();
  }, []);

  return (
    <>
    {isLoading ? (
        <Loader />
      ) : 
      (
        <DataTable
          withBorder
          borderRadius="sm"
          withColumnBorders
          striped
          highlightOnHover
          columns={columnDefs}
          // execute this callback when a row is clicked
          //onRowClick={({ name, party, bornIn }) => alert(`You clicked on ${name}, a ${party.toLowerCase()} president born in ${bornIn}.`)
          records={rowData}
          rowContextMenu={{
            items: (record) =>
            [
              {
                key: 'edit',
                onClick: () => handleEditClick(record),
              },
              ...(
                record.userCount > 0
                ? [
                  {
                    key: 'delete',
                    color: 'red',
                    title: `Delete {TABLE_LC} ${record.DisplayName}`,
                    onClick: () => handleDeleteClick(record.{FIRST_FIELD_LC}),
                  }
                ]
                : []
              ),
            ],
          }}
        />       
    ) }

      <AddEdit{TABLE}Modal isEditMode={isEditMode} onSubmit={handleAddOrEdit} existingItem={existing{TABLE}} isOpen={modalIsOpen} onClose={closeModal} />
    </>
  );
};

export default {TABLE}Grid;

================
File: xdent-ops-dotnet-backend/Gen/JSX.Grid2.Component.template.txt
================
using System.Data;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using XDentOpsAPI.Models.Data;
//using AutoMapper;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using XDentOpsAPI.Models.VM;
using XDentOpsAPI.Common;

[ApiController]
[Route("[controller]")]
[Authorize]
public class ClientController : ControllerBase
{
    private readonly IConfiguration _configuration;
    private readonly ILogger<ClientController> _logger;
    private readonly ApplicationDbContext _context;
    //private readonly IMapper _mapper;

    public ClientController
    (
            IConfiguration configuration, 
            ILogger<ClientController> logger, 
            ApplicationDbContext context
    )
    {
        _configuration = configuration;
        _logger = logger;
        _context = context;        
    }
    
    #region CRUD
    [HttpGet("get-all-clients")]
    //[Authorize(Roles = RoleName.SuperAdmin)] 
    public async Task<IActionResult> GetAllClients()
    {
        var clients = await _context.Clients
                                    .OrderByDescending(o => o.LastName)
                                    .ThenBy(o => o.FirstName)
                                    .ToListAsync();

        return Ok(new { clients = clients.ToDtos() });
    }

    [HttpGet("get-by-id/{clientID}")]
    public async Task<ActionResult<ClientDTO>> GetRoleById(string clientID)
    {
        var item = await _context.Clients.FindAsync(clientID);
        if (item == null)
        {
            return NotFound();
        }

        return item.ToDto();
    }

    // Add a new role
    [HttpPost("crud")]
    //[Authorize(Roles = RoleName.SuperAdmin)]
    public async Task<ActionResult<ClientDTO>> AddNewRole(ClientDTO clientDTO)
    {
        clientDTO.ClientID = Guid.NewGuid();

        var item = new Client();

        /* {FIELD_ASSIGN} */

        item.UserAddedId = User.Identity.Name;
        item.DateAdded = DateTime.UtcNow;

        _context.Clients.Add(item);
        await _context.SaveChangesAsync();
        
        return CreatedAtAction(nameof(GetRoleById), new { clientID = item.ClientID }, clientDTO);        

        //return BadRequest(result.Errors);
    }

    // Update an existing role
    [HttpPut("crud/{clientID}")]
    //[Authorize(Roles = RoleName.SuperAdmin)]
    public async Task<IActionResult> UpdateRole(Guid? clientID, ClientDTO dto)
    {
        if (clientID != dto.ClientID)
        {
            return BadRequest();
        }   
            
        var item = await _context.Clients.FindAsync(clientID);
        if (item == null)
        {   
            return NotFound();
        }
        
        /* {FIELD_ASSIGN} */

        item.UserModifiedId = User?.Identity?.Name;
        item.DateModified = DateTime.UtcNow;

        _context.Clients.Update(item);
        await _context.SaveChangesAsync();

        //if (result.Succeeded)
        // {
        return NoContent();
        //}

        //return BadRequest(result.Errors);
    }

    // Delete a role
    [HttpDelete("crud/{clientID}")]
    //[Authorize(Roles = RoleName.SuperAdmin)]
    public async Task<IActionResult> DeleteRole(string clientID)
    {
        var item = await _context.Clients.FindAsync(clientID);
        if (item == null)
        {
            return NotFound();
        }

        var result = _context.Clients.Remove(item);
        await _context.SaveChangesAsync();

        //if (result.Succeeded)
        //{
        //    _logger.LogInformation("ClientDeleted - ClientID: {ClientID}", item.ClientID);
            return NoContent();
        //}

        //return BadRequest(result.Errors);
    }
}

    #endregion

================
File: xdent-ops-dotnet-backend/Middleware/DebugMiddleware.cs
================
using Microsoft.AspNetCore.Http;
using System.Threading.Tasks;

namespace XDentOpsAPI.Middleware;

public class DebugMiddleware
{
    private readonly RequestDelegate _next;

    public DebugMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        // Set a breakpoint on the next line to catch the incoming HTTP request
        // before it's routed to the controller.
        await _next(context);
    }
}

================
File: xdent-ops-dotnet-backend/Migrations/20230430053025_ExtendUserAndRoles.cs
================
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace XDentOpsAPI.Migrations
{
    /// <inheritdoc />
    public partial class ExtendUserAndRoles : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AppSettings",
                columns: table => new
                {
                    AppSettingId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Key = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateAdded = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UserAddedId = table.Column<string>(type: "nvarchar(450)", maxLength: 450, nullable: false),
                    DateModified = table.Column<DateTime>(type: "datetime2", nullable: true),
                    UserModifiedId = table.Column<string>(type: "nvarchar(450)", maxLength: 450, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AppSettings", x => x.AppSettingId);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FirstName = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    Suffix = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    DateLastLogin = table.Column<DateTime>(type: "datetime2", nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AppSettings_Key",
                table: "AppSettings",
                column: "Key",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AppSettings");

            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "AspNetUsers");
        }
    }
}

================
File: xdent-ops-dotnet-backend/Migrations/20230430053025_ExtendUserAndRoles.Designer.cs
================
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XDentOpsAPI.Models.Data;

#nullable disable

namespace XDentOpsAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230430053025_ExtendUserAndRoles")]
    partial class ExtendUserAndRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("XDentOpsAPI.Models.AppSetting", b =>
                {
                    b.Property<int>("AppSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppSettingId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserAddedId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserModifiedId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppSettingId");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("XDentOpsAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateLastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("XDentOpsAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("XDentOpsAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XDentOpsAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("XDentOpsAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

================
File: xdent-ops-dotnet-backend/Migrations/ApplicationDbContextModelSnapshot.cs
================
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XDentOpsAPI.Models.Data;

#nullable disable

namespace XDentOpsAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("XDentOpsAPI.Models.AppSetting", b =>
                {
                    b.Property<int>("AppSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppSettingId"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserAddedId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserModifiedId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppSettingId");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("XDentOpsAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateLastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("XDentOpsAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("XDentOpsAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XDentOpsAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("XDentOpsAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/ApplicationDbContext.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace XDentOpsAPI.Models.Data
{

    public partial class ApplicationDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, string>
    {

        public ApplicationDbContext() :
            base()
        {
            OnCreated();
        }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<AppSetting> AppSettings
        {
            get;
            set;
        }

        public virtual DbSet<AspNetRole> AspNetRoles
        {
            get;
            set;
        }

        public virtual DbSet<AspNetUser> AspNetUsers
        {
            get;
            set;
        }

        public virtual DbSet<Document> Documents
        {
            get;
            set;
        }

        public virtual DbSet<DocumentState> DocumentStates
        {
            get;
            set;
        }

        public virtual DbSet<DocumentStateHistory> DocumentStateHistories
        {
            get;
            set;
        }

        public virtual DbSet<DocumentType> DocumentTypes
        {
            get;
            set;
        }

        public virtual DbSet<ManagerTechnicianAssignment> ManagerTechnicianAssignments
        {
            get;
            set;
        }

        public virtual DbSet<Module> Modules
        {
            get;
            set;
        }

        public virtual DbSet<Notification> Notifications
        {
            get;
            set;
        }

        public virtual DbSet<PaymentLog> PaymentLogs
        {
            get;
            set;
        }

        public virtual DbSet<ProfileNote> ProfileNotes
        {
            get;
            set;
        }

        public virtual DbSet<TechnicianProfile> TechnicianProfiles
        {
            get;
            set;
        }

        public virtual DbSet<UserAgreement> UserAgreements
        {
            get;
            set;
        }

        public virtual DbSet<W9Data> W9Datas
        {
            get;
            set;
        }

        public virtual DbSet<DocumentView> DocumentViews
        {
            get;
            set;
        }

        public virtual DbSet<NotificationView> NotificationViews
        {
            get;
            set;
        }

        public virtual DbSet<PaymentLogView> PaymentLogViews
        {
            get;
            set;
        }

        public virtual DbSet<ProfileNoteView> ProfileNoteViews
        {
            get;
            set;
        }

        public virtual DbSet<RoleAllowedModule> RoleAllowedModules
        {
            get;
            set;
        }

        public virtual DbSet<RolesView> RolesViews
        {
            get;
            set;
        }

        public virtual DbSet<TechnicianRosterView> TechnicianRosterViews
        {
            get;
            set;
        }

        public virtual DbSet<TechnicianView> TechnicianViews
        {
            get;
            set;
        }

        public virtual DbSet<UserAgreementView> UserAgreementViews
        {
            get;
            set;
        }

        public virtual DbSet<UserAllowedModule> UserAllowedModules
        {
            get;
            set;
        }

        public virtual DbSet<UserView> UserViews
        {
            get;
            set;
        }

        public virtual DbSet<W9DataView> W9DataViews
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.AppSettingMapping(modelBuilder);
            this.CustomizeAppSettingMapping(modelBuilder);

            this.AspNetRoleMapping(modelBuilder);
            this.CustomizeAspNetRoleMapping(modelBuilder);

            this.AspNetUserMapping(modelBuilder);
            this.CustomizeAspNetUserMapping(modelBuilder);

            this.DocumentMapping(modelBuilder);
            this.CustomizeDocumentMapping(modelBuilder);

            this.DocumentStateMapping(modelBuilder);
            this.CustomizeDocumentStateMapping(modelBuilder);

            this.DocumentStateHistoryMapping(modelBuilder);
            this.CustomizeDocumentStateHistoryMapping(modelBuilder);

            this.DocumentTypeMapping(modelBuilder);
            this.CustomizeDocumentTypeMapping(modelBuilder);

            this.ManagerTechnicianAssignmentMapping(modelBuilder);
            this.CustomizeManagerTechnicianAssignmentMapping(modelBuilder);

            this.ModuleMapping(modelBuilder);
            this.CustomizeModuleMapping(modelBuilder);

            this.NotificationMapping(modelBuilder);
            this.CustomizeNotificationMapping(modelBuilder);

            this.PaymentLogMapping(modelBuilder);
            this.CustomizePaymentLogMapping(modelBuilder);

            this.ProfileNoteMapping(modelBuilder);
            this.CustomizeProfileNoteMapping(modelBuilder);

            this.TechnicianProfileMapping(modelBuilder);
            this.CustomizeTechnicianProfileMapping(modelBuilder);

            this.UserAgreementMapping(modelBuilder);
            this.CustomizeUserAgreementMapping(modelBuilder);

            this.W9DataMapping(modelBuilder);
            this.CustomizeW9DataMapping(modelBuilder);

            this.DocumentViewMapping(modelBuilder);
            this.CustomizeDocumentViewMapping(modelBuilder);

            this.NotificationViewMapping(modelBuilder);
            this.CustomizeNotificationViewMapping(modelBuilder);

            this.PaymentLogViewMapping(modelBuilder);
            this.CustomizePaymentLogViewMapping(modelBuilder);

            this.ProfileNoteViewMapping(modelBuilder);
            this.CustomizeProfileNoteViewMapping(modelBuilder);

            this.RoleAllowedModuleMapping(modelBuilder);
            this.CustomizeRoleAllowedModuleMapping(modelBuilder);

            this.RolesViewMapping(modelBuilder);
            this.CustomizeRolesViewMapping(modelBuilder);

            this.TechnicianRosterViewMapping(modelBuilder);
            this.CustomizeTechnicianRosterViewMapping(modelBuilder);

            this.TechnicianViewMapping(modelBuilder);
            this.CustomizeTechnicianViewMapping(modelBuilder);

            this.UserAgreementViewMapping(modelBuilder);
            this.CustomizeUserAgreementViewMapping(modelBuilder);

            this.UserAllowedModuleMapping(modelBuilder);
            this.CustomizeUserAllowedModuleMapping(modelBuilder);

            this.UserViewMapping(modelBuilder);
            this.CustomizeUserViewMapping(modelBuilder);

            this.W9DataViewMapping(modelBuilder);
            this.CustomizeW9DataViewMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region AppSetting Mapping

        private void AppSettingMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AppSetting>().ToTable(@"AppSettings", @"dbo");
            modelBuilder.Entity<AppSetting>().Property(x => x.AppSettingId).HasColumnName(@"AppSettingId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<AppSetting>().Property(x => x.Key).HasColumnName(@"Key").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<AppSetting>().Property(x => x.Value).HasColumnName(@"Value").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AppSetting>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetime2").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AppSetting>().Property(x => x.UserAddedId).HasColumnName(@"UserAddedId").HasColumnType(@"nvarchar(450)").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AppSetting>().Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<AppSetting>().Property(x => x.UserModifiedId).HasColumnName(@"UserModifiedId").HasColumnType(@"nvarchar(450)").ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<AppSetting>().HasKey(@"AppSettingId");
            modelBuilder.Entity<AppSetting>().HasIndex(@"Key").IsUnique(true);
        }

        partial void CustomizeAppSettingMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetRole Mapping

        private void AspNetRoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRole>().ToTable(@"AspNetRoles", @"dbo");
            modelBuilder.Entity<AspNetRole>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<AspNetRole>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<AspNetRole>().Property(x => x.NormalizedName).HasColumnName(@"NormalizedName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<AspNetRole>().Property(x => x.ConcurrencyStamp).HasColumnName(@"ConcurrencyStamp").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<AspNetRole>().Property(x => x.Description).HasColumnName(@"Description").HasColumnType(@"nvarchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<AspNetRole>().HasKey(@"Id");
        }

        partial void CustomizeAspNetRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region AspNetUser Mapping

        private void AspNetUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetUser>().ToTable(@"AspNetUsers", @"dbo");
            modelBuilder.Entity<AspNetUser>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<AspNetUser>().Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<AspNetUser>().Property(x => x.NormalizedUserName).HasColumnName(@"NormalizedUserName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<AspNetUser>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<AspNetUser>().Property(x => x.NormalizedEmail).HasColumnName(@"NormalizedEmail").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<AspNetUser>().Property(x => x.EmailConfirmed).HasColumnName(@"EmailConfirmed").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.ConcurrencyStamp).HasColumnName(@"ConcurrencyStamp").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.PhoneNumberConfirmed).HasColumnName(@"PhoneNumberConfirmed").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.TwoFactorEnabled).HasColumnName(@"TwoFactorEnabled").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.LockoutEnd).HasColumnName(@"LockoutEnd").HasColumnType(@"datetimeoffset").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.LockoutEnabled).HasColumnName(@"LockoutEnabled").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<AspNetUser>().Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<AspNetUser>().Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<AspNetUser>().Property(x => x.Suffix).HasColumnName(@"Suffix").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<AspNetUser>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.DateLastLogin).HasColumnName(@"DateLastLogin").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<AspNetUser>().Property(x => x.Email2).HasColumnName(@"Email2").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<AspNetUser>().Property(x => x.Phone2).HasColumnName(@"Phone2").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<AspNetUser>().Property(x => x.PreferredName).HasColumnName(@"PreferredName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<AspNetUser>().Property(x => x.Creds).HasColumnName(@"Creds").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<AspNetUser>().Property(x => x.ProfilePicUrl).HasColumnName(@"ProfilePicUrl").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<AspNetUser>().HasKey(@"Id");
        }

        partial void CustomizeAspNetUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region Document Mapping

        private void DocumentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Document>().ToTable(@"Document", @"dbo");
            modelBuilder.Entity<Document>().Property(x => x.DocumentId).HasColumnName(@"DocumentId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"newid()");
            modelBuilder.Entity<Document>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<Document>().Property(x => x.DocumentTypeId).HasColumnName(@"DocumentTypeId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Document>().Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Document>().Property(x => x.StoragePath).HasColumnName(@"StoragePath").HasColumnType(@"nvarchar(2083)").IsRequired().ValueGeneratedNever().HasMaxLength(2083);
            modelBuilder.Entity<Document>().Property(x => x.MimeType).HasColumnName(@"MimeType").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Document>().Property(x => x.ExpirationDate).HasColumnName(@"ExpirationDate").HasColumnType(@"datetimeoffset").ValueGeneratedNever();
            modelBuilder.Entity<Document>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Document>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<Document>().Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<Document>().HasKey(@"DocumentId");
        }

        partial void CustomizeDocumentMapping(ModelBuilder modelBuilder);

        #endregion

        #region DocumentState Mapping

        private void DocumentStateMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocumentState>().ToTable(@"DocumentState", @"dbo");
            modelBuilder.Entity<DocumentState>().Property(x => x.DocumentStateId).HasColumnName(@"DocumentStateId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"newid()");
            modelBuilder.Entity<DocumentState>().Property(x => x.StateName).HasColumnName(@"StateName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<DocumentState>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<DocumentState>().HasKey(@"DocumentStateId");
            modelBuilder.Entity<DocumentState>().HasIndex(@"StateName").IsUnique(true);
        }

        partial void CustomizeDocumentStateMapping(ModelBuilder modelBuilder);

        #endregion

        #region DocumentStateHistory Mapping

        private void DocumentStateHistoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocumentStateHistory>().ToTable(@"DocumentStateHistory", @"dbo");
            modelBuilder.Entity<DocumentStateHistory>().Property(x => x.DocumentStateHistoryId).HasColumnName(@"DocumentStateHistoryId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"newid()");
            modelBuilder.Entity<DocumentStateHistory>().Property(x => x.DocumentId).HasColumnName(@"DocumentId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DocumentStateHistory>().Property(x => x.DocumentStateId).HasColumnName(@"DocumentStateId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DocumentStateHistory>().Property(x => x.ActorUserId).HasColumnName(@"ActorUserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<DocumentStateHistory>().Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<DocumentStateHistory>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<DocumentStateHistory>().HasKey(@"DocumentStateHistoryId");
        }

        partial void CustomizeDocumentStateHistoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region DocumentType Mapping

        private void DocumentTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocumentType>().ToTable(@"DocumentType", @"dbo");
            modelBuilder.Entity<DocumentType>().Property(x => x.DocumentTypeId).HasColumnName(@"DocumentTypeId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"newid()");
            modelBuilder.Entity<DocumentType>().Property(x => x.TypeName).HasColumnName(@"TypeName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<DocumentType>().Property(x => x.IsComplianceRequired).HasColumnName(@"IsComplianceRequired").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<DocumentType>().HasKey(@"DocumentTypeId");
            modelBuilder.Entity<DocumentType>().HasIndex(@"TypeName").IsUnique(true);
        }

        partial void CustomizeDocumentTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region ManagerTechnicianAssignment Mapping

        private void ManagerTechnicianAssignmentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ManagerTechnicianAssignment>().ToTable(@"ManagerTechnicianAssignment", @"dbo");
            modelBuilder.Entity<ManagerTechnicianAssignment>().Property(x => x.ManagerUserId).HasColumnName(@"ManagerUserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ManagerTechnicianAssignment>().Property(x => x.TechnicianUserId).HasColumnName(@"TechnicianUserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ManagerTechnicianAssignment>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<ManagerTechnicianAssignment>().HasKey(@"ManagerUserId", @"TechnicianUserId");
        }

        partial void CustomizeManagerTechnicianAssignmentMapping(ModelBuilder modelBuilder);

        #endregion

        #region Module Mapping

        private void ModuleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Module>().ToTable(@"Module", @"dbo");
            modelBuilder.Entity<Module>().Property(x => x.ModuleId).HasColumnName(@"ModuleId").HasColumnType(@"nvarchar(4)").IsRequired().ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<Module>().Property(x => x.ModuleName).HasColumnName(@"ModuleName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Module>().HasKey(@"ModuleId");
        }

        partial void CustomizeModuleMapping(ModelBuilder modelBuilder);

        #endregion

        #region Notification Mapping

        private void NotificationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Notification>().ToTable(@"Notification", @"dbo");
            modelBuilder.Entity<Notification>().Property(x => x.NotificationId).HasColumnName(@"NotificationId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"newid()");
            modelBuilder.Entity<Notification>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<Notification>().Property(x => x.Channel).HasColumnName(@"Channel").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Notification>().Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<Notification>().Property(x => x.Message).HasColumnName(@"Message").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Notification>().Property(x => x.IsRead).HasColumnName(@"IsRead").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Notification>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Notification>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<Notification>().HasKey(@"NotificationId");
        }

        partial void CustomizeNotificationMapping(ModelBuilder modelBuilder);

        #endregion

        #region PaymentLog Mapping

        private void PaymentLogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PaymentLog>().ToTable(@"PaymentLog", @"dbo");
            modelBuilder.Entity<PaymentLog>().Property(x => x.PaymentLogId).HasColumnName(@"PaymentLogId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"newid()");
            modelBuilder.Entity<PaymentLog>().Property(x => x.TechnicianUserId).HasColumnName(@"TechnicianUserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<PaymentLog>().Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType(@"decimal(18,2)").IsRequired().ValueGeneratedNever().HasPrecision(18, 2);
            modelBuilder.Entity<PaymentLog>().Property(x => x.PaymentDate).HasColumnName(@"PaymentDate").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PaymentLog>().Property(x => x.JobId).HasColumnName(@"JobId").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<PaymentLog>().Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<PaymentLog>().Property(x => x.RecordedByUserId).HasColumnName(@"RecordedByUserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<PaymentLog>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<PaymentLog>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<PaymentLog>().HasKey(@"PaymentLogId");
        }

        partial void CustomizePaymentLogMapping(ModelBuilder modelBuilder);

        #endregion

        #region ProfileNote Mapping

        private void ProfileNoteMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ProfileNote>().ToTable(@"ProfileNote", @"dbo");
            modelBuilder.Entity<ProfileNote>().Property(x => x.NoteId).HasColumnName(@"NoteId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"newid()");
            modelBuilder.Entity<ProfileNote>().Property(x => x.TechnicianUserId).HasColumnName(@"TechnicianUserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ProfileNote>().Property(x => x.AuthorUserId).HasColumnName(@"AuthorUserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ProfileNote>().Property(x => x.NoteText).HasColumnName(@"NoteText").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ProfileNote>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<ProfileNote>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<ProfileNote>().HasKey(@"NoteId");
        }

        partial void CustomizeProfileNoteMapping(ModelBuilder modelBuilder);

        #endregion

        #region TechnicianProfile Mapping

        private void TechnicianProfileMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TechnicianProfile>().ToTable(@"TechnicianProfile", @"dbo");
            modelBuilder.Entity<TechnicianProfile>().Property(x => x.TechnicianId).HasColumnName(@"TechnicianId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<TechnicianProfile>().Property(x => x.AvailabilityStatus).HasColumnName(@"AvailabilityStatus").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'Unavailable'");
            modelBuilder.Entity<TechnicianProfile>().Property(x => x.PayRate).HasColumnName(@"PayRate").HasColumnType(@"decimal(18,2)").ValueGeneratedNever().HasPrecision(18, 2);
            modelBuilder.Entity<TechnicianProfile>().Property(x => x.ProfileReadinessPercent).HasColumnName(@"ProfileReadinessPercent").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TechnicianProfile>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<TechnicianProfile>().Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<TechnicianProfile>().HasKey(@"TechnicianId");
        }

        partial void CustomizeTechnicianProfileMapping(ModelBuilder modelBuilder);

        #endregion

        #region UserAgreement Mapping

        private void UserAgreementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserAgreement>().ToTable(@"UserAgreement", @"dbo");
            modelBuilder.Entity<UserAgreement>().Property(x => x.UserAgreementId).HasColumnName(@"UserAgreementId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"newid()");
            modelBuilder.Entity<UserAgreement>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<UserAgreement>().Property(x => x.AgreementName).HasColumnName(@"AgreementName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<UserAgreement>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<UserAgreement>().HasKey(@"UserAgreementId");
        }

        partial void CustomizeUserAgreementMapping(ModelBuilder modelBuilder);

        #endregion

        #region W9Data Mapping

        private void W9DataMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<W9Data>().ToTable(@"W9Data", @"dbo");
            modelBuilder.Entity<W9Data>().Property(x => x.W9DataId).HasColumnName(@"W9DataId").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"newid()");
            modelBuilder.Entity<W9Data>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<W9Data>().Property(x => x.TaxYear).HasColumnName(@"TaxYear").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<W9Data>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<W9Data>().Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<W9Data>().Property(x => x.BusinessName).HasColumnName(@"BusinessName").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<W9Data>().Property(x => x.TaxClassification).HasColumnName(@"TaxClassification").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<W9Data>().Property(x => x.AddressStreet).HasColumnName(@"AddressStreet").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<W9Data>().Property(x => x.AddressCityStateZip).HasColumnName(@"AddressCityStateZip").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<W9Data>().Property(x => x.TaxIDNumberEncrypted).HasColumnName(@"TaxIDNumber_Encrypted").HasColumnType(@"varbinary(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<W9Data>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<W9Data>().Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"getutcdate()");
            modelBuilder.Entity<W9Data>().HasKey(@"W9DataId");
        }

        partial void CustomizeW9DataMapping(ModelBuilder modelBuilder);

        #endregion

        #region DocumentView Mapping

        private void DocumentViewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocumentView>().HasNoKey();
            modelBuilder.Entity<DocumentView>().ToView(@"DocumentView", @"dbo");
            modelBuilder.Entity<DocumentView>().Property(x => x.DocumentID).HasColumnName(@"DocumentID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DocumentView>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DocumentView>().Property(x => x.UserFullName).HasColumnName(@"UserFullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<DocumentView>().Property(x => x.DocumentTypeID).HasColumnName(@"DocumentTypeID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DocumentView>().Property(x => x.DocumentTypeName).HasColumnName(@"DocumentTypeName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<DocumentView>().Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<DocumentView>().Property(x => x.StoragePath).HasColumnName(@"StoragePath").HasColumnType(@"nvarchar(2083)").IsRequired().ValueGeneratedNever().HasMaxLength(2083);
            modelBuilder.Entity<DocumentView>().Property(x => x.MimeType).HasColumnName(@"MimeType").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<DocumentView>().Property(x => x.ExpirationDate).HasColumnName(@"ExpirationDate").HasColumnType(@"datetimeoffset").ValueGeneratedNever();
            modelBuilder.Entity<DocumentView>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DocumentView>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DocumentView>().Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DocumentView>().Property(x => x.CurrentStateName).HasColumnName(@"CurrentStateName").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<DocumentView>().Property(x => x.CurrentStateDateAdded).HasColumnName(@"CurrentStateDateAdded").HasColumnType(@"datetimeoffset").ValueGeneratedNever();
            modelBuilder.Entity<DocumentView>().Property(x => x.CurrentStateActorFullName).HasColumnName(@"CurrentStateActorFullName").HasColumnType(@"nvarchar(511)").ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<DocumentView>().Property(x => x.CurrentStateNotes).HasColumnName(@"CurrentStateNotes").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
        }

        partial void CustomizeDocumentViewMapping(ModelBuilder modelBuilder);

        #endregion

        #region NotificationView Mapping

        private void NotificationViewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<NotificationView>().HasNoKey();
            modelBuilder.Entity<NotificationView>().ToView(@"NotificationView", @"dbo");
            modelBuilder.Entity<NotificationView>().Property(x => x.NotificationID).HasColumnName(@"NotificationID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<NotificationView>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<NotificationView>().Property(x => x.UserFullName).HasColumnName(@"UserFullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<NotificationView>().Property(x => x.Channel).HasColumnName(@"Channel").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<NotificationView>().Property(x => x.Subject).HasColumnName(@"Subject").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<NotificationView>().Property(x => x.Message).HasColumnName(@"Message").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<NotificationView>().Property(x => x.IsRead).HasColumnName(@"IsRead").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<NotificationView>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<NotificationView>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizeNotificationViewMapping(ModelBuilder modelBuilder);

        #endregion

        #region PaymentLogView Mapping

        private void PaymentLogViewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PaymentLogView>().HasNoKey();
            modelBuilder.Entity<PaymentLogView>().ToView(@"PaymentLogView", @"dbo");
            modelBuilder.Entity<PaymentLogView>().Property(x => x.PaymentLogID).HasColumnName(@"PaymentLogID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PaymentLogView>().Property(x => x.TechnicianUserID).HasColumnName(@"TechnicianUserID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PaymentLogView>().Property(x => x.TechnicianFullName).HasColumnName(@"TechnicianFullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<PaymentLogView>().Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType(@"decimal(18,2)").IsRequired().ValueGeneratedNever().HasPrecision(18, 2);
            modelBuilder.Entity<PaymentLogView>().Property(x => x.PaymentDate).HasColumnName(@"PaymentDate").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PaymentLogView>().Property(x => x.JobID).HasColumnName(@"JobID").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<PaymentLogView>().Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<PaymentLogView>().Property(x => x.RecordedByUserID).HasColumnName(@"RecordedByUserID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PaymentLogView>().Property(x => x.RecordedByFullName).HasColumnName(@"RecordedByFullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<PaymentLogView>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PaymentLogView>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizePaymentLogViewMapping(ModelBuilder modelBuilder);

        #endregion

        #region ProfileNoteView Mapping

        private void ProfileNoteViewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ProfileNoteView>().HasNoKey();
            modelBuilder.Entity<ProfileNoteView>().ToView(@"ProfileNoteView", @"dbo");
            modelBuilder.Entity<ProfileNoteView>().Property(x => x.NoteID).HasColumnName(@"NoteID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ProfileNoteView>().Property(x => x.TechnicianUserID).HasColumnName(@"TechnicianUserID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ProfileNoteView>().Property(x => x.TechnicianFullName).HasColumnName(@"TechnicianFullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<ProfileNoteView>().Property(x => x.AuthorUserID).HasColumnName(@"AuthorUserID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ProfileNoteView>().Property(x => x.AuthorFullName).HasColumnName(@"AuthorFullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<ProfileNoteView>().Property(x => x.NoteText).HasColumnName(@"NoteText").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ProfileNoteView>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ProfileNoteView>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizeProfileNoteViewMapping(ModelBuilder modelBuilder);

        #endregion

        #region RoleAllowedModule Mapping

        private void RoleAllowedModuleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RoleAllowedModule>().HasNoKey();
            modelBuilder.Entity<RoleAllowedModule>().ToView(@"RoleAllowedModules", @"dbo");
            modelBuilder.Entity<RoleAllowedModule>().Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<RoleAllowedModule>().Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<RoleAllowedModule>().Property(x => x.ModuleId).HasColumnName(@"ModuleId").HasColumnType(@"nvarchar(4)").IsRequired().ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<RoleAllowedModule>().Property(x => x.ModuleName).HasColumnName(@"ModuleName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
        }

        partial void CustomizeRoleAllowedModuleMapping(ModelBuilder modelBuilder);

        #endregion

        #region RolesView Mapping

        private void RolesViewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RolesView>().HasNoKey();
            modelBuilder.Entity<RolesView>().ToView(@"RolesView", @"dbo");
            modelBuilder.Entity<RolesView>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<RolesView>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<RolesView>().Property(x => x.NormalizedName).HasColumnName(@"NormalizedName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<RolesView>().Property(x => x.Description).HasColumnName(@"Description").HasColumnType(@"nvarchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<RolesView>().Property(x => x.UserCount).HasColumnName(@"UserCount").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<RolesView>().Property(x => x.AllowedModules).HasColumnName(@"AllowedModules").HasColumnType(@"nvarchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
        }

        partial void CustomizeRolesViewMapping(ModelBuilder modelBuilder);

        #endregion

        #region TechnicianRosterView Mapping

        private void TechnicianRosterViewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TechnicianRosterView>().HasNoKey();
            modelBuilder.Entity<TechnicianRosterView>().ToView(@"TechnicianRosterView", @"dbo");
            modelBuilder.Entity<TechnicianRosterView>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<TechnicianRosterView>().Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<TechnicianRosterView>().Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<TechnicianRosterView>().Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<TechnicianRosterView>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<TechnicianRosterView>().Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<TechnicianRosterView>().Property(x => x.ProfilePictureUrl).HasColumnName(@"ProfilePictureUrl").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<TechnicianRosterView>().Property(x => x.AvailabilityStatus).HasColumnName(@"AvailabilityStatus").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TechnicianRosterView>().Property(x => x.ComplianceStatus).HasColumnName(@"ComplianceStatus").HasColumnType(@"varchar(26)").IsRequired().ValueGeneratedNever().HasMaxLength(26);
        }

        partial void CustomizeTechnicianRosterViewMapping(ModelBuilder modelBuilder);

        #endregion

        #region TechnicianView Mapping

        private void TechnicianViewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TechnicianView>().HasNoKey();
            modelBuilder.Entity<TechnicianView>().ToView(@"TechnicianView", @"dbo");
            modelBuilder.Entity<TechnicianView>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<TechnicianView>().Property(x => x.RoleID).HasColumnName(@"RoleID").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<TechnicianView>().Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<TechnicianView>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<TechnicianView>().Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<TechnicianView>().Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<TechnicianView>().Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<TechnicianView>().Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<TechnicianView>().Property(x => x.ProfilePictureUrl).HasColumnName(@"ProfilePictureUrl").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<TechnicianView>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TechnicianView>().Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<TechnicianView>().Property(x => x.AddressID).HasColumnName(@"AddressID").HasColumnType(@"uniqueidentifier").ValueGeneratedNever();
            modelBuilder.Entity<TechnicianView>().Property(x => x.AddressType).HasColumnName(@"AddressType").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TechnicianView>().Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<TechnicianView>().Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<TechnicianView>().Property(x => x.City).HasColumnName(@"City").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<TechnicianView>().Property(x => x.State).HasColumnName(@"State").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<TechnicianView>().Property(x => x.ZipCode).HasColumnName(@"ZipCode").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<TechnicianView>().Property(x => x.Country).HasColumnName(@"Country").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<TechnicianView>().Property(x => x.AvailabilityStatus).HasColumnName(@"AvailabilityStatus").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TechnicianView>().Property(x => x.PayRate).HasColumnName(@"PayRate").HasColumnType(@"decimal(18,2)").ValueGeneratedNever().HasPrecision(18, 2);
            modelBuilder.Entity<TechnicianView>().Property(x => x.ProfileReadinessPercent).HasColumnName(@"ProfileReadinessPercent").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TechnicianView>().Property(x => x.ProfileDateAdded).HasColumnName(@"ProfileDateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TechnicianView>().Property(x => x.ProfileDateModified).HasColumnName(@"ProfileDateModified").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizeTechnicianViewMapping(ModelBuilder modelBuilder);

        #endregion

        #region UserAgreementView Mapping

        private void UserAgreementViewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserAgreementView>().HasNoKey();
            modelBuilder.Entity<UserAgreementView>().ToView(@"UserAgreementView", @"dbo");
            modelBuilder.Entity<UserAgreementView>().Property(x => x.UserAgreementID).HasColumnName(@"UserAgreementID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserAgreementView>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserAgreementView>().Property(x => x.UserFullName).HasColumnName(@"UserFullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<UserAgreementView>().Property(x => x.AgreementName).HasColumnName(@"AgreementName").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<UserAgreementView>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizeUserAgreementViewMapping(ModelBuilder modelBuilder);

        #endregion

        #region UserAllowedModule Mapping

        private void UserAllowedModuleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserAllowedModule>().HasNoKey();
            modelBuilder.Entity<UserAllowedModule>().ToView(@"UserAllowedModules", @"dbo");
            modelBuilder.Entity<UserAllowedModule>().Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<UserAllowedModule>().Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<UserAllowedModule>().Property(x => x.ModuleId).HasColumnName(@"ModuleId").HasColumnType(@"nvarchar(4)").IsRequired().ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<UserAllowedModule>().Property(x => x.ModuleName).HasColumnName(@"ModuleName").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
        }

        partial void CustomizeUserAllowedModuleMapping(ModelBuilder modelBuilder);

        #endregion

        #region UserView Mapping

        private void UserViewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserView>().HasNoKey();
            modelBuilder.Entity<UserView>().ToView(@"UserView", @"dbo");
            modelBuilder.Entity<UserView>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<UserView>().Property(x => x.RoleID).HasColumnName(@"RoleID").HasColumnType(@"nvarchar(128)").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<UserView>().Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<UserView>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<UserView>().Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<UserView>().Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<UserView>().Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<UserView>().Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<UserView>().Property(x => x.ProfilePictureUrl).HasColumnName(@"ProfilePictureUrl").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<UserView>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserView>().Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<UserView>().Property(x => x.AddressID).HasColumnName(@"AddressID").HasColumnType(@"uniqueidentifier").ValueGeneratedNever();
            modelBuilder.Entity<UserView>().Property(x => x.AddressType).HasColumnName(@"AddressType").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<UserView>().Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<UserView>().Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<UserView>().Property(x => x.City).HasColumnName(@"City").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<UserView>().Property(x => x.State).HasColumnName(@"State").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<UserView>().Property(x => x.ZipCode).HasColumnName(@"ZipCode").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<UserView>().Property(x => x.Country).HasColumnName(@"Country").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
        }

        partial void CustomizeUserViewMapping(ModelBuilder modelBuilder);

        #endregion

        #region W9DataView Mapping

        private void W9DataViewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<W9DataView>().HasNoKey();
            modelBuilder.Entity<W9DataView>().ToView(@"W9DataView", @"dbo");
            modelBuilder.Entity<W9DataView>().Property(x => x.W9DataID).HasColumnName(@"W9DataID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<W9DataView>().Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType(@"uniqueidentifier").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<W9DataView>().Property(x => x.UserFullName).HasColumnName(@"UserFullName").HasColumnType(@"nvarchar(511)").IsRequired().ValueGeneratedNever().HasMaxLength(511);
            modelBuilder.Entity<W9DataView>().Property(x => x.TaxYear).HasColumnName(@"TaxYear").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<W9DataView>().Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<W9DataView>().Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<W9DataView>().Property(x => x.BusinessName).HasColumnName(@"BusinessName").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<W9DataView>().Property(x => x.TaxClassification).HasColumnName(@"TaxClassification").HasColumnType(@"nvarchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<W9DataView>().Property(x => x.AddressStreet).HasColumnName(@"AddressStreet").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<W9DataView>().Property(x => x.AddressCityStateZip).HasColumnName(@"AddressCityStateZip").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<W9DataView>().Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<W9DataView>().Property(x => x.DateModified).HasColumnName(@"DateModified").HasColumnType(@"datetimeoffset").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizeW9DataViewMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AspNetRole>().HasMany(x => x.AspNetUsers).WithMany(op => op.AspNetRoles)
                .UsingEntity<Dictionary<string, object>>(
                    @"AspNetUserRoles",
                    x => x.HasOne<AspNetUser>().WithMany().HasPrincipalKey(@"Id").HasForeignKey(@"UserId"),
                    x => x.HasOne<AspNetRole>().WithMany().HasPrincipalKey(@"Id").HasForeignKey(@"RoleId")
                )
                .ToTable(@"AspNetUserRoles", @"dbo");
            modelBuilder.Entity<AspNetRole>().HasMany(x => x.Modules).WithMany(op => op.AspNetRoles)
                .UsingEntity<Dictionary<string, object>>(
                    @"ModuleRoleLookup",
                    x => x.HasOne<Module>().WithMany().HasPrincipalKey(@"ModuleId").HasForeignKey(@"ModuleId"),
                    x => x.HasOne<AspNetRole>().WithMany().HasPrincipalKey(@"Id").HasForeignKey(@"RoleId")
                )
                .ToTable(@"ModuleRoleLookup", @"dbo");
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.Documents).WithOne(op => op.AspNetUser).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.DocumentStateHistories).WithOne(op => op.AspNetUser).HasForeignKey(@"ActorUserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.ManagerTechnicianAssignments_ManagerUserId).WithOne(op => op.AspNetUser_ManagerUserId).HasForeignKey(@"ManagerUserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.ManagerTechnicianAssignments_TechnicianUserId).WithOne(op => op.AspNetUser_TechnicianUserId).HasForeignKey(@"TechnicianUserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.Notifications).WithOne(op => op.AspNetUser).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.PaymentLogs_TechnicianUserId).WithOne(op => op.AspNetUser_TechnicianUserId).HasForeignKey(@"TechnicianUserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.PaymentLogs_RecordedByUserId).WithOne(op => op.AspNetUser_RecordedByUserId).HasForeignKey(@"RecordedByUserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.ProfileNotes_TechnicianUserId).WithOne(op => op.AspNetUser_TechnicianUserId).HasForeignKey(@"TechnicianUserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.ProfileNotes_AuthorUserId).WithOne(op => op.AspNetUser_AuthorUserId).HasForeignKey(@"AuthorUserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.UserAgreements).WithOne(op => op.AspNetUser).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<AspNetUser>().HasMany(x => x.W9Datas).WithOne(op => op.AspNetUser).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<Document>().HasOne(x => x.AspNetUser).WithMany(op => op.Documents).HasForeignKey(@"UserId").IsRequired(true);
            modelBuilder.Entity<Document>().HasOne(x => x.DocumentType).WithMany(op => op.Documents).HasForeignKey(@"DocumentTypeId").IsRequired(true);
            modelBuilder.Entity<Document>().HasMany(x => x.DocumentStateHistories).WithOne(op => op.Document).HasForeignKey(@"DocumentId").IsRequired(true);

            modelBuilder.Entity<DocumentState>().HasMany(x => x.DocumentStateHistories).WithOne(op => op.DocumentState).HasForeignKey(@"DocumentStateId").IsRequired(true);

            modelBuilder.Entity<DocumentStateHistory>().HasOne(x => x.Document).WithMany(op => op.DocumentStateHistories).HasForeignKey(@"DocumentId").IsRequired(true);
            modelBuilder.Entity<DocumentStateHistory>().HasOne(x => x.DocumentState).WithMany(op => op.DocumentStateHistories).HasForeignKey(@"DocumentStateId").IsRequired(true);
            modelBuilder.Entity<DocumentStateHistory>().HasOne(x => x.AspNetUser).WithMany(op => op.DocumentStateHistories).HasForeignKey(@"ActorUserId").IsRequired(true);

            modelBuilder.Entity<DocumentType>().HasMany(x => x.Documents).WithOne(op => op.DocumentType).HasForeignKey(@"DocumentTypeId").IsRequired(true);

            modelBuilder.Entity<ManagerTechnicianAssignment>().HasOne(x => x.AspNetUser_ManagerUserId).WithMany(op => op.ManagerTechnicianAssignments_ManagerUserId).HasForeignKey(@"ManagerUserId").IsRequired(true);
            modelBuilder.Entity<ManagerTechnicianAssignment>().HasOne(x => x.AspNetUser_TechnicianUserId).WithMany(op => op.ManagerTechnicianAssignments_TechnicianUserId).HasForeignKey(@"TechnicianUserId").IsRequired(true);

            modelBuilder.Entity<Notification>().HasOne(x => x.AspNetUser).WithMany(op => op.Notifications).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<PaymentLog>().HasOne(x => x.AspNetUser_TechnicianUserId).WithMany(op => op.PaymentLogs_TechnicianUserId).HasForeignKey(@"TechnicianUserId").IsRequired(true);
            modelBuilder.Entity<PaymentLog>().HasOne(x => x.AspNetUser_RecordedByUserId).WithMany(op => op.PaymentLogs_RecordedByUserId).HasForeignKey(@"RecordedByUserId").IsRequired(true);

            modelBuilder.Entity<ProfileNote>().HasOne(x => x.AspNetUser_TechnicianUserId).WithMany(op => op.ProfileNotes_TechnicianUserId).HasForeignKey(@"TechnicianUserId").IsRequired(true);
            modelBuilder.Entity<ProfileNote>().HasOne(x => x.AspNetUser_AuthorUserId).WithMany(op => op.ProfileNotes_AuthorUserId).HasForeignKey(@"AuthorUserId").IsRequired(true);

            modelBuilder.Entity<TechnicianProfile>().HasOne(x => x.AspNetUser).WithOne(op => op.TechnicianProfile).OnDelete(DeleteBehavior.Cascade).HasForeignKey(typeof(TechnicianProfile), @"TechnicianId").IsRequired(true);

            modelBuilder.Entity<UserAgreement>().HasOne(x => x.AspNetUser).WithMany(op => op.UserAgreements).HasForeignKey(@"UserId").IsRequired(true);

            modelBuilder.Entity<W9Data>().HasOne(x => x.AspNetUser).WithMany(op => op.W9Datas).HasForeignKey(@"UserId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/AppSetting.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class AppSetting {

        public AppSetting()
        {
            OnCreated();
        }

        [Key]
        [Required()]
        public int AppSettingId { get; set; }

        [StringLength(255)]
        [Required()]
        public string Key { get; set; }

        [Required()]
        public string Value { get; set; }

        [Required()]
        public DateTime DateAdded { get; set; }

        [StringLength(450)]
        [Required()]
        public string UserAddedId { get; set; }

        public DateTime? DateModified { get; set; }

        [StringLength(450)]
        public string? UserModifiedId { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/AspNetRole.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class AspNetRole {

        public AspNetRole()
        {
            this.AspNetUsers = new List<AspNetUser>();
            this.Modules = new List<Module>();
            OnCreated();
        }

        [Key]
        [StringLength(128)]
        [Required()]
        public string Id { get; set; }

        [StringLength(256)]
        public string? Name { get; set; }

        [StringLength(256)]
        public string? NormalizedName { get; set; }

        public string? ConcurrencyStamp { get; set; }

        [StringLength(4000)]
        public string? Description { get; set; }

        public virtual IList<AspNetUser> AspNetUsers { get; set; }

        public virtual IList<Module> Modules { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/AspNetUser.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class AspNetUser {

        public AspNetUser()
        {
            this.Documents = new List<Document>();
            this.DocumentStateHistories = new List<DocumentStateHistory>();
            this.ManagerTechnicianAssignments_ManagerUserId = new List<ManagerTechnicianAssignment>();
            this.ManagerTechnicianAssignments_TechnicianUserId = new List<ManagerTechnicianAssignment>();
            this.Notifications = new List<Notification>();
            this.PaymentLogs_TechnicianUserId = new List<PaymentLog>();
            this.PaymentLogs_RecordedByUserId = new List<PaymentLog>();
            this.ProfileNotes_TechnicianUserId = new List<ProfileNote>();
            this.ProfileNotes_AuthorUserId = new List<ProfileNote>();
            this.UserAgreements = new List<UserAgreement>();
            this.W9Datas = new List<W9Data>();
            this.AspNetRoles = new List<AspNetRole>();
            OnCreated();
        }

        [Key]
        [StringLength(128)]
        [Required()]
        public string Id { get; set; }

        [StringLength(256)]
        public string? UserName { get; set; }

        [StringLength(256)]
        public string? NormalizedUserName { get; set; }

        [StringLength(256)]
        public string? Email { get; set; }

        [StringLength(256)]
        public string? NormalizedEmail { get; set; }

        [Required()]
        public bool EmailConfirmed { get; set; }

        public string? PasswordHash { get; set; }

        public string? SecurityStamp { get; set; }

        public string? ConcurrencyStamp { get; set; }

        public string? PhoneNumber { get; set; }

        [Required()]
        public bool PhoneNumberConfirmed { get; set; }

        [Required()]
        public bool TwoFactorEnabled { get; set; }

        public DateTimeOffset? LockoutEnd { get; set; }

        [Required()]
        public bool LockoutEnabled { get; set; }

        [Required()]
        public int AccessFailedCount { get; set; }

        [StringLength(255)]
        [Required()]
        public string FirstName { get; set; }

        [StringLength(255)]
        [Required()]
        public string LastName { get; set; }

        [StringLength(255)]
        public string? Suffix { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        public DateTime? DateLastLogin { get; set; }

        [StringLength(1000)]
        public string? Email2 { get; set; }

        [StringLength(50)]
        public string? Phone2 { get; set; }

        [StringLength(50)]
        public string? PreferredName { get; set; }

        [StringLength(255)]
        public string? Creds { get; set; }

        [StringLength(1000)]
        public string? ProfilePicUrl { get; set; }

        public virtual IList<Document> Documents { get; set; }

        public virtual IList<DocumentStateHistory> DocumentStateHistories { get; set; }

        public virtual IList<ManagerTechnicianAssignment> ManagerTechnicianAssignments_ManagerUserId { get; set; }

        public virtual IList<ManagerTechnicianAssignment> ManagerTechnicianAssignments_TechnicianUserId { get; set; }

        public virtual IList<Notification> Notifications { get; set; }

        public virtual IList<PaymentLog> PaymentLogs_TechnicianUserId { get; set; }

        public virtual IList<PaymentLog> PaymentLogs_RecordedByUserId { get; set; }

        public virtual IList<ProfileNote> ProfileNotes_TechnicianUserId { get; set; }

        public virtual IList<ProfileNote> ProfileNotes_AuthorUserId { get; set; }

        public virtual TechnicianProfile TechnicianProfile { get; set; }

        public virtual IList<UserAgreement> UserAgreements { get; set; }

        public virtual IList<W9Data> W9Datas { get; set; }

        public virtual IList<AspNetRole> AspNetRoles { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/Document.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class Document {

        public Document()
        {
            this.IsActive = true;
            this.DocumentStateHistories = new List<DocumentStateHistory>();
            OnCreated();
        }

        [Key]
        [Required()]
        public Guid DocumentId { get; set; }

        [StringLength(128)]
        [Required()]
        public string UserId { get; set; }

        [Required()]
        public Guid DocumentTypeId { get; set; }

        [StringLength(255)]
        [Required()]
        public string FileName { get; set; }

        [StringLength(2083)]
        [Required()]
        public string StoragePath { get; set; }

        [StringLength(100)]
        [Required()]
        public string MimeType { get; set; }

        public DateTimeOffset? ExpirationDate { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        [Required()]
        public DateTimeOffset DateModified { get; set; }

        public virtual AspNetUser AspNetUser { get; set; }

        public virtual DocumentType DocumentType { get; set; }

        public virtual IList<DocumentStateHistory> DocumentStateHistories { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/DocumentState.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class DocumentState {

        public DocumentState()
        {
            this.DocumentStateHistories = new List<DocumentStateHistory>();
            OnCreated();
        }

        [Key]
        [Required()]
        public Guid DocumentStateId { get; set; }

        [StringLength(50)]
        [Required()]
        public string StateName { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        public virtual IList<DocumentStateHistory> DocumentStateHistories { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/DocumentStateHistory.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class DocumentStateHistory {

        public DocumentStateHistory()
        {
            OnCreated();
        }

        [Key]
        [Required()]
        public Guid DocumentStateHistoryId { get; set; }

        [Required()]
        public Guid DocumentId { get; set; }

        [Required()]
        public Guid DocumentStateId { get; set; }

        [StringLength(128)]
        [Required()]
        public string ActorUserId { get; set; }

        [StringLength(1000)]
        public string? Notes { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        public virtual Document Document { get; set; }

        public virtual DocumentState DocumentState { get; set; }

        public virtual AspNetUser AspNetUser { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/DocumentType.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class DocumentType {

        public DocumentType()
        {
            this.IsComplianceRequired = true;
            this.Documents = new List<Document>();
            OnCreated();
        }

        [Key]
        [Required()]
        public Guid DocumentTypeId { get; set; }

        [StringLength(100)]
        [Required()]
        public string TypeName { get; set; }

        [Required()]
        public bool IsComplianceRequired { get; set; }

        public virtual IList<Document> Documents { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/DocumentView.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class DocumentView {

        public DocumentView()
        {
            OnCreated();
        }

        [Required()]
        public Guid DocumentID { get; set; }

        [Required()]
        public Guid UserID { get; set; }

        [StringLength(511)]
        [Required()]
        public string UserFullName { get; set; }

        [Required()]
        public Guid DocumentTypeID { get; set; }

        [StringLength(100)]
        [Required()]
        public string DocumentTypeName { get; set; }

        [StringLength(255)]
        [Required()]
        public string FileName { get; set; }

        [StringLength(2083)]
        [Required()]
        public string StoragePath { get; set; }

        [StringLength(100)]
        [Required()]
        public string MimeType { get; set; }

        public DateTimeOffset? ExpirationDate { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        [Required()]
        public DateTimeOffset DateModified { get; set; }

        [StringLength(50)]
        public string? CurrentStateName { get; set; }

        public DateTimeOffset? CurrentStateDateAdded { get; set; }

        [StringLength(511)]
        public string? CurrentStateActorFullName { get; set; }

        [StringLength(1000)]
        public string? CurrentStateNotes { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/ManagerTechnicianAssignment.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class ManagerTechnicianAssignment {

        public ManagerTechnicianAssignment()
        {
            OnCreated();
        }

        [Key]
        [StringLength(128)]
        [Required()]
        public string ManagerUserId { get; set; }

        [Key]
        [StringLength(128)]
        [Required()]
        public string TechnicianUserId { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        public virtual AspNetUser AspNetUser_ManagerUserId { get; set; }

        public virtual AspNetUser AspNetUser_TechnicianUserId { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        public override bool Equals(object obj)
        {
          ManagerTechnicianAssignment toCompare = obj as ManagerTechnicianAssignment;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.ManagerUserId, toCompare.ManagerUserId))
            return false;
          if (!Object.Equals(this.TechnicianUserId, toCompare.TechnicianUserId))
            return false;

          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + ManagerUserId.GetHashCode();
          hashCode = (hashCode * 7) + TechnicianUserId.GetHashCode();
          return hashCode;
        }

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/Module.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class Module {

        public Module()
        {
            this.AspNetRoles = new List<AspNetRole>();
            OnCreated();
        }

        [Key]
        [StringLength(4)]
        [Required()]
        public string ModuleId { get; set; }

        [StringLength(50)]
        [Required()]
        public string ModuleName { get; set; }

        public virtual IList<AspNetRole> AspNetRoles { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/Notification.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class Notification {

        public Notification()
        {
            this.IsRead = false;
            this.IsActive = true;
            OnCreated();
        }

        [Key]
        [Required()]
        public Guid NotificationId { get; set; }

        [StringLength(128)]
        [Required()]
        public string UserId { get; set; }

        [StringLength(50)]
        [Required()]
        public string Channel { get; set; }

        [StringLength(255)]
        [Required()]
        public string Subject { get; set; }

        [Required()]
        public string Message { get; set; }

        [Required()]
        public bool IsRead { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        public virtual AspNetUser AspNetUser { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/NotificationView.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class NotificationView {

        public NotificationView()
        {
            OnCreated();
        }

        [Required()]
        public Guid NotificationID { get; set; }

        [Required()]
        public Guid UserID { get; set; }

        [StringLength(511)]
        [Required()]
        public string UserFullName { get; set; }

        [StringLength(50)]
        [Required()]
        public string Channel { get; set; }

        [StringLength(255)]
        [Required()]
        public string Subject { get; set; }

        [Required()]
        public string Message { get; set; }

        [Required()]
        public bool IsRead { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/PaymentLog.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class PaymentLog {

        public PaymentLog()
        {
            this.IsActive = true;
            OnCreated();
        }

        [Key]
        [Required()]
        public Guid PaymentLogId { get; set; }

        [StringLength(128)]
        [Required()]
        public string TechnicianUserId { get; set; }

        [Required()]
        public decimal Amount { get; set; }

        [Required()]
        public DateTimeOffset PaymentDate { get; set; }

        [StringLength(100)]
        public string? JobId { get; set; }

        [StringLength(1000)]
        public string? Notes { get; set; }

        [StringLength(128)]
        [Required()]
        public string RecordedByUserId { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        public virtual AspNetUser AspNetUser_TechnicianUserId { get; set; }

        public virtual AspNetUser AspNetUser_RecordedByUserId { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/PaymentLogView.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class PaymentLogView {

        public PaymentLogView()
        {
            OnCreated();
        }

        [Required()]
        public Guid PaymentLogID { get; set; }

        [Required()]
        public Guid TechnicianUserID { get; set; }

        [StringLength(511)]
        [Required()]
        public string TechnicianFullName { get; set; }

        [Required()]
        public decimal Amount { get; set; }

        [Required()]
        public DateTimeOffset PaymentDate { get; set; }

        [StringLength(100)]
        public string? JobID { get; set; }

        [StringLength(1000)]
        public string? Notes { get; set; }

        [Required()]
        public Guid RecordedByUserID { get; set; }

        [StringLength(511)]
        [Required()]
        public string RecordedByFullName { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/ProfileNote.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class ProfileNote {

        public ProfileNote()
        {
            this.IsActive = true;
            OnCreated();
        }

        [Key]
        [Required()]
        public Guid NoteId { get; set; }

        [StringLength(128)]
        [Required()]
        public string TechnicianUserId { get; set; }

        [StringLength(128)]
        [Required()]
        public string AuthorUserId { get; set; }

        [Required()]
        public string NoteText { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        public virtual AspNetUser AspNetUser_TechnicianUserId { get; set; }

        public virtual AspNetUser AspNetUser_AuthorUserId { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/ProfileNoteView.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class ProfileNoteView {

        public ProfileNoteView()
        {
            OnCreated();
        }

        [Required()]
        public Guid NoteID { get; set; }

        [Required()]
        public Guid TechnicianUserID { get; set; }

        [StringLength(511)]
        [Required()]
        public string TechnicianFullName { get; set; }

        [Required()]
        public Guid AuthorUserID { get; set; }

        [StringLength(511)]
        [Required()]
        public string AuthorFullName { get; set; }

        [Required()]
        public string NoteText { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/RoleAllowedModule.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class RoleAllowedModule {

        public RoleAllowedModule()
        {
            OnCreated();
        }

        [StringLength(128)]
        [Required()]
        public string RoleId { get; set; }

        [StringLength(256)]
        public string? RoleName { get; set; }

        [StringLength(4)]
        [Required()]
        public string ModuleId { get; set; }

        [StringLength(50)]
        [Required()]
        public string ModuleName { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/RolesView.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class RolesView {

        public RolesView()
        {
            OnCreated();
        }

        [StringLength(128)]
        [Required()]
        public string Id { get; set; }

        [StringLength(256)]
        public string? Name { get; set; }

        [StringLength(256)]
        public string? NormalizedName { get; set; }

        [StringLength(4000)]
        public string? Description { get; set; }

        public int? UserCount { get; set; }

        [StringLength(4000)]
        public string? AllowedModules { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/TechnicianProfile.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class TechnicianProfile {

        public TechnicianProfile()
        {
            this.AvailabilityStatus = @"Unavailable";
            this.ProfileReadinessPercent = 0;
            OnCreated();
        }

        [Key]
        [StringLength(128)]
        [Required()]
        public string TechnicianId { get; set; }

        [StringLength(50)]
        [Required()]
        public string AvailabilityStatus { get; set; }

        public decimal? PayRate { get; set; }

        [Required()]
        public int ProfileReadinessPercent { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        [Required()]
        public DateTimeOffset DateModified { get; set; }

        public virtual AspNetUser AspNetUser { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/TechnicianRosterView.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class TechnicianRosterView {

        public TechnicianRosterView()
        {
            OnCreated();
        }

        [StringLength(128)]
        [Required()]
        public string UserID { get; set; }

        [StringLength(255)]
        [Required()]
        public string FirstName { get; set; }

        [StringLength(255)]
        [Required()]
        public string LastName { get; set; }

        [StringLength(511)]
        [Required()]
        public string FullName { get; set; }

        [StringLength(256)]
        public string? Email { get; set; }

        public string? PhoneNumber { get; set; }

        [StringLength(1000)]
        public string? ProfilePictureUrl { get; set; }

        [StringLength(50)]
        [Required()]
        public string AvailabilityStatus { get; set; }

        [StringLength(26)]
        [Required()]
        public string ComplianceStatus { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/TechnicianView.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class TechnicianView {

        public TechnicianView()
        {
            OnCreated();
        }

        [StringLength(128)]
        [Required()]
        public string UserID { get; set; }

        [StringLength(128)]
        [Required()]
        public string RoleID { get; set; }

        [StringLength(256)]
        public string? RoleName { get; set; }

        [StringLength(256)]
        public string? Email { get; set; }

        [StringLength(255)]
        [Required()]
        public string FirstName { get; set; }

        [StringLength(255)]
        [Required()]
        public string LastName { get; set; }

        [StringLength(511)]
        [Required()]
        public string FullName { get; set; }

        public string? PhoneNumber { get; set; }

        [StringLength(1000)]
        public string? ProfilePictureUrl { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [StringLength(256)]
        public string? UserName { get; set; }

        public Guid? AddressID { get; set; }

        [StringLength(50)]
        public string? AddressType { get; set; }

        [StringLength(255)]
        public string? AddressLine1 { get; set; }

        [StringLength(255)]
        public string? AddressLine2 { get; set; }

        [StringLength(100)]
        public string? City { get; set; }

        [StringLength(100)]
        public string? State { get; set; }

        [StringLength(20)]
        public string? ZipCode { get; set; }

        [StringLength(100)]
        public string? Country { get; set; }

        [StringLength(50)]
        [Required()]
        public string AvailabilityStatus { get; set; }

        public decimal? PayRate { get; set; }

        [Required()]
        public int ProfileReadinessPercent { get; set; }

        [Required()]
        public DateTimeOffset ProfileDateAdded { get; set; }

        [Required()]
        public DateTimeOffset ProfileDateModified { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/UserAgreement.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class UserAgreement {

        public UserAgreement()
        {
            OnCreated();
        }

        [Key]
        [Required()]
        public Guid UserAgreementId { get; set; }

        [StringLength(128)]
        [Required()]
        public string UserId { get; set; }

        [StringLength(100)]
        [Required()]
        public string AgreementName { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        public virtual AspNetUser AspNetUser { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/UserAgreementView.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class UserAgreementView {

        public UserAgreementView()
        {
            OnCreated();
        }

        [Required()]
        public Guid UserAgreementID { get; set; }

        [Required()]
        public Guid UserID { get; set; }

        [StringLength(511)]
        [Required()]
        public string UserFullName { get; set; }

        [StringLength(100)]
        [Required()]
        public string AgreementName { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/UserAllowedModule.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class UserAllowedModule {

        public UserAllowedModule()
        {
            OnCreated();
        }

        [StringLength(128)]
        [Required()]
        public string UserId { get; set; }

        [StringLength(256)]
        public string? UserName { get; set; }

        [StringLength(4)]
        [Required()]
        public string ModuleId { get; set; }

        [StringLength(50)]
        [Required()]
        public string ModuleName { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/UserView.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class UserView {

        public UserView()
        {
            OnCreated();
        }

        [StringLength(128)]
        [Required()]
        public string UserID { get; set; }

        [StringLength(128)]
        [Required()]
        public string RoleID { get; set; }

        [StringLength(256)]
        public string? RoleName { get; set; }

        [StringLength(256)]
        public string? Email { get; set; }

        [StringLength(255)]
        [Required()]
        public string FirstName { get; set; }

        [StringLength(255)]
        [Required()]
        public string LastName { get; set; }

        [StringLength(511)]
        [Required()]
        public string FullName { get; set; }

        public string? PhoneNumber { get; set; }

        [StringLength(1000)]
        public string? ProfilePictureUrl { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [StringLength(256)]
        public string? UserName { get; set; }

        public Guid? AddressID { get; set; }

        [StringLength(50)]
        public string? AddressType { get; set; }

        [StringLength(255)]
        public string? AddressLine1 { get; set; }

        [StringLength(255)]
        public string? AddressLine2 { get; set; }

        [StringLength(100)]
        public string? City { get; set; }

        [StringLength(100)]
        public string? State { get; set; }

        [StringLength(20)]
        public string? ZipCode { get; set; }

        [StringLength(100)]
        public string? Country { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/W9Data.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class W9Data {

        public W9Data()
        {
            this.IsActive = true;
            OnCreated();
        }

        [Key]
        [Required()]
        public Guid W9DataId { get; set; }

        [StringLength(128)]
        [Required()]
        public string UserId { get; set; }

        [Required()]
        public int TaxYear { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [StringLength(255)]
        [Required()]
        public string FullName { get; set; }

        [StringLength(255)]
        public string? BusinessName { get; set; }

        [StringLength(100)]
        [Required()]
        public string TaxClassification { get; set; }

        [StringLength(255)]
        [Required()]
        public string AddressStreet { get; set; }

        [StringLength(255)]
        [Required()]
        public string AddressCityStateZip { get; set; }

        [Required()]
        public byte[] TaxIDNumberEncrypted { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        [Required()]
        public DateTimeOffset DateModified { get; set; }

        public virtual AspNetUser AspNetUser { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/W9DataView.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace XDentOpsAPI.Models.Data
{
    public partial class W9DataView {

        public W9DataView()
        {
            OnCreated();
        }

        [Required()]
        public Guid W9DataID { get; set; }

        [Required()]
        public Guid UserID { get; set; }

        [StringLength(511)]
        [Required()]
        public string UserFullName { get; set; }

        [Required()]
        public int TaxYear { get; set; }

        [Required()]
        public bool IsActive { get; set; }

        [StringLength(255)]
        [Required()]
        public string FullName { get; set; }

        [StringLength(255)]
        public string? BusinessName { get; set; }

        [StringLength(100)]
        [Required()]
        public string TaxClassification { get; set; }

        [StringLength(255)]
        [Required()]
        public string AddressStreet { get; set; }

        [StringLength(255)]
        [Required()]
        public string AddressCityStateZip { get; set; }

        [Required()]
        public DateTimeOffset DateAdded { get; set; }

        [Required()]
        public DateTimeOffset DateModified { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/XDentOpsAPI.Converters.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace XDentOpsAPI.Models.Data
{

    public static partial class AppSettingConverter
    {

        public static AppSettingDTO ToDto(this AppSetting source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static AppSettingDTO ToDtoWithRelated(this AppSetting source, int level)
        {
            if (source == null)
              return null;

            var target = new AppSettingDTO();

            // Properties
            target.AppSettingId = source.AppSettingId;
            target.Key = source.Key;
            target.Value = source.Value;
            target.DateAdded = source.DateAdded;
            target.UserAddedId = source.UserAddedId;
            target.DateModified = source.DateModified;
            target.UserModifiedId = source.UserModifiedId;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static AppSetting ToEntity(this AppSettingDTO source)
        {
            if (source == null)
              return null;

            var target = new AppSetting();

            // Properties
            target.AppSettingId = source.AppSettingId;
            target.Key = source.Key;
            target.Value = source.Value;
            target.DateAdded = source.DateAdded;
            target.UserAddedId = source.UserAddedId;
            target.DateModified = source.DateModified;
            target.UserModifiedId = source.UserModifiedId;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AppSettingDTO> ToDtos(this IEnumerable<AppSetting> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AppSettingDTO> ToDtosWithRelated(this IEnumerable<AppSetting> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<AppSetting> ToEntities(this IEnumerable<AppSettingDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(AppSetting source, AppSettingDTO target);

        static partial void OnEntityCreating(AppSettingDTO source, AppSetting target);

    }

    public static partial class AspNetRoleConverter
    {

        public static AspNetRoleDTO ToDto(this AspNetRole source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static AspNetRoleDTO ToDtoWithRelated(this AspNetRole source, int level)
        {
            if (source == null)
              return null;

            var target = new AspNetRoleDTO();

            // Properties
            target.Id = source.Id;
            target.Name = source.Name;
            target.NormalizedName = source.NormalizedName;
            target.ConcurrencyStamp = source.ConcurrencyStamp;
            target.Description = source.Description;

            // Navigation Properties
            if (level > 0) {
              target.AspNetUsers = source.AspNetUsers.ToDtosWithRelated(level - 1);
              target.Modules = source.Modules.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static AspNetRole ToEntity(this AspNetRoleDTO source)
        {
            if (source == null)
              return null;

            var target = new AspNetRole();

            // Properties
            target.Id = source.Id;
            target.Name = source.Name;
            target.NormalizedName = source.NormalizedName;
            target.ConcurrencyStamp = source.ConcurrencyStamp;
            target.Description = source.Description;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AspNetRoleDTO> ToDtos(this IEnumerable<AspNetRole> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AspNetRoleDTO> ToDtosWithRelated(this IEnumerable<AspNetRole> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<AspNetRole> ToEntities(this IEnumerable<AspNetRoleDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(AspNetRole source, AspNetRoleDTO target);

        static partial void OnEntityCreating(AspNetRoleDTO source, AspNetRole target);

    }

    public static partial class AspNetUserConverter
    {

        public static AspNetUserDTO ToDto(this AspNetUser source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static AspNetUserDTO ToDtoWithRelated(this AspNetUser source, int level)
        {
            if (source == null)
              return null;

            var target = new AspNetUserDTO();

            // Properties
            target.Id = source.Id;
            target.UserName = source.UserName;
            target.NormalizedUserName = source.NormalizedUserName;
            target.Email = source.Email;
            target.NormalizedEmail = source.NormalizedEmail;
            target.EmailConfirmed = source.EmailConfirmed;
            target.PasswordHash = source.PasswordHash;
            target.SecurityStamp = source.SecurityStamp;
            target.ConcurrencyStamp = source.ConcurrencyStamp;
            target.PhoneNumber = source.PhoneNumber;
            target.PhoneNumberConfirmed = source.PhoneNumberConfirmed;
            target.TwoFactorEnabled = source.TwoFactorEnabled;
            target.LockoutEnd = source.LockoutEnd;
            target.LockoutEnabled = source.LockoutEnabled;
            target.AccessFailedCount = source.AccessFailedCount;
            target.FirstName = source.FirstName;
            target.LastName = source.LastName;
            target.Suffix = source.Suffix;
            target.IsActive = source.IsActive;
            target.DateLastLogin = source.DateLastLogin;
            target.Email2 = source.Email2;
            target.Phone2 = source.Phone2;
            target.PreferredName = source.PreferredName;
            target.Creds = source.Creds;
            target.ProfilePicUrl = source.ProfilePicUrl;

            // Navigation Properties
            if (level > 0) {
              target.Documents = source.Documents.ToDtosWithRelated(level - 1);
              target.DocumentStateHistories = source.DocumentStateHistories.ToDtosWithRelated(level - 1);
              target.ManagerTechnicianAssignments_ManagerUserId = source.ManagerTechnicianAssignments_ManagerUserId.ToDtosWithRelated(level - 1);
              target.ManagerTechnicianAssignments_TechnicianUserId = source.ManagerTechnicianAssignments_TechnicianUserId.ToDtosWithRelated(level - 1);
              target.Notifications = source.Notifications.ToDtosWithRelated(level - 1);
              target.PaymentLogs_TechnicianUserId = source.PaymentLogs_TechnicianUserId.ToDtosWithRelated(level - 1);
              target.PaymentLogs_RecordedByUserId = source.PaymentLogs_RecordedByUserId.ToDtosWithRelated(level - 1);
              target.ProfileNotes_TechnicianUserId = source.ProfileNotes_TechnicianUserId.ToDtosWithRelated(level - 1);
              target.ProfileNotes_AuthorUserId = source.ProfileNotes_AuthorUserId.ToDtosWithRelated(level - 1);
              target.TechnicianProfile = source.TechnicianProfile.ToDtoWithRelated(level - 1);
              target.UserAgreements = source.UserAgreements.ToDtosWithRelated(level - 1);
              target.W9Datas = source.W9Datas.ToDtosWithRelated(level - 1);
              target.AspNetRoles = source.AspNetRoles.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static AspNetUser ToEntity(this AspNetUserDTO source)
        {
            if (source == null)
              return null;

            var target = new AspNetUser();

            // Properties
            target.Id = source.Id;
            target.UserName = source.UserName;
            target.NormalizedUserName = source.NormalizedUserName;
            target.Email = source.Email;
            target.NormalizedEmail = source.NormalizedEmail;
            target.EmailConfirmed = source.EmailConfirmed;
            target.PasswordHash = source.PasswordHash;
            target.SecurityStamp = source.SecurityStamp;
            target.ConcurrencyStamp = source.ConcurrencyStamp;
            target.PhoneNumber = source.PhoneNumber;
            target.PhoneNumberConfirmed = source.PhoneNumberConfirmed;
            target.TwoFactorEnabled = source.TwoFactorEnabled;
            target.LockoutEnd = source.LockoutEnd;
            target.LockoutEnabled = source.LockoutEnabled;
            target.AccessFailedCount = source.AccessFailedCount;
            target.FirstName = source.FirstName;
            target.LastName = source.LastName;
            target.Suffix = source.Suffix;
            target.IsActive = source.IsActive;
            target.DateLastLogin = source.DateLastLogin;
            target.Email2 = source.Email2;
            target.Phone2 = source.Phone2;
            target.PreferredName = source.PreferredName;
            target.Creds = source.Creds;
            target.ProfilePicUrl = source.ProfilePicUrl;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AspNetUserDTO> ToDtos(this IEnumerable<AspNetUser> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AspNetUserDTO> ToDtosWithRelated(this IEnumerable<AspNetUser> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<AspNetUser> ToEntities(this IEnumerable<AspNetUserDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(AspNetUser source, AspNetUserDTO target);

        static partial void OnEntityCreating(AspNetUserDTO source, AspNetUser target);

    }

    public static partial class DocumentConverter
    {

        public static DocumentDTO ToDto(this Document source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static DocumentDTO ToDtoWithRelated(this Document source, int level)
        {
            if (source == null)
              return null;

            var target = new DocumentDTO();

            // Properties
            target.DocumentId = source.DocumentId;
            target.UserId = source.UserId;
            target.DocumentTypeId = source.DocumentTypeId;
            target.FileName = source.FileName;
            target.StoragePath = source.StoragePath;
            target.MimeType = source.MimeType;
            target.ExpirationDate = source.ExpirationDate;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;
            target.DateModified = source.DateModified;

            // Navigation Properties
            if (level > 0) {
              target.AspNetUser = source.AspNetUser.ToDtoWithRelated(level - 1);
              target.DocumentType = source.DocumentType.ToDtoWithRelated(level - 1);
              target.DocumentStateHistories = source.DocumentStateHistories.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Document ToEntity(this DocumentDTO source)
        {
            if (source == null)
              return null;

            var target = new Document();

            // Properties
            target.DocumentId = source.DocumentId;
            target.UserId = source.UserId;
            target.DocumentTypeId = source.DocumentTypeId;
            target.FileName = source.FileName;
            target.StoragePath = source.StoragePath;
            target.MimeType = source.MimeType;
            target.ExpirationDate = source.ExpirationDate;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;
            target.DateModified = source.DateModified;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<DocumentDTO> ToDtos(this IEnumerable<Document> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<DocumentDTO> ToDtosWithRelated(this IEnumerable<Document> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Document> ToEntities(this IEnumerable<DocumentDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Document source, DocumentDTO target);

        static partial void OnEntityCreating(DocumentDTO source, Document target);

    }

    public static partial class DocumentStateConverter
    {

        public static DocumentStateDTO ToDto(this DocumentState source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static DocumentStateDTO ToDtoWithRelated(this DocumentState source, int level)
        {
            if (source == null)
              return null;

            var target = new DocumentStateDTO();

            // Properties
            target.DocumentStateId = source.DocumentStateId;
            target.StateName = source.StateName;
            target.DateAdded = source.DateAdded;

            // Navigation Properties
            if (level > 0) {
              target.DocumentStateHistories = source.DocumentStateHistories.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static DocumentState ToEntity(this DocumentStateDTO source)
        {
            if (source == null)
              return null;

            var target = new DocumentState();

            // Properties
            target.DocumentStateId = source.DocumentStateId;
            target.StateName = source.StateName;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<DocumentStateDTO> ToDtos(this IEnumerable<DocumentState> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<DocumentStateDTO> ToDtosWithRelated(this IEnumerable<DocumentState> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<DocumentState> ToEntities(this IEnumerable<DocumentStateDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(DocumentState source, DocumentStateDTO target);

        static partial void OnEntityCreating(DocumentStateDTO source, DocumentState target);

    }

    public static partial class DocumentStateHistoryConverter
    {

        public static DocumentStateHistoryDTO ToDto(this DocumentStateHistory source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static DocumentStateHistoryDTO ToDtoWithRelated(this DocumentStateHistory source, int level)
        {
            if (source == null)
              return null;

            var target = new DocumentStateHistoryDTO();

            // Properties
            target.DocumentStateHistoryId = source.DocumentStateHistoryId;
            target.DocumentId = source.DocumentId;
            target.DocumentStateId = source.DocumentStateId;
            target.ActorUserId = source.ActorUserId;
            target.Notes = source.Notes;
            target.DateAdded = source.DateAdded;

            // Navigation Properties
            if (level > 0) {
              target.Document = source.Document.ToDtoWithRelated(level - 1);
              target.DocumentState = source.DocumentState.ToDtoWithRelated(level - 1);
              target.AspNetUser = source.AspNetUser.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static DocumentStateHistory ToEntity(this DocumentStateHistoryDTO source)
        {
            if (source == null)
              return null;

            var target = new DocumentStateHistory();

            // Properties
            target.DocumentStateHistoryId = source.DocumentStateHistoryId;
            target.DocumentId = source.DocumentId;
            target.DocumentStateId = source.DocumentStateId;
            target.ActorUserId = source.ActorUserId;
            target.Notes = source.Notes;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<DocumentStateHistoryDTO> ToDtos(this IEnumerable<DocumentStateHistory> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<DocumentStateHistoryDTO> ToDtosWithRelated(this IEnumerable<DocumentStateHistory> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<DocumentStateHistory> ToEntities(this IEnumerable<DocumentStateHistoryDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(DocumentStateHistory source, DocumentStateHistoryDTO target);

        static partial void OnEntityCreating(DocumentStateHistoryDTO source, DocumentStateHistory target);

    }

    public static partial class DocumentTypeConverter
    {

        public static DocumentTypeDTO ToDto(this DocumentType source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static DocumentTypeDTO ToDtoWithRelated(this DocumentType source, int level)
        {
            if (source == null)
              return null;

            var target = new DocumentTypeDTO();

            // Properties
            target.DocumentTypeId = source.DocumentTypeId;
            target.TypeName = source.TypeName;
            target.IsComplianceRequired = source.IsComplianceRequired;

            // Navigation Properties
            if (level > 0) {
              target.Documents = source.Documents.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static DocumentType ToEntity(this DocumentTypeDTO source)
        {
            if (source == null)
              return null;

            var target = new DocumentType();

            // Properties
            target.DocumentTypeId = source.DocumentTypeId;
            target.TypeName = source.TypeName;
            target.IsComplianceRequired = source.IsComplianceRequired;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<DocumentTypeDTO> ToDtos(this IEnumerable<DocumentType> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<DocumentTypeDTO> ToDtosWithRelated(this IEnumerable<DocumentType> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<DocumentType> ToEntities(this IEnumerable<DocumentTypeDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(DocumentType source, DocumentTypeDTO target);

        static partial void OnEntityCreating(DocumentTypeDTO source, DocumentType target);

    }

    public static partial class ManagerTechnicianAssignmentConverter
    {

        public static ManagerTechnicianAssignmentDTO ToDto(this ManagerTechnicianAssignment source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ManagerTechnicianAssignmentDTO ToDtoWithRelated(this ManagerTechnicianAssignment source, int level)
        {
            if (source == null)
              return null;

            var target = new ManagerTechnicianAssignmentDTO();

            // Properties
            target.ManagerUserId = source.ManagerUserId;
            target.TechnicianUserId = source.TechnicianUserId;
            target.DateAdded = source.DateAdded;

            // Navigation Properties
            if (level > 0) {
              target.AspNetUser_ManagerUserId = source.AspNetUser_ManagerUserId.ToDtoWithRelated(level - 1);
              target.AspNetUser_TechnicianUserId = source.AspNetUser_TechnicianUserId.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static ManagerTechnicianAssignment ToEntity(this ManagerTechnicianAssignmentDTO source)
        {
            if (source == null)
              return null;

            var target = new ManagerTechnicianAssignment();

            // Properties
            target.ManagerUserId = source.ManagerUserId;
            target.TechnicianUserId = source.TechnicianUserId;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ManagerTechnicianAssignmentDTO> ToDtos(this IEnumerable<ManagerTechnicianAssignment> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ManagerTechnicianAssignmentDTO> ToDtosWithRelated(this IEnumerable<ManagerTechnicianAssignment> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<ManagerTechnicianAssignment> ToEntities(this IEnumerable<ManagerTechnicianAssignmentDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(ManagerTechnicianAssignment source, ManagerTechnicianAssignmentDTO target);

        static partial void OnEntityCreating(ManagerTechnicianAssignmentDTO source, ManagerTechnicianAssignment target);

    }

    public static partial class ModuleConverter
    {

        public static ModuleDTO ToDto(this Module source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ModuleDTO ToDtoWithRelated(this Module source, int level)
        {
            if (source == null)
              return null;

            var target = new ModuleDTO();

            // Properties
            target.ModuleId = source.ModuleId;
            target.ModuleName = source.ModuleName;

            // Navigation Properties
            if (level > 0) {
              target.AspNetRoles = source.AspNetRoles.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Module ToEntity(this ModuleDTO source)
        {
            if (source == null)
              return null;

            var target = new Module();

            // Properties
            target.ModuleId = source.ModuleId;
            target.ModuleName = source.ModuleName;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ModuleDTO> ToDtos(this IEnumerable<Module> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ModuleDTO> ToDtosWithRelated(this IEnumerable<Module> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Module> ToEntities(this IEnumerable<ModuleDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Module source, ModuleDTO target);

        static partial void OnEntityCreating(ModuleDTO source, Module target);

    }

    public static partial class NotificationConverter
    {

        public static NotificationDTO ToDto(this Notification source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static NotificationDTO ToDtoWithRelated(this Notification source, int level)
        {
            if (source == null)
              return null;

            var target = new NotificationDTO();

            // Properties
            target.NotificationId = source.NotificationId;
            target.UserId = source.UserId;
            target.Channel = source.Channel;
            target.Subject = source.Subject;
            target.Message = source.Message;
            target.IsRead = source.IsRead;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // Navigation Properties
            if (level > 0) {
              target.AspNetUser = source.AspNetUser.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Notification ToEntity(this NotificationDTO source)
        {
            if (source == null)
              return null;

            var target = new Notification();

            // Properties
            target.NotificationId = source.NotificationId;
            target.UserId = source.UserId;
            target.Channel = source.Channel;
            target.Subject = source.Subject;
            target.Message = source.Message;
            target.IsRead = source.IsRead;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<NotificationDTO> ToDtos(this IEnumerable<Notification> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<NotificationDTO> ToDtosWithRelated(this IEnumerable<Notification> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Notification> ToEntities(this IEnumerable<NotificationDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Notification source, NotificationDTO target);

        static partial void OnEntityCreating(NotificationDTO source, Notification target);

    }

    public static partial class PaymentLogConverter
    {

        public static PaymentLogDTO ToDto(this PaymentLog source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static PaymentLogDTO ToDtoWithRelated(this PaymentLog source, int level)
        {
            if (source == null)
              return null;

            var target = new PaymentLogDTO();

            // Properties
            target.PaymentLogId = source.PaymentLogId;
            target.TechnicianUserId = source.TechnicianUserId;
            target.Amount = source.Amount;
            target.PaymentDate = source.PaymentDate;
            target.JobId = source.JobId;
            target.Notes = source.Notes;
            target.RecordedByUserId = source.RecordedByUserId;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // Navigation Properties
            if (level > 0) {
              target.AspNetUser_TechnicianUserId = source.AspNetUser_TechnicianUserId.ToDtoWithRelated(level - 1);
              target.AspNetUser_RecordedByUserId = source.AspNetUser_RecordedByUserId.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static PaymentLog ToEntity(this PaymentLogDTO source)
        {
            if (source == null)
              return null;

            var target = new PaymentLog();

            // Properties
            target.PaymentLogId = source.PaymentLogId;
            target.TechnicianUserId = source.TechnicianUserId;
            target.Amount = source.Amount;
            target.PaymentDate = source.PaymentDate;
            target.JobId = source.JobId;
            target.Notes = source.Notes;
            target.RecordedByUserId = source.RecordedByUserId;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<PaymentLogDTO> ToDtos(this IEnumerable<PaymentLog> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<PaymentLogDTO> ToDtosWithRelated(this IEnumerable<PaymentLog> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<PaymentLog> ToEntities(this IEnumerable<PaymentLogDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(PaymentLog source, PaymentLogDTO target);

        static partial void OnEntityCreating(PaymentLogDTO source, PaymentLog target);

    }

    public static partial class ProfileNoteConverter
    {

        public static ProfileNoteDTO ToDto(this ProfileNote source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ProfileNoteDTO ToDtoWithRelated(this ProfileNote source, int level)
        {
            if (source == null)
              return null;

            var target = new ProfileNoteDTO();

            // Properties
            target.NoteId = source.NoteId;
            target.TechnicianUserId = source.TechnicianUserId;
            target.AuthorUserId = source.AuthorUserId;
            target.NoteText = source.NoteText;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // Navigation Properties
            if (level > 0) {
              target.AspNetUser_TechnicianUserId = source.AspNetUser_TechnicianUserId.ToDtoWithRelated(level - 1);
              target.AspNetUser_AuthorUserId = source.AspNetUser_AuthorUserId.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static ProfileNote ToEntity(this ProfileNoteDTO source)
        {
            if (source == null)
              return null;

            var target = new ProfileNote();

            // Properties
            target.NoteId = source.NoteId;
            target.TechnicianUserId = source.TechnicianUserId;
            target.AuthorUserId = source.AuthorUserId;
            target.NoteText = source.NoteText;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ProfileNoteDTO> ToDtos(this IEnumerable<ProfileNote> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ProfileNoteDTO> ToDtosWithRelated(this IEnumerable<ProfileNote> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<ProfileNote> ToEntities(this IEnumerable<ProfileNoteDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(ProfileNote source, ProfileNoteDTO target);

        static partial void OnEntityCreating(ProfileNoteDTO source, ProfileNote target);

    }

    public static partial class TechnicianProfileConverter
    {

        public static TechnicianProfileDTO ToDto(this TechnicianProfile source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static TechnicianProfileDTO ToDtoWithRelated(this TechnicianProfile source, int level)
        {
            if (source == null)
              return null;

            var target = new TechnicianProfileDTO();

            // Properties
            target.TechnicianId = source.TechnicianId;
            target.AvailabilityStatus = source.AvailabilityStatus;
            target.PayRate = source.PayRate;
            target.ProfileReadinessPercent = source.ProfileReadinessPercent;
            target.DateAdded = source.DateAdded;
            target.DateModified = source.DateModified;

            // Navigation Properties
            if (level > 0) {
              target.AspNetUser = source.AspNetUser.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static TechnicianProfile ToEntity(this TechnicianProfileDTO source)
        {
            if (source == null)
              return null;

            var target = new TechnicianProfile();

            // Properties
            target.TechnicianId = source.TechnicianId;
            target.AvailabilityStatus = source.AvailabilityStatus;
            target.PayRate = source.PayRate;
            target.ProfileReadinessPercent = source.ProfileReadinessPercent;
            target.DateAdded = source.DateAdded;
            target.DateModified = source.DateModified;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TechnicianProfileDTO> ToDtos(this IEnumerable<TechnicianProfile> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TechnicianProfileDTO> ToDtosWithRelated(this IEnumerable<TechnicianProfile> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<TechnicianProfile> ToEntities(this IEnumerable<TechnicianProfileDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(TechnicianProfile source, TechnicianProfileDTO target);

        static partial void OnEntityCreating(TechnicianProfileDTO source, TechnicianProfile target);

    }

    public static partial class UserAgreementConverter
    {

        public static UserAgreementDTO ToDto(this UserAgreement source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static UserAgreementDTO ToDtoWithRelated(this UserAgreement source, int level)
        {
            if (source == null)
              return null;

            var target = new UserAgreementDTO();

            // Properties
            target.UserAgreementId = source.UserAgreementId;
            target.UserId = source.UserId;
            target.AgreementName = source.AgreementName;
            target.DateAdded = source.DateAdded;

            // Navigation Properties
            if (level > 0) {
              target.AspNetUser = source.AspNetUser.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static UserAgreement ToEntity(this UserAgreementDTO source)
        {
            if (source == null)
              return null;

            var target = new UserAgreement();

            // Properties
            target.UserAgreementId = source.UserAgreementId;
            target.UserId = source.UserId;
            target.AgreementName = source.AgreementName;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UserAgreementDTO> ToDtos(this IEnumerable<UserAgreement> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UserAgreementDTO> ToDtosWithRelated(this IEnumerable<UserAgreement> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<UserAgreement> ToEntities(this IEnumerable<UserAgreementDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(UserAgreement source, UserAgreementDTO target);

        static partial void OnEntityCreating(UserAgreementDTO source, UserAgreement target);

    }

    public static partial class W9DataConverter
    {

        public static W9DataDTO ToDto(this W9Data source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static W9DataDTO ToDtoWithRelated(this W9Data source, int level)
        {
            if (source == null)
              return null;

            var target = new W9DataDTO();

            // Properties
            target.W9DataId = source.W9DataId;
            target.UserId = source.UserId;
            target.TaxYear = source.TaxYear;
            target.IsActive = source.IsActive;
            target.FullName = source.FullName;
            target.BusinessName = source.BusinessName;
            target.TaxClassification = source.TaxClassification;
            target.AddressStreet = source.AddressStreet;
            target.AddressCityStateZip = source.AddressCityStateZip;
            target.TaxIDNumberEncrypted = source.TaxIDNumberEncrypted;
            target.DateAdded = source.DateAdded;
            target.DateModified = source.DateModified;

            // Navigation Properties
            if (level > 0) {
              target.AspNetUser = source.AspNetUser.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static W9Data ToEntity(this W9DataDTO source)
        {
            if (source == null)
              return null;

            var target = new W9Data();

            // Properties
            target.W9DataId = source.W9DataId;
            target.UserId = source.UserId;
            target.TaxYear = source.TaxYear;
            target.IsActive = source.IsActive;
            target.FullName = source.FullName;
            target.BusinessName = source.BusinessName;
            target.TaxClassification = source.TaxClassification;
            target.AddressStreet = source.AddressStreet;
            target.AddressCityStateZip = source.AddressCityStateZip;
            target.TaxIDNumberEncrypted = source.TaxIDNumberEncrypted;
            target.DateAdded = source.DateAdded;
            target.DateModified = source.DateModified;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<W9DataDTO> ToDtos(this IEnumerable<W9Data> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<W9DataDTO> ToDtosWithRelated(this IEnumerable<W9Data> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<W9Data> ToEntities(this IEnumerable<W9DataDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(W9Data source, W9DataDTO target);

        static partial void OnEntityCreating(W9DataDTO source, W9Data target);

    }

    public static partial class DocumentViewConverter
    {

        public static DocumentViewDTO ToDto(this DocumentView source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static DocumentViewDTO ToDtoWithRelated(this DocumentView source, int level)
        {
            if (source == null)
              return null;

            var target = new DocumentViewDTO();

            // Properties
            target.DocumentID = source.DocumentID;
            target.UserID = source.UserID;
            target.UserFullName = source.UserFullName;
            target.DocumentTypeID = source.DocumentTypeID;
            target.DocumentTypeName = source.DocumentTypeName;
            target.FileName = source.FileName;
            target.StoragePath = source.StoragePath;
            target.MimeType = source.MimeType;
            target.ExpirationDate = source.ExpirationDate;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;
            target.DateModified = source.DateModified;
            target.CurrentStateName = source.CurrentStateName;
            target.CurrentStateDateAdded = source.CurrentStateDateAdded;
            target.CurrentStateActorFullName = source.CurrentStateActorFullName;
            target.CurrentStateNotes = source.CurrentStateNotes;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static DocumentView ToEntity(this DocumentViewDTO source)
        {
            if (source == null)
              return null;

            var target = new DocumentView();

            // Properties
            target.DocumentID = source.DocumentID;
            target.UserID = source.UserID;
            target.UserFullName = source.UserFullName;
            target.DocumentTypeID = source.DocumentTypeID;
            target.DocumentTypeName = source.DocumentTypeName;
            target.FileName = source.FileName;
            target.StoragePath = source.StoragePath;
            target.MimeType = source.MimeType;
            target.ExpirationDate = source.ExpirationDate;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;
            target.DateModified = source.DateModified;
            target.CurrentStateName = source.CurrentStateName;
            target.CurrentStateDateAdded = source.CurrentStateDateAdded;
            target.CurrentStateActorFullName = source.CurrentStateActorFullName;
            target.CurrentStateNotes = source.CurrentStateNotes;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<DocumentViewDTO> ToDtos(this IEnumerable<DocumentView> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<DocumentViewDTO> ToDtosWithRelated(this IEnumerable<DocumentView> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<DocumentView> ToEntities(this IEnumerable<DocumentViewDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(DocumentView source, DocumentViewDTO target);

        static partial void OnEntityCreating(DocumentViewDTO source, DocumentView target);

    }

    public static partial class NotificationViewConverter
    {

        public static NotificationViewDTO ToDto(this NotificationView source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static NotificationViewDTO ToDtoWithRelated(this NotificationView source, int level)
        {
            if (source == null)
              return null;

            var target = new NotificationViewDTO();

            // Properties
            target.NotificationID = source.NotificationID;
            target.UserID = source.UserID;
            target.UserFullName = source.UserFullName;
            target.Channel = source.Channel;
            target.Subject = source.Subject;
            target.Message = source.Message;
            target.IsRead = source.IsRead;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static NotificationView ToEntity(this NotificationViewDTO source)
        {
            if (source == null)
              return null;

            var target = new NotificationView();

            // Properties
            target.NotificationID = source.NotificationID;
            target.UserID = source.UserID;
            target.UserFullName = source.UserFullName;
            target.Channel = source.Channel;
            target.Subject = source.Subject;
            target.Message = source.Message;
            target.IsRead = source.IsRead;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<NotificationViewDTO> ToDtos(this IEnumerable<NotificationView> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<NotificationViewDTO> ToDtosWithRelated(this IEnumerable<NotificationView> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<NotificationView> ToEntities(this IEnumerable<NotificationViewDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(NotificationView source, NotificationViewDTO target);

        static partial void OnEntityCreating(NotificationViewDTO source, NotificationView target);

    }

    public static partial class PaymentLogViewConverter
    {

        public static PaymentLogViewDTO ToDto(this PaymentLogView source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static PaymentLogViewDTO ToDtoWithRelated(this PaymentLogView source, int level)
        {
            if (source == null)
              return null;

            var target = new PaymentLogViewDTO();

            // Properties
            target.PaymentLogID = source.PaymentLogID;
            target.TechnicianUserID = source.TechnicianUserID;
            target.TechnicianFullName = source.TechnicianFullName;
            target.Amount = source.Amount;
            target.PaymentDate = source.PaymentDate;
            target.JobID = source.JobID;
            target.Notes = source.Notes;
            target.RecordedByUserID = source.RecordedByUserID;
            target.RecordedByFullName = source.RecordedByFullName;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static PaymentLogView ToEntity(this PaymentLogViewDTO source)
        {
            if (source == null)
              return null;

            var target = new PaymentLogView();

            // Properties
            target.PaymentLogID = source.PaymentLogID;
            target.TechnicianUserID = source.TechnicianUserID;
            target.TechnicianFullName = source.TechnicianFullName;
            target.Amount = source.Amount;
            target.PaymentDate = source.PaymentDate;
            target.JobID = source.JobID;
            target.Notes = source.Notes;
            target.RecordedByUserID = source.RecordedByUserID;
            target.RecordedByFullName = source.RecordedByFullName;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<PaymentLogViewDTO> ToDtos(this IEnumerable<PaymentLogView> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<PaymentLogViewDTO> ToDtosWithRelated(this IEnumerable<PaymentLogView> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<PaymentLogView> ToEntities(this IEnumerable<PaymentLogViewDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(PaymentLogView source, PaymentLogViewDTO target);

        static partial void OnEntityCreating(PaymentLogViewDTO source, PaymentLogView target);

    }

    public static partial class ProfileNoteViewConverter
    {

        public static ProfileNoteViewDTO ToDto(this ProfileNoteView source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ProfileNoteViewDTO ToDtoWithRelated(this ProfileNoteView source, int level)
        {
            if (source == null)
              return null;

            var target = new ProfileNoteViewDTO();

            // Properties
            target.NoteID = source.NoteID;
            target.TechnicianUserID = source.TechnicianUserID;
            target.TechnicianFullName = source.TechnicianFullName;
            target.AuthorUserID = source.AuthorUserID;
            target.AuthorFullName = source.AuthorFullName;
            target.NoteText = source.NoteText;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static ProfileNoteView ToEntity(this ProfileNoteViewDTO source)
        {
            if (source == null)
              return null;

            var target = new ProfileNoteView();

            // Properties
            target.NoteID = source.NoteID;
            target.TechnicianUserID = source.TechnicianUserID;
            target.TechnicianFullName = source.TechnicianFullName;
            target.AuthorUserID = source.AuthorUserID;
            target.AuthorFullName = source.AuthorFullName;
            target.NoteText = source.NoteText;
            target.IsActive = source.IsActive;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ProfileNoteViewDTO> ToDtos(this IEnumerable<ProfileNoteView> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ProfileNoteViewDTO> ToDtosWithRelated(this IEnumerable<ProfileNoteView> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<ProfileNoteView> ToEntities(this IEnumerable<ProfileNoteViewDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(ProfileNoteView source, ProfileNoteViewDTO target);

        static partial void OnEntityCreating(ProfileNoteViewDTO source, ProfileNoteView target);

    }

    public static partial class RoleAllowedModuleConverter
    {

        public static RoleAllowedModuleDTO ToDto(this RoleAllowedModule source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static RoleAllowedModuleDTO ToDtoWithRelated(this RoleAllowedModule source, int level)
        {
            if (source == null)
              return null;

            var target = new RoleAllowedModuleDTO();

            // Properties
            target.RoleId = source.RoleId;
            target.RoleName = source.RoleName;
            target.ModuleId = source.ModuleId;
            target.ModuleName = source.ModuleName;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static RoleAllowedModule ToEntity(this RoleAllowedModuleDTO source)
        {
            if (source == null)
              return null;

            var target = new RoleAllowedModule();

            // Properties
            target.RoleId = source.RoleId;
            target.RoleName = source.RoleName;
            target.ModuleId = source.ModuleId;
            target.ModuleName = source.ModuleName;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<RoleAllowedModuleDTO> ToDtos(this IEnumerable<RoleAllowedModule> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<RoleAllowedModuleDTO> ToDtosWithRelated(this IEnumerable<RoleAllowedModule> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<RoleAllowedModule> ToEntities(this IEnumerable<RoleAllowedModuleDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(RoleAllowedModule source, RoleAllowedModuleDTO target);

        static partial void OnEntityCreating(RoleAllowedModuleDTO source, RoleAllowedModule target);

    }

    public static partial class RolesViewConverter
    {

        public static RolesViewDTO ToDto(this RolesView source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static RolesViewDTO ToDtoWithRelated(this RolesView source, int level)
        {
            if (source == null)
              return null;

            var target = new RolesViewDTO();

            // Properties
            target.Id = source.Id;
            target.Name = source.Name;
            target.NormalizedName = source.NormalizedName;
            target.Description = source.Description;
            target.UserCount = source.UserCount;
            target.AllowedModules = source.AllowedModules;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static RolesView ToEntity(this RolesViewDTO source)
        {
            if (source == null)
              return null;

            var target = new RolesView();

            // Properties
            target.Id = source.Id;
            target.Name = source.Name;
            target.NormalizedName = source.NormalizedName;
            target.Description = source.Description;
            target.UserCount = source.UserCount;
            target.AllowedModules = source.AllowedModules;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<RolesViewDTO> ToDtos(this IEnumerable<RolesView> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<RolesViewDTO> ToDtosWithRelated(this IEnumerable<RolesView> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<RolesView> ToEntities(this IEnumerable<RolesViewDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(RolesView source, RolesViewDTO target);

        static partial void OnEntityCreating(RolesViewDTO source, RolesView target);

    }

    public static partial class TechnicianRosterViewConverter
    {

        public static TechnicianRosterViewDTO ToDto(this TechnicianRosterView source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static TechnicianRosterViewDTO ToDtoWithRelated(this TechnicianRosterView source, int level)
        {
            if (source == null)
              return null;

            var target = new TechnicianRosterViewDTO();

            // Properties
            target.UserID = source.UserID;
            target.FirstName = source.FirstName;
            target.LastName = source.LastName;
            target.FullName = source.FullName;
            target.Email = source.Email;
            target.PhoneNumber = source.PhoneNumber;
            target.ProfilePictureUrl = source.ProfilePictureUrl;
            target.AvailabilityStatus = source.AvailabilityStatus;
            target.ComplianceStatus = source.ComplianceStatus;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static TechnicianRosterView ToEntity(this TechnicianRosterViewDTO source)
        {
            if (source == null)
              return null;

            var target = new TechnicianRosterView();

            // Properties
            target.UserID = source.UserID;
            target.FirstName = source.FirstName;
            target.LastName = source.LastName;
            target.FullName = source.FullName;
            target.Email = source.Email;
            target.PhoneNumber = source.PhoneNumber;
            target.ProfilePictureUrl = source.ProfilePictureUrl;
            target.AvailabilityStatus = source.AvailabilityStatus;
            target.ComplianceStatus = source.ComplianceStatus;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TechnicianRosterViewDTO> ToDtos(this IEnumerable<TechnicianRosterView> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TechnicianRosterViewDTO> ToDtosWithRelated(this IEnumerable<TechnicianRosterView> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<TechnicianRosterView> ToEntities(this IEnumerable<TechnicianRosterViewDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(TechnicianRosterView source, TechnicianRosterViewDTO target);

        static partial void OnEntityCreating(TechnicianRosterViewDTO source, TechnicianRosterView target);

    }

    public static partial class TechnicianViewConverter
    {

        public static TechnicianViewDTO ToDto(this TechnicianView source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static TechnicianViewDTO ToDtoWithRelated(this TechnicianView source, int level)
        {
            if (source == null)
              return null;

            var target = new TechnicianViewDTO();

            // Properties
            target.UserID = source.UserID;
            target.RoleID = source.RoleID;
            target.RoleName = source.RoleName;
            target.Email = source.Email;
            target.FirstName = source.FirstName;
            target.LastName = source.LastName;
            target.FullName = source.FullName;
            target.PhoneNumber = source.PhoneNumber;
            target.ProfilePictureUrl = source.ProfilePictureUrl;
            target.IsActive = source.IsActive;
            target.UserName = source.UserName;
            target.AddressID = source.AddressID;
            target.AddressType = source.AddressType;
            target.AddressLine1 = source.AddressLine1;
            target.AddressLine2 = source.AddressLine2;
            target.City = source.City;
            target.State = source.State;
            target.ZipCode = source.ZipCode;
            target.Country = source.Country;
            target.AvailabilityStatus = source.AvailabilityStatus;
            target.PayRate = source.PayRate;
            target.ProfileReadinessPercent = source.ProfileReadinessPercent;
            target.ProfileDateAdded = source.ProfileDateAdded;
            target.ProfileDateModified = source.ProfileDateModified;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static TechnicianView ToEntity(this TechnicianViewDTO source)
        {
            if (source == null)
              return null;

            var target = new TechnicianView();

            // Properties
            target.UserID = source.UserID;
            target.RoleID = source.RoleID;
            target.RoleName = source.RoleName;
            target.Email = source.Email;
            target.FirstName = source.FirstName;
            target.LastName = source.LastName;
            target.FullName = source.FullName;
            target.PhoneNumber = source.PhoneNumber;
            target.ProfilePictureUrl = source.ProfilePictureUrl;
            target.IsActive = source.IsActive;
            target.UserName = source.UserName;
            target.AddressID = source.AddressID;
            target.AddressType = source.AddressType;
            target.AddressLine1 = source.AddressLine1;
            target.AddressLine2 = source.AddressLine2;
            target.City = source.City;
            target.State = source.State;
            target.ZipCode = source.ZipCode;
            target.Country = source.Country;
            target.AvailabilityStatus = source.AvailabilityStatus;
            target.PayRate = source.PayRate;
            target.ProfileReadinessPercent = source.ProfileReadinessPercent;
            target.ProfileDateAdded = source.ProfileDateAdded;
            target.ProfileDateModified = source.ProfileDateModified;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TechnicianViewDTO> ToDtos(this IEnumerable<TechnicianView> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TechnicianViewDTO> ToDtosWithRelated(this IEnumerable<TechnicianView> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<TechnicianView> ToEntities(this IEnumerable<TechnicianViewDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(TechnicianView source, TechnicianViewDTO target);

        static partial void OnEntityCreating(TechnicianViewDTO source, TechnicianView target);

    }

    public static partial class UserAgreementViewConverter
    {

        public static UserAgreementViewDTO ToDto(this UserAgreementView source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static UserAgreementViewDTO ToDtoWithRelated(this UserAgreementView source, int level)
        {
            if (source == null)
              return null;

            var target = new UserAgreementViewDTO();

            // Properties
            target.UserAgreementID = source.UserAgreementID;
            target.UserID = source.UserID;
            target.UserFullName = source.UserFullName;
            target.AgreementName = source.AgreementName;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static UserAgreementView ToEntity(this UserAgreementViewDTO source)
        {
            if (source == null)
              return null;

            var target = new UserAgreementView();

            // Properties
            target.UserAgreementID = source.UserAgreementID;
            target.UserID = source.UserID;
            target.UserFullName = source.UserFullName;
            target.AgreementName = source.AgreementName;
            target.DateAdded = source.DateAdded;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UserAgreementViewDTO> ToDtos(this IEnumerable<UserAgreementView> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UserAgreementViewDTO> ToDtosWithRelated(this IEnumerable<UserAgreementView> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<UserAgreementView> ToEntities(this IEnumerable<UserAgreementViewDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(UserAgreementView source, UserAgreementViewDTO target);

        static partial void OnEntityCreating(UserAgreementViewDTO source, UserAgreementView target);

    }

    public static partial class UserAllowedModuleConverter
    {

        public static UserAllowedModuleDTO ToDto(this UserAllowedModule source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static UserAllowedModuleDTO ToDtoWithRelated(this UserAllowedModule source, int level)
        {
            if (source == null)
              return null;

            var target = new UserAllowedModuleDTO();

            // Properties
            target.UserId = source.UserId;
            target.UserName = source.UserName;
            target.ModuleId = source.ModuleId;
            target.ModuleName = source.ModuleName;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static UserAllowedModule ToEntity(this UserAllowedModuleDTO source)
        {
            if (source == null)
              return null;

            var target = new UserAllowedModule();

            // Properties
            target.UserId = source.UserId;
            target.UserName = source.UserName;
            target.ModuleId = source.ModuleId;
            target.ModuleName = source.ModuleName;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UserAllowedModuleDTO> ToDtos(this IEnumerable<UserAllowedModule> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UserAllowedModuleDTO> ToDtosWithRelated(this IEnumerable<UserAllowedModule> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<UserAllowedModule> ToEntities(this IEnumerable<UserAllowedModuleDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(UserAllowedModule source, UserAllowedModuleDTO target);

        static partial void OnEntityCreating(UserAllowedModuleDTO source, UserAllowedModule target);

    }

    public static partial class UserViewConverter
    {

        public static UserViewDTO ToDto(this UserView source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static UserViewDTO ToDtoWithRelated(this UserView source, int level)
        {
            if (source == null)
              return null;

            var target = new UserViewDTO();

            // Properties
            target.UserID = source.UserID;
            target.RoleID = source.RoleID;
            target.RoleName = source.RoleName;
            target.Email = source.Email;
            target.FirstName = source.FirstName;
            target.LastName = source.LastName;
            target.FullName = source.FullName;
            target.PhoneNumber = source.PhoneNumber;
            target.ProfilePictureUrl = source.ProfilePictureUrl;
            target.IsActive = source.IsActive;
            target.UserName = source.UserName;
            target.AddressID = source.AddressID;
            target.AddressType = source.AddressType;
            target.AddressLine1 = source.AddressLine1;
            target.AddressLine2 = source.AddressLine2;
            target.City = source.City;
            target.State = source.State;
            target.ZipCode = source.ZipCode;
            target.Country = source.Country;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static UserView ToEntity(this UserViewDTO source)
        {
            if (source == null)
              return null;

            var target = new UserView();

            // Properties
            target.UserID = source.UserID;
            target.RoleID = source.RoleID;
            target.RoleName = source.RoleName;
            target.Email = source.Email;
            target.FirstName = source.FirstName;
            target.LastName = source.LastName;
            target.FullName = source.FullName;
            target.PhoneNumber = source.PhoneNumber;
            target.ProfilePictureUrl = source.ProfilePictureUrl;
            target.IsActive = source.IsActive;
            target.UserName = source.UserName;
            target.AddressID = source.AddressID;
            target.AddressType = source.AddressType;
            target.AddressLine1 = source.AddressLine1;
            target.AddressLine2 = source.AddressLine2;
            target.City = source.City;
            target.State = source.State;
            target.ZipCode = source.ZipCode;
            target.Country = source.Country;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UserViewDTO> ToDtos(this IEnumerable<UserView> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UserViewDTO> ToDtosWithRelated(this IEnumerable<UserView> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<UserView> ToEntities(this IEnumerable<UserViewDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(UserView source, UserViewDTO target);

        static partial void OnEntityCreating(UserViewDTO source, UserView target);

    }

    public static partial class W9DataViewConverter
    {

        public static W9DataViewDTO ToDto(this W9DataView source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static W9DataViewDTO ToDtoWithRelated(this W9DataView source, int level)
        {
            if (source == null)
              return null;

            var target = new W9DataViewDTO();

            // Properties
            target.W9DataID = source.W9DataID;
            target.UserID = source.UserID;
            target.UserFullName = source.UserFullName;
            target.TaxYear = source.TaxYear;
            target.IsActive = source.IsActive;
            target.FullName = source.FullName;
            target.BusinessName = source.BusinessName;
            target.TaxClassification = source.TaxClassification;
            target.AddressStreet = source.AddressStreet;
            target.AddressCityStateZip = source.AddressCityStateZip;
            target.DateAdded = source.DateAdded;
            target.DateModified = source.DateModified;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static W9DataView ToEntity(this W9DataViewDTO source)
        {
            if (source == null)
              return null;

            var target = new W9DataView();

            // Properties
            target.W9DataID = source.W9DataID;
            target.UserID = source.UserID;
            target.UserFullName = source.UserFullName;
            target.TaxYear = source.TaxYear;
            target.IsActive = source.IsActive;
            target.FullName = source.FullName;
            target.BusinessName = source.BusinessName;
            target.TaxClassification = source.TaxClassification;
            target.AddressStreet = source.AddressStreet;
            target.AddressCityStateZip = source.AddressCityStateZip;
            target.DateAdded = source.DateAdded;
            target.DateModified = source.DateModified;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<W9DataViewDTO> ToDtos(this IEnumerable<W9DataView> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<W9DataViewDTO> ToDtosWithRelated(this IEnumerable<W9DataView> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<W9DataView> ToEntities(this IEnumerable<W9DataViewDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(W9DataView source, W9DataViewDTO target);

        static partial void OnEntityCreating(W9DataViewDTO source, W9DataView target);

    }

}

================
File: xdent-ops-dotnet-backend/Models/_ENTDEV/XDentOpsAPI.DTOs.cs
================
//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 6/28/2025 8:27:10 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace XDentOpsAPI.Models.Data
{

    public partial class AppSettingDTO
    {
        #region Constructors

        public AppSettingDTO() {
        }

        public AppSettingDTO(int appSettingId, string key, string value, System.DateTime dateAdded, string userAddedId, System.DateTime? dateModified, string userModifiedId) {

          this.AppSettingId = appSettingId;
          this.Key = key;
          this.Value = value;
          this.DateAdded = dateAdded;
          this.UserAddedId = userAddedId;
          this.DateModified = dateModified;
          this.UserModifiedId = userModifiedId;
        }

        #endregion

        #region Properties

        public int AppSettingId { get; set; }

        public string Key { get; set; }

        public string Value { get; set; }

        public System.DateTime DateAdded { get; set; }

        public string UserAddedId { get; set; }

        public System.DateTime? DateModified { get; set; }

        public string UserModifiedId { get; set; }

        #endregion
    }

    public partial class AspNetRoleDTO
    {
        #region Constructors

        public AspNetRoleDTO() {
        }

        public AspNetRoleDTO(string id, string name, string normalizedName, string concurrencyStamp, string description, List<AspNetUserDTO> aspNetUsers, List<ModuleDTO> modules) {

          this.Id = id;
          this.Name = name;
          this.NormalizedName = normalizedName;
          this.ConcurrencyStamp = concurrencyStamp;
          this.Description = description;
          this.AspNetUsers = aspNetUsers;
          this.Modules = modules;
        }

        #endregion

        #region Properties

        public string Id { get; set; }

        public string Name { get; set; }

        public string NormalizedName { get; set; }

        public string ConcurrencyStamp { get; set; }

        public string Description { get; set; }

        #endregion

        #region Navigation Properties

        public List<AspNetUserDTO> AspNetUsers { get; set; }

        public List<ModuleDTO> Modules { get; set; }

        #endregion
    }

    public partial class AspNetUserDTO
    {
        #region Constructors

        public AspNetUserDTO() {
        }

        public AspNetUserDTO(string id, string userName, string normalizedUserName, string email, string normalizedEmail, bool emailConfirmed, string passwordHash, string securityStamp, string concurrencyStamp, string phoneNumber, bool phoneNumberConfirmed, bool twoFactorEnabled, System.DateTimeOffset? lockoutEnd, bool lockoutEnabled, int accessFailedCount, string firstName, string lastName, string suffix, bool isActive, System.DateTime? dateLastLogin, string email2, string phone2, string preferredName, string creds, string profilePicUrl, List<DocumentDTO> documents, List<DocumentStateHistoryDTO> documentStateHistories, List<ManagerTechnicianAssignmentDTO> managerTechnicianAssignments_ManagerUserId, List<ManagerTechnicianAssignmentDTO> managerTechnicianAssignments_TechnicianUserId, List<NotificationDTO> notifications, List<PaymentLogDTO> paymentLogs_TechnicianUserId, List<PaymentLogDTO> paymentLogs_RecordedByUserId, List<ProfileNoteDTO> profileNotes_TechnicianUserId, List<ProfileNoteDTO> profileNotes_AuthorUserId, TechnicianProfileDTO technicianProfile, List<UserAgreementDTO> userAgreements, List<W9DataDTO> w9Datas, List<AspNetRoleDTO> aspNetRoles) {

          this.Id = id;
          this.UserName = userName;
          this.NormalizedUserName = normalizedUserName;
          this.Email = email;
          this.NormalizedEmail = normalizedEmail;
          this.EmailConfirmed = emailConfirmed;
          this.PasswordHash = passwordHash;
          this.SecurityStamp = securityStamp;
          this.ConcurrencyStamp = concurrencyStamp;
          this.PhoneNumber = phoneNumber;
          this.PhoneNumberConfirmed = phoneNumberConfirmed;
          this.TwoFactorEnabled = twoFactorEnabled;
          this.LockoutEnd = lockoutEnd;
          this.LockoutEnabled = lockoutEnabled;
          this.AccessFailedCount = accessFailedCount;
          this.FirstName = firstName;
          this.LastName = lastName;
          this.Suffix = suffix;
          this.IsActive = isActive;
          this.DateLastLogin = dateLastLogin;
          this.Email2 = email2;
          this.Phone2 = phone2;
          this.PreferredName = preferredName;
          this.Creds = creds;
          this.ProfilePicUrl = profilePicUrl;
          this.Documents = documents;
          this.DocumentStateHistories = documentStateHistories;
          this.ManagerTechnicianAssignments_ManagerUserId = managerTechnicianAssignments_ManagerUserId;
          this.ManagerTechnicianAssignments_TechnicianUserId = managerTechnicianAssignments_TechnicianUserId;
          this.Notifications = notifications;
          this.PaymentLogs_TechnicianUserId = paymentLogs_TechnicianUserId;
          this.PaymentLogs_RecordedByUserId = paymentLogs_RecordedByUserId;
          this.ProfileNotes_TechnicianUserId = profileNotes_TechnicianUserId;
          this.ProfileNotes_AuthorUserId = profileNotes_AuthorUserId;
          this.TechnicianProfile = technicianProfile;
          this.UserAgreements = userAgreements;
          this.W9Datas = w9Datas;
          this.AspNetRoles = aspNetRoles;
        }

        #endregion

        #region Properties

        public string Id { get; set; }

        public string UserName { get; set; }

        public string NormalizedUserName { get; set; }

        public string Email { get; set; }

        public string NormalizedEmail { get; set; }

        public bool EmailConfirmed { get; set; }

        public string PasswordHash { get; set; }

        public string SecurityStamp { get; set; }

        public string ConcurrencyStamp { get; set; }

        public string PhoneNumber { get; set; }

        public bool PhoneNumberConfirmed { get; set; }

        public bool TwoFactorEnabled { get; set; }

        public System.DateTimeOffset? LockoutEnd { get; set; }

        public bool LockoutEnabled { get; set; }

        public int AccessFailedCount { get; set; }

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string Suffix { get; set; }

        public bool IsActive { get; set; }

        public System.DateTime? DateLastLogin { get; set; }

        public string Email2 { get; set; }

        public string Phone2 { get; set; }

        public string PreferredName { get; set; }

        public string Creds { get; set; }

        public string ProfilePicUrl { get; set; }

        #endregion

        #region Navigation Properties

        public List<DocumentDTO> Documents { get; set; }

        public List<DocumentStateHistoryDTO> DocumentStateHistories { get; set; }

        public List<ManagerTechnicianAssignmentDTO> ManagerTechnicianAssignments_ManagerUserId { get; set; }

        public List<ManagerTechnicianAssignmentDTO> ManagerTechnicianAssignments_TechnicianUserId { get; set; }

        public List<NotificationDTO> Notifications { get; set; }

        public List<PaymentLogDTO> PaymentLogs_TechnicianUserId { get; set; }

        public List<PaymentLogDTO> PaymentLogs_RecordedByUserId { get; set; }

        public List<ProfileNoteDTO> ProfileNotes_TechnicianUserId { get; set; }

        public List<ProfileNoteDTO> ProfileNotes_AuthorUserId { get; set; }

        public TechnicianProfileDTO TechnicianProfile { get; set; }

        public List<UserAgreementDTO> UserAgreements { get; set; }

        public List<W9DataDTO> W9Datas { get; set; }

        public List<AspNetRoleDTO> AspNetRoles { get; set; }

        #endregion
    }

    public partial class DocumentDTO
    {
        #region Constructors

        public DocumentDTO() {
        }

        public DocumentDTO(System.Guid documentId, string userId, System.Guid documentTypeId, string fileName, string storagePath, string mimeType, System.DateTimeOffset? expirationDate, bool isActive, System.DateTimeOffset dateAdded, System.DateTimeOffset dateModified, AspNetUserDTO aspNetUser, DocumentTypeDTO documentType, List<DocumentStateHistoryDTO> documentStateHistories) {

          this.DocumentId = documentId;
          this.UserId = userId;
          this.DocumentTypeId = documentTypeId;
          this.FileName = fileName;
          this.StoragePath = storagePath;
          this.MimeType = mimeType;
          this.ExpirationDate = expirationDate;
          this.IsActive = isActive;
          this.DateAdded = dateAdded;
          this.DateModified = dateModified;
          this.AspNetUser = aspNetUser;
          this.DocumentType = documentType;
          this.DocumentStateHistories = documentStateHistories;
        }

        #endregion

        #region Properties

        public System.Guid DocumentId { get; set; }

        public string UserId { get; set; }

        public System.Guid DocumentTypeId { get; set; }

        public string FileName { get; set; }

        public string StoragePath { get; set; }

        public string MimeType { get; set; }

        public System.DateTimeOffset? ExpirationDate { get; set; }

        public bool IsActive { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        public System.DateTimeOffset DateModified { get; set; }

        #endregion

        #region Navigation Properties

        public AspNetUserDTO AspNetUser { get; set; }

        public DocumentTypeDTO DocumentType { get; set; }

        public List<DocumentStateHistoryDTO> DocumentStateHistories { get; set; }

        #endregion
    }

    public partial class DocumentStateDTO
    {
        #region Constructors

        public DocumentStateDTO() {
        }

        public DocumentStateDTO(System.Guid documentStateId, string stateName, System.DateTimeOffset dateAdded, List<DocumentStateHistoryDTO> documentStateHistories) {

          this.DocumentStateId = documentStateId;
          this.StateName = stateName;
          this.DateAdded = dateAdded;
          this.DocumentStateHistories = documentStateHistories;
        }

        #endregion

        #region Properties

        public System.Guid DocumentStateId { get; set; }

        public string StateName { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion

        #region Navigation Properties

        public List<DocumentStateHistoryDTO> DocumentStateHistories { get; set; }

        #endregion
    }

    public partial class DocumentStateHistoryDTO
    {
        #region Constructors

        public DocumentStateHistoryDTO() {
        }

        public DocumentStateHistoryDTO(System.Guid documentStateHistoryId, System.Guid documentId, System.Guid documentStateId, string actorUserId, string notes, System.DateTimeOffset dateAdded, DocumentDTO document, DocumentStateDTO documentState, AspNetUserDTO aspNetUser) {

          this.DocumentStateHistoryId = documentStateHistoryId;
          this.DocumentId = documentId;
          this.DocumentStateId = documentStateId;
          this.ActorUserId = actorUserId;
          this.Notes = notes;
          this.DateAdded = dateAdded;
          this.Document = document;
          this.DocumentState = documentState;
          this.AspNetUser = aspNetUser;
        }

        #endregion

        #region Properties

        public System.Guid DocumentStateHistoryId { get; set; }

        public System.Guid DocumentId { get; set; }

        public System.Guid DocumentStateId { get; set; }

        public string ActorUserId { get; set; }

        public string Notes { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion

        #region Navigation Properties

        public DocumentDTO Document { get; set; }

        public DocumentStateDTO DocumentState { get; set; }

        public AspNetUserDTO AspNetUser { get; set; }

        #endregion
    }

    public partial class DocumentTypeDTO
    {
        #region Constructors

        public DocumentTypeDTO() {
        }

        public DocumentTypeDTO(System.Guid documentTypeId, string typeName, bool isComplianceRequired, List<DocumentDTO> documents) {

          this.DocumentTypeId = documentTypeId;
          this.TypeName = typeName;
          this.IsComplianceRequired = isComplianceRequired;
          this.Documents = documents;
        }

        #endregion

        #region Properties

        public System.Guid DocumentTypeId { get; set; }

        public string TypeName { get; set; }

        public bool IsComplianceRequired { get; set; }

        #endregion

        #region Navigation Properties

        public List<DocumentDTO> Documents { get; set; }

        #endregion
    }

    public partial class ManagerTechnicianAssignmentDTO
    {
        #region Constructors

        public ManagerTechnicianAssignmentDTO() {
        }

        public ManagerTechnicianAssignmentDTO(string managerUserId, string technicianUserId, System.DateTimeOffset dateAdded, AspNetUserDTO aspNetUser_ManagerUserId, AspNetUserDTO aspNetUser_TechnicianUserId) {

          this.ManagerUserId = managerUserId;
          this.TechnicianUserId = technicianUserId;
          this.DateAdded = dateAdded;
          this.AspNetUser_ManagerUserId = aspNetUser_ManagerUserId;
          this.AspNetUser_TechnicianUserId = aspNetUser_TechnicianUserId;
        }

        #endregion

        #region Properties

        public string ManagerUserId { get; set; }

        public string TechnicianUserId { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion

        #region Navigation Properties

        public AspNetUserDTO AspNetUser_ManagerUserId { get; set; }

        public AspNetUserDTO AspNetUser_TechnicianUserId { get; set; }

        #endregion
    }

    public partial class ModuleDTO
    {
        #region Constructors

        public ModuleDTO() {
        }

        public ModuleDTO(string moduleId, string moduleName, List<AspNetRoleDTO> aspNetRoles) {

          this.ModuleId = moduleId;
          this.ModuleName = moduleName;
          this.AspNetRoles = aspNetRoles;
        }

        #endregion

        #region Properties

        public string ModuleId { get; set; }

        public string ModuleName { get; set; }

        #endregion

        #region Navigation Properties

        public List<AspNetRoleDTO> AspNetRoles { get; set; }

        #endregion
    }

    public partial class NotificationDTO
    {
        #region Constructors

        public NotificationDTO() {
        }

        public NotificationDTO(System.Guid notificationId, string userId, string channel, string subject, string message, bool isRead, bool isActive, System.DateTimeOffset dateAdded, AspNetUserDTO aspNetUser) {

          this.NotificationId = notificationId;
          this.UserId = userId;
          this.Channel = channel;
          this.Subject = subject;
          this.Message = message;
          this.IsRead = isRead;
          this.IsActive = isActive;
          this.DateAdded = dateAdded;
          this.AspNetUser = aspNetUser;
        }

        #endregion

        #region Properties

        public System.Guid NotificationId { get; set; }

        public string UserId { get; set; }

        public string Channel { get; set; }

        public string Subject { get; set; }

        public string Message { get; set; }

        public bool IsRead { get; set; }

        public bool IsActive { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion

        #region Navigation Properties

        public AspNetUserDTO AspNetUser { get; set; }

        #endregion
    }

    public partial class PaymentLogDTO
    {
        #region Constructors

        public PaymentLogDTO() {
        }

        public PaymentLogDTO(System.Guid paymentLogId, string technicianUserId, decimal amount, System.DateTimeOffset paymentDate, string jobId, string notes, string recordedByUserId, bool isActive, System.DateTimeOffset dateAdded, AspNetUserDTO aspNetUser_TechnicianUserId, AspNetUserDTO aspNetUser_RecordedByUserId) {

          this.PaymentLogId = paymentLogId;
          this.TechnicianUserId = technicianUserId;
          this.Amount = amount;
          this.PaymentDate = paymentDate;
          this.JobId = jobId;
          this.Notes = notes;
          this.RecordedByUserId = recordedByUserId;
          this.IsActive = isActive;
          this.DateAdded = dateAdded;
          this.AspNetUser_TechnicianUserId = aspNetUser_TechnicianUserId;
          this.AspNetUser_RecordedByUserId = aspNetUser_RecordedByUserId;
        }

        #endregion

        #region Properties

        public System.Guid PaymentLogId { get; set; }

        public string TechnicianUserId { get; set; }

        public decimal Amount { get; set; }

        public System.DateTimeOffset PaymentDate { get; set; }

        public string JobId { get; set; }

        public string Notes { get; set; }

        public string RecordedByUserId { get; set; }

        public bool IsActive { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion

        #region Navigation Properties

        public AspNetUserDTO AspNetUser_TechnicianUserId { get; set; }

        public AspNetUserDTO AspNetUser_RecordedByUserId { get; set; }

        #endregion
    }

    public partial class ProfileNoteDTO
    {
        #region Constructors

        public ProfileNoteDTO() {
        }

        public ProfileNoteDTO(System.Guid noteId, string technicianUserId, string authorUserId, string noteText, bool isActive, System.DateTimeOffset dateAdded, AspNetUserDTO aspNetUser_TechnicianUserId, AspNetUserDTO aspNetUser_AuthorUserId) {

          this.NoteId = noteId;
          this.TechnicianUserId = technicianUserId;
          this.AuthorUserId = authorUserId;
          this.NoteText = noteText;
          this.IsActive = isActive;
          this.DateAdded = dateAdded;
          this.AspNetUser_TechnicianUserId = aspNetUser_TechnicianUserId;
          this.AspNetUser_AuthorUserId = aspNetUser_AuthorUserId;
        }

        #endregion

        #region Properties

        public System.Guid NoteId { get; set; }

        public string TechnicianUserId { get; set; }

        public string AuthorUserId { get; set; }

        public string NoteText { get; set; }

        public bool IsActive { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion

        #region Navigation Properties

        public AspNetUserDTO AspNetUser_TechnicianUserId { get; set; }

        public AspNetUserDTO AspNetUser_AuthorUserId { get; set; }

        #endregion
    }

    public partial class TechnicianProfileDTO
    {
        #region Constructors

        public TechnicianProfileDTO() {
        }

        public TechnicianProfileDTO(string technicianId, string availabilityStatus, decimal? payRate, int profileReadinessPercent, System.DateTimeOffset dateAdded, System.DateTimeOffset dateModified, AspNetUserDTO aspNetUser) {

          this.TechnicianId = technicianId;
          this.AvailabilityStatus = availabilityStatus;
          this.PayRate = payRate;
          this.ProfileReadinessPercent = profileReadinessPercent;
          this.DateAdded = dateAdded;
          this.DateModified = dateModified;
          this.AspNetUser = aspNetUser;
        }

        #endregion

        #region Properties

        public string TechnicianId { get; set; }

        public string AvailabilityStatus { get; set; }

        public decimal? PayRate { get; set; }

        public int ProfileReadinessPercent { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        public System.DateTimeOffset DateModified { get; set; }

        #endregion

        #region Navigation Properties

        public AspNetUserDTO AspNetUser { get; set; }

        #endregion
    }

    public partial class UserAgreementDTO
    {
        #region Constructors

        public UserAgreementDTO() {
        }

        public UserAgreementDTO(System.Guid userAgreementId, string userId, string agreementName, System.DateTimeOffset dateAdded, AspNetUserDTO aspNetUser) {

          this.UserAgreementId = userAgreementId;
          this.UserId = userId;
          this.AgreementName = agreementName;
          this.DateAdded = dateAdded;
          this.AspNetUser = aspNetUser;
        }

        #endregion

        #region Properties

        public System.Guid UserAgreementId { get; set; }

        public string UserId { get; set; }

        public string AgreementName { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion

        #region Navigation Properties

        public AspNetUserDTO AspNetUser { get; set; }

        #endregion
    }

    public partial class W9DataDTO
    {
        #region Constructors

        public W9DataDTO() {
        }

        public W9DataDTO(System.Guid w9DataId, string userId, int taxYear, bool isActive, string fullName, string businessName, string taxClassification, string addressStreet, string addressCityStateZip, byte[] taxIDNumberEncrypted, System.DateTimeOffset dateAdded, System.DateTimeOffset dateModified, AspNetUserDTO aspNetUser) {

          this.W9DataId = w9DataId;
          this.UserId = userId;
          this.TaxYear = taxYear;
          this.IsActive = isActive;
          this.FullName = fullName;
          this.BusinessName = businessName;
          this.TaxClassification = taxClassification;
          this.AddressStreet = addressStreet;
          this.AddressCityStateZip = addressCityStateZip;
          this.TaxIDNumberEncrypted = taxIDNumberEncrypted;
          this.DateAdded = dateAdded;
          this.DateModified = dateModified;
          this.AspNetUser = aspNetUser;
        }

        #endregion

        #region Properties

        public System.Guid W9DataId { get; set; }

        public string UserId { get; set; }

        public int TaxYear { get; set; }

        public bool IsActive { get; set; }

        public string FullName { get; set; }

        public string BusinessName { get; set; }

        public string TaxClassification { get; set; }

        public string AddressStreet { get; set; }

        public string AddressCityStateZip { get; set; }

        public byte[] TaxIDNumberEncrypted { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        public System.DateTimeOffset DateModified { get; set; }

        #endregion

        #region Navigation Properties

        public AspNetUserDTO AspNetUser { get; set; }

        #endregion
    }

    public partial class DocumentViewDTO
    {
        #region Constructors

        public DocumentViewDTO() {
        }

        public DocumentViewDTO(System.Guid documentID, System.Guid userID, string userFullName, System.Guid documentTypeID, string documentTypeName, string fileName, string storagePath, string mimeType, System.DateTimeOffset? expirationDate, bool isActive, System.DateTimeOffset dateAdded, System.DateTimeOffset dateModified, string currentStateName, System.DateTimeOffset? currentStateDateAdded, string currentStateActorFullName, string currentStateNotes) {

          this.DocumentID = documentID;
          this.UserID = userID;
          this.UserFullName = userFullName;
          this.DocumentTypeID = documentTypeID;
          this.DocumentTypeName = documentTypeName;
          this.FileName = fileName;
          this.StoragePath = storagePath;
          this.MimeType = mimeType;
          this.ExpirationDate = expirationDate;
          this.IsActive = isActive;
          this.DateAdded = dateAdded;
          this.DateModified = dateModified;
          this.CurrentStateName = currentStateName;
          this.CurrentStateDateAdded = currentStateDateAdded;
          this.CurrentStateActorFullName = currentStateActorFullName;
          this.CurrentStateNotes = currentStateNotes;
        }

        #endregion

        #region Properties

        public System.Guid DocumentID { get; set; }

        public System.Guid UserID { get; set; }

        public string UserFullName { get; set; }

        public System.Guid DocumentTypeID { get; set; }

        public string DocumentTypeName { get; set; }

        public string FileName { get; set; }

        public string StoragePath { get; set; }

        public string MimeType { get; set; }

        public System.DateTimeOffset? ExpirationDate { get; set; }

        public bool IsActive { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        public System.DateTimeOffset DateModified { get; set; }

        public string CurrentStateName { get; set; }

        public System.DateTimeOffset? CurrentStateDateAdded { get; set; }

        public string CurrentStateActorFullName { get; set; }

        public string CurrentStateNotes { get; set; }

        #endregion
    }

    public partial class NotificationViewDTO
    {
        #region Constructors

        public NotificationViewDTO() {
        }

        public NotificationViewDTO(System.Guid notificationID, System.Guid userID, string userFullName, string channel, string subject, string message, bool isRead, bool isActive, System.DateTimeOffset dateAdded) {

          this.NotificationID = notificationID;
          this.UserID = userID;
          this.UserFullName = userFullName;
          this.Channel = channel;
          this.Subject = subject;
          this.Message = message;
          this.IsRead = isRead;
          this.IsActive = isActive;
          this.DateAdded = dateAdded;
        }

        #endregion

        #region Properties

        public System.Guid NotificationID { get; set; }

        public System.Guid UserID { get; set; }

        public string UserFullName { get; set; }

        public string Channel { get; set; }

        public string Subject { get; set; }

        public string Message { get; set; }

        public bool IsRead { get; set; }

        public bool IsActive { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion
    }

    public partial class PaymentLogViewDTO
    {
        #region Constructors

        public PaymentLogViewDTO() {
        }

        public PaymentLogViewDTO(System.Guid paymentLogID, System.Guid technicianUserID, string technicianFullName, decimal amount, System.DateTimeOffset paymentDate, string jobID, string notes, System.Guid recordedByUserID, string recordedByFullName, bool isActive, System.DateTimeOffset dateAdded) {

          this.PaymentLogID = paymentLogID;
          this.TechnicianUserID = technicianUserID;
          this.TechnicianFullName = technicianFullName;
          this.Amount = amount;
          this.PaymentDate = paymentDate;
          this.JobID = jobID;
          this.Notes = notes;
          this.RecordedByUserID = recordedByUserID;
          this.RecordedByFullName = recordedByFullName;
          this.IsActive = isActive;
          this.DateAdded = dateAdded;
        }

        #endregion

        #region Properties

        public System.Guid PaymentLogID { get; set; }

        public System.Guid TechnicianUserID { get; set; }

        public string TechnicianFullName { get; set; }

        public decimal Amount { get; set; }

        public System.DateTimeOffset PaymentDate { get; set; }

        public string JobID { get; set; }

        public string Notes { get; set; }

        public System.Guid RecordedByUserID { get; set; }

        public string RecordedByFullName { get; set; }

        public bool IsActive { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion
    }

    public partial class ProfileNoteViewDTO
    {
        #region Constructors

        public ProfileNoteViewDTO() {
        }

        public ProfileNoteViewDTO(System.Guid noteID, System.Guid technicianUserID, string technicianFullName, System.Guid authorUserID, string authorFullName, string noteText, bool isActive, System.DateTimeOffset dateAdded) {

          this.NoteID = noteID;
          this.TechnicianUserID = technicianUserID;
          this.TechnicianFullName = technicianFullName;
          this.AuthorUserID = authorUserID;
          this.AuthorFullName = authorFullName;
          this.NoteText = noteText;
          this.IsActive = isActive;
          this.DateAdded = dateAdded;
        }

        #endregion

        #region Properties

        public System.Guid NoteID { get; set; }

        public System.Guid TechnicianUserID { get; set; }

        public string TechnicianFullName { get; set; }

        public System.Guid AuthorUserID { get; set; }

        public string AuthorFullName { get; set; }

        public string NoteText { get; set; }

        public bool IsActive { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion
    }

    public partial class RoleAllowedModuleDTO
    {
        #region Constructors

        public RoleAllowedModuleDTO() {
        }

        public RoleAllowedModuleDTO(string roleId, string roleName, string moduleId, string moduleName) {

          this.RoleId = roleId;
          this.RoleName = roleName;
          this.ModuleId = moduleId;
          this.ModuleName = moduleName;
        }

        #endregion

        #region Properties

        public string RoleId { get; set; }

        public string RoleName { get; set; }

        public string ModuleId { get; set; }

        public string ModuleName { get; set; }

        #endregion
    }

    public partial class RolesViewDTO
    {
        #region Constructors

        public RolesViewDTO() {
        }

        public RolesViewDTO(string id, string name, string normalizedName, string description, int? userCount, string allowedModules) {

          this.Id = id;
          this.Name = name;
          this.NormalizedName = normalizedName;
          this.Description = description;
          this.UserCount = userCount;
          this.AllowedModules = allowedModules;
        }

        #endregion

        #region Properties

        public string Id { get; set; }

        public string Name { get; set; }

        public string NormalizedName { get; set; }

        public string Description { get; set; }

        public int? UserCount { get; set; }

        public string AllowedModules { get; set; }

        #endregion
    }

    public partial class TechnicianRosterViewDTO
    {
        #region Constructors

        public TechnicianRosterViewDTO() {
        }

        public TechnicianRosterViewDTO(string userID, string firstName, string lastName, string fullName, string email, string phoneNumber, string profilePictureUrl, string availabilityStatus, string complianceStatus) {

          this.UserID = userID;
          this.FirstName = firstName;
          this.LastName = lastName;
          this.FullName = fullName;
          this.Email = email;
          this.PhoneNumber = phoneNumber;
          this.ProfilePictureUrl = profilePictureUrl;
          this.AvailabilityStatus = availabilityStatus;
          this.ComplianceStatus = complianceStatus;
        }

        #endregion

        #region Properties

        public string UserID { get; set; }

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string FullName { get; set; }

        public string Email { get; set; }

        public string PhoneNumber { get; set; }

        public string ProfilePictureUrl { get; set; }

        public string AvailabilityStatus { get; set; }

        public string ComplianceStatus { get; set; }

        #endregion
    }

    public partial class TechnicianViewDTO
    {
        #region Constructors

        public TechnicianViewDTO() {
        }

        public TechnicianViewDTO(string userID, string roleID, string roleName, string email, string firstName, string lastName, string fullName, string phoneNumber, string profilePictureUrl, bool isActive, string userName, System.Guid? addressID, string addressType, string addressLine1, string addressLine2, string city, string state, string zipCode, string country, string availabilityStatus, decimal? payRate, int profileReadinessPercent, System.DateTimeOffset profileDateAdded, System.DateTimeOffset profileDateModified) {

          this.UserID = userID;
          this.RoleID = roleID;
          this.RoleName = roleName;
          this.Email = email;
          this.FirstName = firstName;
          this.LastName = lastName;
          this.FullName = fullName;
          this.PhoneNumber = phoneNumber;
          this.ProfilePictureUrl = profilePictureUrl;
          this.IsActive = isActive;
          this.UserName = userName;
          this.AddressID = addressID;
          this.AddressType = addressType;
          this.AddressLine1 = addressLine1;
          this.AddressLine2 = addressLine2;
          this.City = city;
          this.State = state;
          this.ZipCode = zipCode;
          this.Country = country;
          this.AvailabilityStatus = availabilityStatus;
          this.PayRate = payRate;
          this.ProfileReadinessPercent = profileReadinessPercent;
          this.ProfileDateAdded = profileDateAdded;
          this.ProfileDateModified = profileDateModified;
        }

        #endregion

        #region Properties

        public string UserID { get; set; }

        public string RoleID { get; set; }

        public string RoleName { get; set; }

        public string Email { get; set; }

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string FullName { get; set; }

        public string PhoneNumber { get; set; }

        public string ProfilePictureUrl { get; set; }

        public bool IsActive { get; set; }

        public string UserName { get; set; }

        public System.Guid? AddressID { get; set; }

        public string AddressType { get; set; }

        public string AddressLine1 { get; set; }

        public string AddressLine2 { get; set; }

        public string City { get; set; }

        public string State { get; set; }

        public string ZipCode { get; set; }

        public string Country { get; set; }

        public string AvailabilityStatus { get; set; }

        public decimal? PayRate { get; set; }

        public int ProfileReadinessPercent { get; set; }

        public System.DateTimeOffset ProfileDateAdded { get; set; }

        public System.DateTimeOffset ProfileDateModified { get; set; }

        #endregion
    }

    public partial class UserAgreementViewDTO
    {
        #region Constructors

        public UserAgreementViewDTO() {
        }

        public UserAgreementViewDTO(System.Guid userAgreementID, System.Guid userID, string userFullName, string agreementName, System.DateTimeOffset dateAdded) {

          this.UserAgreementID = userAgreementID;
          this.UserID = userID;
          this.UserFullName = userFullName;
          this.AgreementName = agreementName;
          this.DateAdded = dateAdded;
        }

        #endregion

        #region Properties

        public System.Guid UserAgreementID { get; set; }

        public System.Guid UserID { get; set; }

        public string UserFullName { get; set; }

        public string AgreementName { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        #endregion
    }

    public partial class UserAllowedModuleDTO
    {
        #region Constructors

        public UserAllowedModuleDTO() {
        }

        public UserAllowedModuleDTO(string userId, string userName, string moduleId, string moduleName) {

          this.UserId = userId;
          this.UserName = userName;
          this.ModuleId = moduleId;
          this.ModuleName = moduleName;
        }

        #endregion

        #region Properties

        public string UserId { get; set; }

        public string UserName { get; set; }

        public string ModuleId { get; set; }

        public string ModuleName { get; set; }

        #endregion
    }

    public partial class UserViewDTO
    {
        #region Constructors

        public UserViewDTO() {
        }

        public UserViewDTO(string userID, string roleID, string roleName, string email, string firstName, string lastName, string fullName, string phoneNumber, string profilePictureUrl, bool isActive, string userName, System.Guid? addressID, string addressType, string addressLine1, string addressLine2, string city, string state, string zipCode, string country) {

          this.UserID = userID;
          this.RoleID = roleID;
          this.RoleName = roleName;
          this.Email = email;
          this.FirstName = firstName;
          this.LastName = lastName;
          this.FullName = fullName;
          this.PhoneNumber = phoneNumber;
          this.ProfilePictureUrl = profilePictureUrl;
          this.IsActive = isActive;
          this.UserName = userName;
          this.AddressID = addressID;
          this.AddressType = addressType;
          this.AddressLine1 = addressLine1;
          this.AddressLine2 = addressLine2;
          this.City = city;
          this.State = state;
          this.ZipCode = zipCode;
          this.Country = country;
        }

        #endregion

        #region Properties

        public string UserID { get; set; }

        public string RoleID { get; set; }

        public string RoleName { get; set; }

        public string Email { get; set; }

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string FullName { get; set; }

        public string PhoneNumber { get; set; }

        public string ProfilePictureUrl { get; set; }

        public bool IsActive { get; set; }

        public string UserName { get; set; }

        public System.Guid? AddressID { get; set; }

        public string AddressType { get; set; }

        public string AddressLine1 { get; set; }

        public string AddressLine2 { get; set; }

        public string City { get; set; }

        public string State { get; set; }

        public string ZipCode { get; set; }

        public string Country { get; set; }

        #endregion
    }

    public partial class W9DataViewDTO
    {
        #region Constructors

        public W9DataViewDTO() {
        }

        public W9DataViewDTO(System.Guid w9DataID, System.Guid userID, string userFullName, int taxYear, bool isActive, string fullName, string businessName, string taxClassification, string addressStreet, string addressCityStateZip, System.DateTimeOffset dateAdded, System.DateTimeOffset dateModified) {

          this.W9DataID = w9DataID;
          this.UserID = userID;
          this.UserFullName = userFullName;
          this.TaxYear = taxYear;
          this.IsActive = isActive;
          this.FullName = fullName;
          this.BusinessName = businessName;
          this.TaxClassification = taxClassification;
          this.AddressStreet = addressStreet;
          this.AddressCityStateZip = addressCityStateZip;
          this.DateAdded = dateAdded;
          this.DateModified = dateModified;
        }

        #endregion

        #region Properties

        public System.Guid W9DataID { get; set; }

        public System.Guid UserID { get; set; }

        public string UserFullName { get; set; }

        public int TaxYear { get; set; }

        public bool IsActive { get; set; }

        public string FullName { get; set; }

        public string BusinessName { get; set; }

        public string TaxClassification { get; set; }

        public string AddressStreet { get; set; }

        public string AddressCityStateZip { get; set; }

        public System.DateTimeOffset DateAdded { get; set; }

        public System.DateTimeOffset DateModified { get; set; }

        #endregion
    }

}

================
File: xdent-ops-dotnet-backend/Models/Data/ApplicationRole.cs
================
using Microsoft.AspNetCore.Identity;
using System.ComponentModel.DataAnnotations;

namespace XDentOpsAPI.Models.Data
{
    public class ApplicationRole : IdentityRole
    {
        [MaxLength(8000)]
        public string? Description { get; set; }
    }

}

================
File: xdent-ops-dotnet-backend/Models/Data/ApplicationUser.cs
================
using Microsoft.AspNetCore.Identity;
using System.ComponentModel.DataAnnotations;

namespace XDentOpsAPI.Models.Data
{
    public class ApplicationUser : IdentityUser
    {
        [Required]
        [MaxLength(255)]
        public string FirstName { get; set; }

        [Required]
        [MaxLength(255)]
        public string LastName { get; set; }

        [MaxLength(255)]
        public string? Suffix { get; set; }

        [Required]
        public bool IsActive { get; set; }

        public DateTime? DateLastLogin { get; set; }

        public string? Email2 { get; set; }

        public string? Phone2 { get; set; }

        public string? PreferredName { get; set; }

        public string? Creds { get; set; }


        [MaxLength(1000)]
        public string?  ProfilePicUrl { get; set; }
    }

}

================
File: xdent-ops-dotnet-backend/Models/DTO/AspNetUserDTO.cs
================
namespace XDentOpsAPI.Models.Data
{
    public partial class AspNetUserDTO
    {
        public string? DisplayName => $"{LastName}, {FirstName}";
        public string? Token { get; set; }
        public DateTime? DatePreviousLogin { get; set; }
    }
}

================
File: xdent-ops-dotnet-backend/Models/MappingProfile.cs
================
using AutoMapper;
using XDentOpsAPI.Models.Data;

public class MappingProfile : Profile
{
    public MappingProfile()
    {
        CreateMap<ApplicationUser, ApplicationUserDTO>();
        CreateMap<ApplicationRole, ApplicationRoleDTO>();

        CreateMap<ApplicationUserDTO, ApplicationUser>();
        CreateMap<ApplicationRoleDTO, ApplicationRole>();
    }
}

================
File: xdent-ops-dotnet-backend/Models/VM/LoginResultVM.cs
================
namespace XDentOpsAPI.Models.VM
{
    public class LoginResultVM 
    {
        public string? Status { get; set; }
        public string? Type { get; set; }
        public string? Token { get; set; }
    }

}

================
File: xdent-ops-dotnet-backend/Models/VM/LoginVM.cs
================
namespace XDentOpsAPI.Models.VM
{
    public class LoginVM
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
    }
}

================
File: xdent-ops-dotnet-backend/Models/VM/PagedLists.cs
================
using XDentOpsAPI.Models.Data;

namespace XDentOpsAPI.Models.VM
{
    public class UserList
    {
        public AspNetUserDTO[] Data { get; set; } = Array.Empty<AspNetUserDTO>();
        public int? Total { get; set; }
        public bool? Success { get; set; }
    }

    public class RoleList
    {
        public RolesView[] Data { get; set; } = Array.Empty<RolesView>();
        public int? Total { get; set; }
        public bool? Success { get; set; }
    }

    
}

================
File: xdent-ops-dotnet-backend/Models/VM/RegisterVM.cs
================
namespace XDentOpsAPI.Models.VM
{
    public class RegisterVM
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
    }
}

================
File: xdent-ops-dotnet-backend/Models/VM/RoleVM.cs
================
namespace XDentOpsAPI.Models.VM
{
    public class RoleVM
    {
        public string? Id { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
    }
}

================
File: xdent-ops-dotnet-backend/Models/VM/TechnicianVM.cs
================
// File: Models/ViewModels/TechnicianViewModel.cs

namespace XDentOpsAPI.Models.VM
{
    /// <summary>
    /// Represents a comprehensive view of a technician for both display and editing.
    /// All properties are nullable to accommodate flexible data binding for create/update operations.
    /// This ViewModel maps directly to the [TechnicianView] SQL view for read operations.
    /// </summary>
    public class TechnicianVM
    {
        // From UserView
        public string? UserID { get; set; }
        public string? RoleID { get; set; }
        public string? RoleName { get; set; }
        public string? Email { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? FullName { get; set; }
        public string? PhoneNumber { get; set; }
        public string? ProfilePictureUrl { get; set; }
        public bool? IsActive { get; set; }
        public string? UserName { get; set; }

        // From TechnicianProfile
        public string? AvailabilityStatus { get; set; }
        public decimal? PayRate { get; set; }
        public int? ProfileReadinessPercent { get; set; }
        public DateTimeOffset? ProfileDateAdded { get; set; }
        public DateTimeOffset? ProfileDateModified { get; set; }
    }
}

================
File: xdent-ops-dotnet-backend/Models/VM/UserVM.cs
================
using Microsoft.EntityFrameworkCore;
using XDentOpsAPI.Models.Data;

namespace XDentOpsAPI.Models.VM
{
    public class UserVM
    {
        public string? Id { get; set; }

        public string? UserName { get; set; }

        public string? Email { get; set; }

        public string? PhoneNumber { get; set; }
        
        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        public string? Suffix { get; set; }

        public bool IsActive { get; set; }

        public string? Email2 { get; set; }

        public string? Phone2 { get; set; }

        public string? PreferredName { get; set; }

        public string? Creds { get; set; }
        
        public string? ProfilePicUrl { get; set; }

        public DateTime? DateLastLogin { get; set; }

        public RoleVM[] Roles { get; set;} = new RoleVM[0];

        public ModuleDTO[] AllowedModules { get; set; } = new ModuleDTO[0];

       
    }

}

================
File: xdent-ops-dotnet-backend/Models/VM/ViewModelMappingExtensions.cs
================
using System.Linq.Expressions;
using XDentOpsAPI.Models.Data;
using XDentOpsAPI.Models.VM;

namespace XDentOpsAPI.Models.VM;

/// <summary>
public static class ViewModelMappingExtensions
{
    // ... your existing ToViewModel() method ...

    /// <summary>
    /// A reusable expression to project a TechnicianView to a TechnicianVM.
    /// This allows the projection to happen on the SQL server.
    /// </summary>
    public static readonly Expression<Func<TechnicianView, TechnicianVM>> TechnicianViewToVM = tv => new TechnicianVM
    {
        UserID = tv.UserID,
        RoleID = tv.RoleID,
        RoleName = tv.RoleName,
        Email = tv.Email,
        FirstName = tv.FirstName,
        LastName = tv.LastName,
        FullName = tv.FullName,
        PhoneNumber = tv.PhoneNumber,
        ProfilePictureUrl = tv.ProfilePictureUrl,
        IsActive = tv.IsActive,
        UserName = tv.UserName,
        AvailabilityStatus = tv.AvailabilityStatus,
        PayRate = tv.PayRate,
        ProfileReadinessPercent = tv.ProfileReadinessPercent,
        ProfileDateAdded = tv.ProfileDateAdded,
        ProfileDateModified = tv.ProfileDateModified
    };
}

================
File: xdent-ops-dotnet-backend/Program.cs
================
using System.Text;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging.ApplicationInsights;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Hosting;
using XDentOpsAPI.Models.Data;
using XDentOpsAPI.Middleware;

namespace XDentOpsAPI
{
    public class Program
    {
        static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            ConfigureServices(builder);

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (true || app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }
            else
            {
                // PROD ONLY STUFF
            }

            app.UseHttpsRedirection();

            app.UseAuthentication(); // Must go before UseAuthorization

            app.UseAuthorization();

            app.UseMiddleware<DebugMiddleware>();

            app.MapControllers();

            app.Run();
        }

        public static void ConfigureServices(WebApplicationBuilder builder)
        {
            // Add services to the container.
            builder.Services.AddControllers();

            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen();

            // Cors Policy
            builder.Services.AddCors(options =>
            {
                options.AddPolicy("CorsPolicy", b =>
                    b.AllowAnyOrigin()
                        .AllowAnyMethod()
                        .AllowAnyHeader());
            });

            // DB Connection
            builder.Services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

            //Login ability
            builder.Services.AddIdentity<ApplicationUser, ApplicationRole>()
                .AddEntityFrameworkStores<ApplicationDbContext>()
                .AddDefaultTokenProviders();

            //JWT
            builder.Services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(options =>
            {
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = false,
                    ValidateAudience = false,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = builder.Configuration["Jwt:Issuer"],
                    ValidAudience = builder.Configuration["Jwt:Audience"],
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
                };
            });

            //Application Insights Logging
            builder.Services.AddApplicationInsightsTelemetry();

            builder.Logging.AddApplicationInsights(
                configureTelemetryConfiguration: (config) =>
                    config.ConnectionString = builder.Configuration.GetConnectionString("APPLICATIONINSIGHTS_CONNECTION_STRING"),
                configureApplicationInsightsLoggerOptions: (options) => { }
            );

            //Filters to keep AppInsights costs down
            builder.Logging.AddFilter<ApplicationInsightsLoggerProvider>("AccountController", LogLevel.Trace);

            //AutoMapper 
            //builder.Services.AddAutoMapper(typeof(Program));
        }
    }
}

================
File: xdent-ops-dotnet-backend/Properties/launchSettings.json
================
{
  "profiles": {
    "http": {
      "commandName": "Project",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      },
      "dotnetRunMessages": true,
      "applicationUrl": "http://localhost:5290"
    },
    "https": {
      "commandName": "Project",
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      },
      "dotnetRunMessages": true,
      "applicationUrl": "https://localhost:7169;http://localhost:5290"
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "Docker": {
      "commandName": "Docker",
      "launchUrl": "{Scheme}://{ServiceHost}:{ServicePort}/swagger",
      "publishAllPorts": true,
      "useSSL": true
    }
  },
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:53471",
      "sslPort": 44390
    }
  }
}

================
File: xdent-ops-dotnet-backend/Properties/PublishProfiles/FolderProfile.pubxml
================
<?xml version="1.0" encoding="utf-8"?>
<!--
https://go.microsoft.com/fwlink/?LinkID=208121.
-->
<Project>
  <PropertyGroup>
    <DeleteExistingFiles>false</DeleteExistingFiles>
    <ExcludeApp_Data>false</ExcludeApp_Data>
    <LaunchSiteAfterPublish>true</LaunchSiteAfterPublish>
    <LastUsedBuildConfiguration>Release</LastUsedBuildConfiguration>
    <LastUsedPlatform>Any CPU</LastUsedPlatform>
    <PublishProvider>FileSystem</PublishProvider>
    <PublishUrl>C:\Dropbox\_PUBLISH\cehr-api</PublishUrl>
    <WebPublishMethod>FileSystem</WebPublishMethod>
    <_TargetId>Folder</_TargetId>
  </PropertyGroup>
</Project>

================
File: xdent-ops-dotnet-backend/XDentOpsAPI.csproj
================
<Project Sdk="Microsoft.NET.Sdk.Web">
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v17.0\TextTemplating\Microsoft.TextTemplating.targets" Condition="'$(DOCKER_BUILD)' != 'true'" />
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>e3c1011a-b772-43be-8cca-921febee1ee3</UserSecretsId>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
	<TransformOnBuild>true</TransformOnBuild>
	<OverwriteReadOnlyOutputFiles>true</OverwriteReadOnlyOutputFiles>
	<TransformOutOfDateOnly>false</TransformOutOfDateOnly>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="Models\MappingProfile.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Remove="DLLz\Cizzle.AI.pdb" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Gen\CommonJS.template.txt" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="12.0.1" />
    <PackageReference Include="Google.Apis.Auth" Version="1.61.0" />
    <PackageReference Include="Microsoft.ApplicationInsights.AspNetCore" Version="2.21.0" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="7.0.5" />
    <PackageReference Include="Microsoft.AspNetCore.Identity" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="7.0.5" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="7.0.5" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="7.0.5" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="7.0.5">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="7.0.5" />
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.17.2" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
    <PackageReference Include="System.Linq.Dynamic.Core" Version="1.6.6" />
  </ItemGroup>

  <ItemGroup>
    <None Include=".ssl\aspnetcore.pfx" />
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

  <ItemGroup>
    <None Update="DLLz\Cizzle.AI.dll">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
    <None Update="Gen\AppVersion.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>AppVersion.tsx</LastGenOutput>
	  <OutputPath>\git\react-cizzle\react-cizzle-ui-vite\src\components\AppVersion.jsx</OutputPath>		
	</None>
    <None Update="Gen\AppVersion.tsx">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>AppVersion.tt</DependentUpon>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Folder Include="DLLz\" />
    <Folder Include="Models\_ENTDEV\" />
    <Folder Include="Services\" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Cizzle.AI">
      <HintPath>DLLz\Cizzle.AI.dll</HintPath>
    </Reference>
  </ItemGroup>

	<!-- Regenreate All T4s with every build -->
	<!-- <Target Name="TransformAllT4Templates" BeforeTargets="BeforeBuild"> -->
	  <!-- <ItemGroup> -->
		<!-- <T4Template Include="@(Content)" Condition="'%(Extension)' == '.tt'"/> -->
	  <!-- </ItemGroup> -->
	  <!-- <Message Importance="high" Text="Transforming T4 templates: @(T4Template->'%(FullPath)', ', ')"/> -->
	  <!-- <Exec Command="&quot;$(CommonProgramFiles)\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\TextTransform.exe&quot; -out &quot;%(T4Template.RelativeDir)%(T4Template.Filename).generated%(T4Template.Extension)&quot; &quot;%(T4Template.FullPath)&quot;" /> -->
	<!-- </Target> -->


	<!-- Copy T4 generated files -->
	<Target Name="CopyAppVersion" AfterTargets="Build" Condition="'$(DOCKER_BUILD)' != 'true'">
		<Copy SourceFiles="Gen\AppVersion.tsx" DestinationFolder="\git\react-cizzle\react-cizzle-ui-vite\src\components\" OverwriteReadOnlyFiles="true" SkipUnchangedFiles="true" />
	</Target>
	
</Project>

================
File: xdent-ops-dotnet-backend/XDentOpsAPI.nswag
================
{
  "runtime": "Net80",
  "defaultVariables": null,
  "documentGenerator": {
    "fromDocument": {
      "json": "",
      "url": "https://localhost:7169/swagger/v1/swagger.json",
      "output": null,
      "newLineBehavior": "Auto"
    }
  },
  "codeGenerators": {
    "openApiToTypeScriptClient": {
      "className": "{controller}Client",
      "moduleName": "",
      "namespace": "",
      "typeScriptVersion": 4.3,
      "template": "Aurelia",
      "promiseType": "Promise",
      "httpClass": "HttpClient",
      "withCredentials": false,
      "useSingletonProvider": false,
      "injectionTokenType": "OpaqueToken",
      "rxJsVersion": 6.0,
      "dateTimeType": "Date",
      "nullValue": "Undefined",
      "generateClientClasses": true,
      "generateClientInterfaces": false,
      "generateOptionalParameters": false,
      "exportTypes": true,
      "wrapDtoExceptions": false,
      "exceptionClass": "ApiException",
      "clientBaseClass": null,
      "wrapResponses": false,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "protectedMethods": [],
      "configurationClass": null,
      "useTransformOptionsMethod": false,
      "useTransformResultMethod": false,
      "generateDtoTypes": true,
      "operationGenerationMode": "MultipleClientsFromOperationId",
      "markOptionalProperties": true,
      "generateCloneMethod": false,
      "typeStyle": "Class",
      "enumStyle": "Enum",
      "useLeafType": false,
      "classTypes": [],
      "extendedClasses": [],
      "extensionCode": null,
      "generateDefaultValues": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateTypeCheckFunctions": false,
      "generateConstructorInterface": true,
      "convertConstructorInterfaceData": false,
      "importRequiredTypes": true,
      "useGetBaseUrlMethod": false,
      "baseUrlTokenName": "API_BASE_URL",
      "queryNullValue": "",
      "useAbortSignal": false,
      "inlineNamedDictionaries": false,
      "inlineNamedAny": false,
      "includeHttpContext": false,
      "templateDirectory": null,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": "../frontend/src/services/XDentOpsAPI/api.ts",
      "newLineBehavior": "Auto"
    }
  }
}

================
File: xdent-ops-dotnet-backend/XDentOpsAPI.sln
================
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.33516.290
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "XDentOpsAPI", "XDentOpsAPI.csproj", "{C321CF71-C74F-4063-B1D9-53E4E084FA6F}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{C321CF71-C74F-4063-B1D9-53E4E084FA6F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C321CF71-C74F-4063-B1D9-53E4E084FA6F}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{C321CF71-C74F-4063-B1D9-53E4E084FA6F}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{C321CF71-C74F-4063-B1D9-53E4E084FA6F}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {96ABEF52-0B87-4826-9D91-AEE7374016A0}
	EndGlobalSection
EndGlobal

================
File: xdent-ops-frontend/.claude/settings.local.json
================
{
  "permissions": {
    "allow": [
      "Bash(az boards query:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(az boards work-item show:*)",
      "Bash(az boards work-item update:*)",
      "Bash(grep:*)",
      "Bash(az boards work-item:*)",
      "Bash(--title \"FE: Admin user creation form with role assignment\" )",
      "Bash(--type \"Task\" )",
      "Bash(--parent 177 )",
      "Bash(--description \"Implement frontend components and logic for creating new user accounts.\n\nRequirements:\n- Create/update React components using Refine framework\n- Implement UI/UX as per acceptance criteria\n- Handle client-side validation and state management\n- Integrate with backend API endpoints\n- Ensure responsive design and accessibility\n\nTechnical Notes:\n- Use existing component patterns and conventions\n- Types will be auto-generated from database schema\n- Follow established routing and authentication patterns\")",
      "Bash(--title \"FE: Admin user creation form with role assignment\" )",
      "Bash(--type \"Task\" )",
      "Bash(--title \"BE: User creation API with role assignment\" )",
      "Bash(--type \"Task\" )",
      "Bash(--description \"Implement backend API and business logic for creating new user accounts.\n\nRequirements:\n- Create/update .NET Core Web API controllers and services\n- Implement business logic and data validation\n- Add/modify database operations (CRUD as needed)\n- Ensure proper error handling and logging\n\nTechnical Notes:\n- Follow existing service and repository patterns\n- Types auto-generated from database schema in frontend and backend\n- Implement proper authentication/authorization\")"
    ],
    "deny": []
  }
}

================
File: xdent-ops-frontend/.cursor/rules/general.mdc
================
---
description: 
globs: 
alwaysApply: true
---
# DO NOT

DO NOT EDIT routeTree.gen.ts - It gets overwritten

================
File: xdent-ops-frontend/.cursor/rules/project-general.mdc
================
---
description: 
globs: 
alwaysApply: true
---
You are an expert in TypeScript, Node.js, React, Vite, TanStack Query, TanStack Router, Tanstack Start, Tailwind, and shadcn.

Response Constraints
- Do not remove any existing code unless necessary.
- Do not remove my comments or commented-out code unless necessary.
- Do not change the formatting of my imports.
- Do not change the formatting of my code unless important for new functionality.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Use curly braces for all conditionals. Favor simplicity over cleverness.
- Use declarative JSX.

UI and Styling
- Use Tailwind / shadcn for components and styling.
- DO NOT EDIT shadcn component files directly

Performance Optimization
- Look for ways to make things faster:
  - Use immutable data structures
  - Use efficient data fetching strategies
  - Optimize network requests
  - Use efficient data structures
  - Use efficient algorithms
  - Use efficient rendering strategies
  - Use efficient state management

React Components

- Use appropriate semantic HTML tags (like <header>, <main>, <section>, <article>, <footer>, etc.) when their meaning matches your content's purpose. Only fall back to <div> elements for non-semantic grouping or layout purposes.
- Separate the main parts of a component's html with an extra blank line for visual spacing
- Mark server-side components with `'use server'` at the top. For client components, include `'use client'` directive. RSC components are rendered using the `renderRsc()` function from `@tanstack/react-start`.

Component Organization

- All components be named using pascal case case like `ExampleComponent.tsx` unless otherwise specified
- Put components in `/_components` in the route if one-off components
- Put components in `/components` from the root if shared components

Component Hook Encapsulation

Always encapsulate related state, effects, and event handlers in custom hooks rather than directly in components. Keep the components clean as possible.

Good Practice:

```jsx
// Custom hook encapsulates all related state and logic
function useUserProfile(userId) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    let isMounted = true;
    setLoading(true);

    fetchUserData(userId)
      .then((data) => {
        if (isMounted) {
          setUser(data);
          setLoading(false);
        }
      })
      .catch((err) => {
        if (isMounted) {
          setError(err);
          setLoading(false);
        }
      });

    return () => {
      isMounted = false;
    };
  }, [userId]);

  const updateUserName = useCallback(
    (newName) => {
      return updateUser(userId, { name: newName }).then((updatedUser) => {
        setUser(updatedUser);
        return updatedUser;
      });
    },
    [userId]
  );

  return { user, loading, error, updateUserName };
}

// Clean component with logic abstracted away
function UserProfile({ userId }) {
  const { user, loading, error, updateUserName } = useUserProfile(userId);

  if (loading) return <Spinner />;
  if (error) return <ErrorMessage error={error} />;

  return (
    <div>
      <h2>{user.name}</h2>
      <button onClick={() => updateUserName("New Name")}>Update Name</button>
    </div>
  );
}
```

Forms
Build forms as components in src\components\forms. The app will import and use these components

================
File: xdent-ops-frontend/.cursor/rules/refine-pages.mdc
================
---
description: 
globs: 
alwaysApply: false
---
### Creating Resource Pages in Refine

After defining a resource in your `<Refine />` component, you need to create the corresponding React components for its pages. These pages will use Refine's data hooks to interact with your API and display the data.

#### Prerequisites

Ensure you have a resource defined in your main application file. We will build pages for a `products` resource.

```tsx
// In your main App file
<Refine
    // ...
    resources={[
      {
        name: "products",
        list: "/products",
        create: "/products/create",
        show: "/products/show/:id",
        edit: "/products/edit/:id",
      },
      // ... other resources
    ]}
>
```

---

### 1. The List Page

The list page displays multiple records from a resource. The `@refinedev/antd` package provides the `useTable` hook, which simplifies fetching and displaying data in an Ant Design `<Table>`.

**Key Hook:** `useTable()`

#### How It Works:

*   `useTable()` fetches the data using your `dataProvider`'s `getList` method.
*   It returns `tableProps`, which contains everything the Ant Design `<Table>` component needs, including the `dataSource`, `loading` state, and pagination handlers.

#### Example: `ProductListPage.tsx`

```tsx
import { List, useTable, EditButton, ShowButton } from "@refinedev/antd";
import { Table, Space } from "antd";

// Define the interface for your product
interface IProduct {
  id: number;
  name: string;
  price: number;
}

export const ProductListPage = () => {
  const { tableProps } = useTable<IProduct>();

  return (
    <List>
      <Table {...tableProps} rowKey="id">
        <Table.Column dataIndex="id" title="ID" />
        <Table.Column dataIndex="name" title="Name" />
        <Table.Column dataIndex="price" title="Price" />
        <Table.Column
          title="Actions"
          dataIndex="actions"
          render={(_, record: IProduct) => (
            <Space>
              <EditButton hideText recordItemId={record.id} />
              <ShowButton hideText recordItemId={record.id} />
            </Space>
          )}
        />
      </Table>
    </List>
  );
};
```

---

### 2. The Create Page

The create page contains a form for adding new records. Refine's `useForm` hook integrates with Ant Design's `<Form>` to handle state, submission, and validation.

**Key Hook:** `useForm()`

#### How It Works:

*   `useForm()` (in `create` mode) prepares the form for creating a new record.
*   It returns `formProps`, which connects the Ant Design `<Form>` to Refine's data handling logic.
*   It also returns `saveButtonProps`, which you can spread onto a submit button to handle loading states and trigger the form submission.

#### Example: `ProductCreatePage.tsx`

```tsx
import { Create, useForm } from "@refinedev/antd";
import { Form, Input, InputNumber } from "antd";

export const ProductCreatePage = () => {
  const { formProps, saveButtonProps } = useForm();

  return (
    <Create saveButtonProps={saveButtonProps}>
      <Form {...formProps} layout="vertical">
        <Form.Item
          label="Name"
          name="name"
          rules={[{ required: true }]}
        >
          <Input />
        </Form.Item>
        <Form.Item
          label="Price"
          name="price"
          rules={[{ required: true }]}
        >
          <InputNumber />
        </Form.Item>
      </Form>
    </Create>
  );
};
```

---

### 3. The Show Page

The show page displays the details of a single record.

**Key Hook:** `useShow()`

#### How It Works:

*   `useShow()` automatically fetches the record based on the `:id` from the URL.
*   It returns a `queryResult` object containing the `data` and `isLoading` state for the fetched record.
*   Refine's field components (e.g., `<TextField />`, `<NumberField />`) can be used to easily display the data.

#### Example: `ProductShowPage.tsx`

```tsx
import { useShow } from "@refinedev/core";
import { Show, TextField, NumberField } from "@refinedev/antd";
import { Typography } from "antd";

const { Title } = Typography;

export const ProductShowPage = () => {
  const { queryResult } = useShow();
  const { data, isLoading } = queryResult;
  const record = data?.data;

  return (
    <Show isLoading={isLoading}>
      <Title level={5}>Name</Title>
      <TextField value={record?.name} />

      <Title level={5}>Price</Title>
      <NumberField value={record?.price} options={{ style: "currency", currency: "USD" }} />
    </Show>
  );
};
```

---

### 4. The Edit Page

The edit page is very similar to the create page but comes pre-filled with the data of the record being edited.

**Key Hook:** `useForm()`

#### How It Works:

*   When used on an edit route (like `/products/edit/:id`), `useForm` automatically detects the "edit" action.
*   It first fetches the record data using the `id` from the URL and populates the form's `initialValues`.
*   Upon submission, it uses the `dataProvider`'s `update` method to save the changes.

#### Example: `ProductEditPage.tsx`

```tsx
import { Edit, useForm } from "@refinedev/antd";
import { Form, Input, InputNumber } from "antd";

export const ProductEditPage = () => {
  const { formProps, saveButtonProps } = useForm();

  return (
    <Edit saveButtonProps={saveButtonProps}>
      <Form {...formProps} layout="vertical">
        <Form.Item
          label="Name"
          name="name"
          rules={[{ required: true }]}
        >
          <Input />
        </Form.Item>
        <Form.Item
          label="Price"
          name="price"
          rules={[{ required: true }]}
        >
          <InputNumber />
        </Form.Item>
      </Form>
    </Edit>
  );
};
```

---

### Putting It All Together: Routing

Finally, you need to connect these components to your application's routes. If you are using `react-router-dom`, your setup would look like this:

```tsx
import { Refine } from "@refinedev/core";
import { ThemedLayoutV2 } from "@refinedev/antd";
import { BrowserRouter, Route, Routes, Outlet } from "react-router-dom";

// Import your page components
import { ProductListPage } from "./pages/products/list";
import { ProductCreatePage } from "./pages/products/create";
import { ProductShowPage } from "./pages/products/show";
import { ProductEditPage } from "./pages/products/edit";

export const App = () => (
    <BrowserRouter>
        <Refine
            // ... providers and resources
        >
            <Routes>
                <Route element={
                    <ThemedLayoutV2>
                        <Outlet />
                    </ThemedLayoutV2>
                }>
                    <Route path="/products">
                        <Route index element={<ProductListPage />} />
                        <Route path="create" element={<ProductCreatePage />} />
                        <Route path="show/:id" element={<ProductShowPage />} />
                        <Route path="edit/:id" element={<ProductEditPage />} />
                    </Route>
                </Route>
            </Routes>
        </Refine>
    </BrowserRouter>
);
```


You've now built the foundation for a complete CRUD interface for your `products` resource. You can follow this same pattern for any other resources in your application.

================
File: xdent-ops-frontend/.cursor/rules/refine-resources.mdc
================
---
description: 
globs: src/App.tsx
alwaysApply: false
---
Here is a comprehensive explanation on how to use the `resources` prop in the `<Refine />` component to define and manage your application's data entities.

***

### Adding Resources in Refine

In Refine, a **`resource`** is a fundamental concept that connects your API endpoints to your application's pages. It defines the paths for CRUD (Create, Read, Update, Delete) operations and provides essential metadata for UI components like navigation menus and breadcrumbs.

Resources are defined as an array of objects within the `resources` prop of the `<Refine />` component.

#### Resource Object Properties

Each resource object in the array has several key properties:

*   **`name`** (required): A `string` that identifies the resource. This name should typically match your API endpoint path (e.g., a `name: "products"` would correspond to the `/products` endpoint).
*   **`list`**: The path for the page that lists all records of the resource.
*   **`create`**: The path for the page used to create a new record.
*   **`edit`**: The path for the page used to edit an existing record. It must include an `:id` parameter.
*   **`show`**: The path for the page that displays the details of a single record. It must include an `:id` parameter.
*   **`meta`**: An optional object to store additional configuration for the resource. This is useful for UI customizations or passing extra data to providers.
    *   `label`: A user-friendly name for the resource, often used in menus.
    *   `icon`: An icon for the resource, displayed in the Sider menu.
    *   `canDelete`: A boolean flag to enable or disable the delete functionality for this resource in UI components like `<Edit>` and `<Show>` pages.

### How to Add a New Resource

Let's walk through adding a new `products` resource to the existing application from your example.

#### Step 1: Locate the `<Refine>` Component

First, find the `<Refine>` component in your main application file (e.g., `src/App.tsx`). You'll see the existing `resources` prop, which is an array.

**Before:**

```tsx
<Refine
    dataProvider={dataProvider("https://api.fake-rest.refine.dev")}
    // ...
    resources={[
      {
        name: "blog_posts",
        list: "/blog-posts",
        create: "/blog-posts/create",
        edit: "/blog-posts/edit/:id",
        show: "/blog-posts/show/:id",
        meta: {
          canDelete: true,
        },
      },
      {
        name: "categories",
        list: "/categories",
        create: "/categories/create",
        edit: "/categories/edit/:id",
        show: "/categories/show/:id",
        meta: {
          canDelete: true,
        },
      },
    ]}
    // ...
>
```

#### Step 2: Add a New Resource Object

To add a new `products` resource, simply add a new object to the `resources` array.

**After:**

```tsx
<Refine
    dataProvider={dataProvider("https://api.fake-rest.refine.dev")}
    // ...
    resources={[
      {
        name: "blog_posts",
        list: "/blog-posts",
        create: "/blog-posts/create",
        edit: "/blog-posts/edit/:id",
        show: "/blog-posts/show/:id",
        meta: {
          canDelete: true,
        },
      },
      {
        name: "categories",
        list: "/categories",
        create: "/categories/create",
        edit: "/categories/edit/:id",
        show: "/categories/show/:id",
        meta: {
          canDelete: true,
        },
      },
      // highlight-start
      {
        name: "products",
        list: "/products",
        create: "/products/create",
        edit: "/products/edit/:id",
        show: "/products/show/:id",
        meta: {
          canDelete: true,
          label: "My Awesome Products", // This will be the display name in the menu
        },
      },
      // highlight-end
    ]}
    // ...
>
```

#### Step 3: Create the Pages for the New Resource

After defining the resource, you need to create the corresponding page components and add them to your router configuration. For example, for the `/products` route, you would create a `ProductListPage` component.

```tsx
// In your router configuration (e.g., App.tsx within <Routes>)

<Route path="/products" element={<ProductListPage />} />
<Route path="/products/create" element={<ProductCreatePage />} />
<Route path="/products/edit/:id" element={<ProductEditPage />} />
<Route path="/products/show/:id" element={<ProductShowPage />} />
```

### What Happens Next?

By simply adding this new object to the `resources` array:

1.  **Automatic Menu Item:** Refine's `<Sider />` component (from UI integrations like Ant Design or Material UI) will automatically create a new navigation link for "My Awesome Products".
2.  **API Endpoint Mapping:** Refine's data hooks (like `useTable` or `useForm`) will now be able to use `"products"` as a valid resource name, automatically targeting the `https://api.fake-rest.refine.dev/products` endpoint.

3.  **Routing Integration:** Refine's navigation hooks (like `useNavigation`) will correctly generate URLs for all actions (`list`, `create`, etc.) associated with the `products` resource.

================
File: xdent-ops-frontend/.cursor/rules/troubleshooting.mdc
================
---
description: 
globs: 
alwaysApply: true
---
# Troubleshooting

================
File: xdent-ops-frontend/.eslintrc.cjs
================
/* eslint-env node */

module.exports = {
  env: { browser: true, es2020: true },
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: { ecmaVersion: "latest", sourceType: "module" },
  plugins: ["react-refresh"],
  rules: {
    "react-refresh/only-export-components": "warn",
  },
};

================
File: xdent-ops-frontend/.gitignore
================
# Logs

logs
_.log
npm-debug.log_
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
\*.local

# Editor directories and files

.vscode/_
!.vscode/extensions.json
.idea
.DS_Store
_.suo
_.ntvs_
_.njsproj
_.sln
\*.sw?

================
File: xdent-ops-frontend/.npmrc
================
legacy-peer-deps=true
strict-peer-dependencies=false

================
File: xdent-ops-frontend/.rules/DDL.sql
================
USE [XDentOps]
GO

/****** Object:  Table [dbo].[AppSettings]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AppSettings](
	[AppSettingId] [int] IDENTITY(1,1) NOT NULL,
	[Key] [nvarchar](255) NOT NULL,
	[Value] [nvarchar](max) NOT NULL,
	[DateAdded] [datetime2](7) NOT NULL,
	[UserAddedId] [nvarchar](450) NOT NULL,
	[DateModified] [datetime2](7) NULL,
	[UserModifiedId] [nvarchar](450) NULL,
PRIMARY KEY CLUSTERED 
(
	[AppSettingId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[Key] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetRoleClaims]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetRoleClaims](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RoleId] [nvarchar](128) NOT NULL,
	[ClaimType] [nvarchar](max) NULL,
	[ClaimValue] [nvarchar](max) NULL,
 CONSTRAINT [PK_AspNetRoleClaims] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetRoles]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetRoles](
	[Id] [nvarchar](128) NOT NULL,
	[Name] [nvarchar](256) NULL,
	[NormalizedName] [nvarchar](256) NULL,
	[ConcurrencyStamp] [nvarchar](max) NULL,
	[Description] [nvarchar](4000) NULL,
 CONSTRAINT [PK_AspNetRoles] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetUserClaims]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserClaims](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[ClaimType] [nvarchar](max) NULL,
	[ClaimValue] [nvarchar](max) NULL,
 CONSTRAINT [PK_AspNetUserClaims] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetUserLogins]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserLogins](
	[LoginProvider] [nvarchar](128) NOT NULL,
	[ProviderKey] [nvarchar](128) NOT NULL,
	[ProviderDisplayName] [nvarchar](max) NULL,
	[UserId] [nvarchar](128) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetUserRoles]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserRoles](
	[UserId] [nvarchar](128) NOT NULL,
	[RoleId] [nvarchar](128) NOT NULL
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetUsers]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUsers](
	[Id] [nvarchar](128) NOT NULL,
	[UserName] [nvarchar](256) NULL,
	[NormalizedUserName] [nvarchar](256) NULL,
	[Email] [nvarchar](256) NULL,
	[NormalizedEmail] [nvarchar](256) NULL,
	[EmailConfirmed] [bit] NOT NULL,
	[PasswordHash] [nvarchar](max) NULL,
	[SecurityStamp] [nvarchar](max) NULL,
	[ConcurrencyStamp] [nvarchar](max) NULL,
	[PhoneNumber] [nvarchar](max) NULL,
	[PhoneNumberConfirmed] [bit] NOT NULL,
	[TwoFactorEnabled] [bit] NOT NULL,
	[LockoutEnd] [datetimeoffset](7) NULL,
	[LockoutEnabled] [bit] NOT NULL,
	[AccessFailedCount] [int] NOT NULL,
	[FirstName] [nvarchar](255) NOT NULL,
	[LastName] [nvarchar](255) NOT NULL,
	[Suffix] [nvarchar](255) NULL,
	[IsActive] [bit] NOT NULL,
	[DateLastLogin] [datetime2](7) NULL,
	[Email2] [nvarchar](1000) NULL,
	[Phone2] [nvarchar](50) NULL,
	[PreferredName] [nvarchar](50) NULL,
	[Creds] [nvarchar](255) NULL,
	[ProfilePicUrl] [nvarchar](1000) NULL,
 CONSTRAINT [PK_AspNetUsers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[AspNetUserTokens]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[AspNetUserTokens](
	[UserId] [nvarchar](128) NOT NULL,
	[LoginProvider] [nvarchar](128) NOT NULL,
	[Name] [nvarchar](450) NOT NULL,
	[Value] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[Document]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Document](
	[DocumentId] [uniqueidentifier] NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[DocumentTypeId] [uniqueidentifier] NOT NULL,
	[FileName] [nvarchar](255) NOT NULL,
	[StoragePath] [nvarchar](2083) NOT NULL,
	[MimeType] [nvarchar](100) NOT NULL,
	[ExpirationDate] [datetimeoffset](7) NULL,
	[IsActive] [bit] NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
	[DateModified] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DocumentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[DocumentState]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[DocumentState](
	[DocumentStateId] [uniqueidentifier] NOT NULL,
	[StateName] [nvarchar](50) NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DocumentStateId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[StateName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[DocumentStateHistory]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[DocumentStateHistory](
	[DocumentStateHistoryId] [uniqueidentifier] NOT NULL,
	[DocumentId] [uniqueidentifier] NOT NULL,
	[DocumentStateId] [uniqueidentifier] NOT NULL,
	[ActorUserId] [nvarchar](128) NOT NULL,
	[Notes] [nvarchar](1000) NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DocumentStateHistoryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[DocumentType]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[DocumentType](
	[DocumentTypeId] [uniqueidentifier] NOT NULL,
	[TypeName] [nvarchar](100) NOT NULL,
	[IsComplianceRequired] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[DocumentTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[TypeName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[ManagerTechnicianAssignment]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ManagerTechnicianAssignment](
	[ManagerUserId] [nvarchar](128) NOT NULL,
	[TechnicianUserId] [nvarchar](128) NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ManagerUserId] ASC,
	[TechnicianUserId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[Module]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Module](
	[ModuleId] [nvarchar](4) NOT NULL,
	[ModuleName] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_Module] PRIMARY KEY CLUSTERED 
(
	[ModuleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[ModuleRoleLookup]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ModuleRoleLookup](
	[ModuleId] [nvarchar](4) NOT NULL,
	[RoleId] [nvarchar](128) NOT NULL,
 CONSTRAINT [PK_ModuleRoleLookup] PRIMARY KEY CLUSTERED 
(
	[ModuleId] ASC,
	[RoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[Notification]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Notification](
	[NotificationId] [uniqueidentifier] NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[Channel] [nvarchar](50) NOT NULL,
	[Subject] [nvarchar](255) NOT NULL,
	[Message] [nvarchar](max) NOT NULL,
	[IsRead] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[NotificationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[PaymentLog]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[PaymentLog](
	[PaymentLogId] [uniqueidentifier] NOT NULL,
	[TechnicianUserId] [nvarchar](128) NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[PaymentDate] [datetimeoffset](7) NOT NULL,
	[JobId] [nvarchar](100) NULL,
	[Notes] [nvarchar](1000) NULL,
	[RecordedByUserId] [nvarchar](128) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[PaymentLogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[ProfileNote]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ProfileNote](
	[NoteId] [uniqueidentifier] NOT NULL,
	[TechnicianUserId] [nvarchar](128) NOT NULL,
	[AuthorUserId] [nvarchar](128) NOT NULL,
	[NoteText] [nvarchar](max) NOT NULL,
	[IsActive] [bit] NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[NoteId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/****** Object:  Table [dbo].[TechnicianProfile]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[TechnicianProfile](
	[TechnicianId] [nvarchar](128) NOT NULL,
	[AvailabilityStatus] [nvarchar](50) NOT NULL,
	[PayRate] [decimal](18, 2) NULL,
	[ProfileReadinessPercent] [int] NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
	[DateModified] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[TechnicianId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[UserAgreement]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[UserAgreement](
	[UserAgreementId] [uniqueidentifier] NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[AgreementName] [nvarchar](100) NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[UserAgreementId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

/****** Object:  Table [dbo].[W9Data]    Script Date: 7/4/2025 2:03:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[W9Data](
	[W9DataId] [uniqueidentifier] NOT NULL,
	[UserId] [nvarchar](128) NOT NULL,
	[TaxYear] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[FullName] [nvarchar](255) NOT NULL,
	[BusinessName] [nvarchar](255) NULL,
	[TaxClassification] [nvarchar](100) NOT NULL,
	[AddressStreet] [nvarchar](255) NOT NULL,
	[AddressCityStateZip] [nvarchar](255) NOT NULL,
	[TaxIDNumber_Encrypted] [varbinary](max) NOT NULL,
	[DateAdded] [datetimeoffset](7) NOT NULL,
	[DateModified] [datetimeoffset](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[W9DataId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [dbo].[Document] ADD  DEFAULT (newid()) FOR [DocumentId]
GO

ALTER TABLE [dbo].[Document] ADD  DEFAULT ((1)) FOR [IsActive]
GO

ALTER TABLE [dbo].[Document] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[Document] ADD  DEFAULT (getutcdate()) FOR [DateModified]
GO

ALTER TABLE [dbo].[DocumentState] ADD  DEFAULT (newid()) FOR [DocumentStateId]
GO

ALTER TABLE [dbo].[DocumentState] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[DocumentStateHistory] ADD  DEFAULT (newid()) FOR [DocumentStateHistoryId]
GO

ALTER TABLE [dbo].[DocumentStateHistory] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[DocumentType] ADD  DEFAULT (newid()) FOR [DocumentTypeId]
GO

ALTER TABLE [dbo].[DocumentType] ADD  DEFAULT ((1)) FOR [IsComplianceRequired]
GO

ALTER TABLE [dbo].[ManagerTechnicianAssignment] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[Notification] ADD  DEFAULT (newid()) FOR [NotificationId]
GO

ALTER TABLE [dbo].[Notification] ADD  DEFAULT ((0)) FOR [IsRead]
GO

ALTER TABLE [dbo].[Notification] ADD  DEFAULT ((1)) FOR [IsActive]
GO

ALTER TABLE [dbo].[Notification] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[PaymentLog] ADD  DEFAULT (newid()) FOR [PaymentLogId]
GO

ALTER TABLE [dbo].[PaymentLog] ADD  DEFAULT ((1)) FOR [IsActive]
GO

ALTER TABLE [dbo].[PaymentLog] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[ProfileNote] ADD  DEFAULT (newid()) FOR [NoteId]
GO

ALTER TABLE [dbo].[ProfileNote] ADD  DEFAULT ((1)) FOR [IsActive]
GO

ALTER TABLE [dbo].[ProfileNote] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[TechnicianProfile] ADD  DEFAULT ('Unavailable') FOR [AvailabilityStatus]
GO

ALTER TABLE [dbo].[TechnicianProfile] ADD  DEFAULT ((0)) FOR [ProfileReadinessPercent]
GO

ALTER TABLE [dbo].[TechnicianProfile] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[TechnicianProfile] ADD  DEFAULT (getutcdate()) FOR [DateModified]
GO

ALTER TABLE [dbo].[UserAgreement] ADD  DEFAULT (newid()) FOR [UserAgreementId]
GO

ALTER TABLE [dbo].[UserAgreement] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[W9Data] ADD  DEFAULT (newid()) FOR [W9DataId]
GO

ALTER TABLE [dbo].[W9Data] ADD  DEFAULT ((1)) FOR [IsActive]
GO

ALTER TABLE [dbo].[W9Data] ADD  DEFAULT (getutcdate()) FOR [DateAdded]
GO

ALTER TABLE [dbo].[W9Data] ADD  DEFAULT (getutcdate()) FOR [DateModified]
GO

ALTER TABLE [dbo].[AspNetRoleClaims]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetRoleClaims_AspNetRoles_RoleId] FOREIGN KEY([RoleId])
REFERENCES [dbo].[AspNetRoles] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetRoleClaims] NOCHECK CONSTRAINT [FK_AspNetRoleClaims_AspNetRoles_RoleId]
GO

ALTER TABLE [dbo].[AspNetUserClaims]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetUserClaims_AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserClaims] NOCHECK CONSTRAINT [FK_AspNetUserClaims_AspNetUsers_UserId]
GO

ALTER TABLE [dbo].[AspNetUserLogins]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetUserLogins_AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserLogins] NOCHECK CONSTRAINT [FK_AspNetUserLogins_AspNetUsers_UserId]
GO

ALTER TABLE [dbo].[AspNetUserRoles]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetUserRoles_AspNetRoles_RoleId] FOREIGN KEY([RoleId])
REFERENCES [dbo].[AspNetRoles] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserRoles] NOCHECK CONSTRAINT [FK_AspNetUserRoles_AspNetRoles_RoleId]
GO

ALTER TABLE [dbo].[AspNetUserRoles]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetUserRoles_AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserRoles] NOCHECK CONSTRAINT [FK_AspNetUserRoles_AspNetUsers_UserId]
GO

ALTER TABLE [dbo].[AspNetUserTokens]  WITH NOCHECK ADD  CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AspNetUserTokens] NOCHECK CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId]
GO

ALTER TABLE [dbo].[Document]  WITH CHECK ADD  CONSTRAINT [FK_Document_DocumentType] FOREIGN KEY([DocumentTypeId])
REFERENCES [dbo].[DocumentType] ([DocumentTypeId])
GO

ALTER TABLE [dbo].[Document] CHECK CONSTRAINT [FK_Document_DocumentType]
GO

ALTER TABLE [dbo].[Document]  WITH CHECK ADD  CONSTRAINT [FK_Document_WebUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[Document] CHECK CONSTRAINT [FK_Document_WebUser]
GO

ALTER TABLE [dbo].[DocumentStateHistory]  WITH CHECK ADD  CONSTRAINT [FK_DocumentStateHistory_Document] FOREIGN KEY([DocumentId])
REFERENCES [dbo].[Document] ([DocumentId])
GO

ALTER TABLE [dbo].[DocumentStateHistory] CHECK CONSTRAINT [FK_DocumentStateHistory_Document]
GO

ALTER TABLE [dbo].[DocumentStateHistory]  WITH CHECK ADD  CONSTRAINT [FK_DocumentStateHistory_DocumentState] FOREIGN KEY([DocumentStateId])
REFERENCES [dbo].[DocumentState] ([DocumentStateId])
GO

ALTER TABLE [dbo].[DocumentStateHistory] CHECK CONSTRAINT [FK_DocumentStateHistory_DocumentState]
GO

ALTER TABLE [dbo].[DocumentStateHistory]  WITH CHECK ADD  CONSTRAINT [FK_DocumentStateHistory_WebUser] FOREIGN KEY([ActorUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[DocumentStateHistory] CHECK CONSTRAINT [FK_DocumentStateHistory_WebUser]
GO

ALTER TABLE [dbo].[ManagerTechnicianAssignment]  WITH CHECK ADD  CONSTRAINT [FK_ManagerTechnicianAssignment_Manager] FOREIGN KEY([ManagerUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[ManagerTechnicianAssignment] CHECK CONSTRAINT [FK_ManagerTechnicianAssignment_Manager]
GO

ALTER TABLE [dbo].[ManagerTechnicianAssignment]  WITH CHECK ADD  CONSTRAINT [FK_ManagerTechnicianAssignment_Technician] FOREIGN KEY([TechnicianUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[ManagerTechnicianAssignment] CHECK CONSTRAINT [FK_ManagerTechnicianAssignment_Technician]
GO

ALTER TABLE [dbo].[ModuleRoleLookup]  WITH CHECK ADD  CONSTRAINT [FK_ModuleRoleLookup_AspNetRoles] FOREIGN KEY([RoleId])
REFERENCES [dbo].[AspNetRoles] ([Id])
GO

ALTER TABLE [dbo].[ModuleRoleLookup] CHECK CONSTRAINT [FK_ModuleRoleLookup_AspNetRoles]
GO

ALTER TABLE [dbo].[ModuleRoleLookup]  WITH CHECK ADD  CONSTRAINT [FK_ModuleRoleLookup_Module] FOREIGN KEY([ModuleId])
REFERENCES [dbo].[Module] ([ModuleId])
GO

ALTER TABLE [dbo].[ModuleRoleLookup] CHECK CONSTRAINT [FK_ModuleRoleLookup_Module]
GO

ALTER TABLE [dbo].[Notification]  WITH CHECK ADD  CONSTRAINT [FK_Notification_WebUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[Notification] CHECK CONSTRAINT [FK_Notification_WebUser]
GO

ALTER TABLE [dbo].[PaymentLog]  WITH CHECK ADD  CONSTRAINT [FK_PaymentLog_RecordedBy] FOREIGN KEY([RecordedByUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[PaymentLog] CHECK CONSTRAINT [FK_PaymentLog_RecordedBy]
GO

ALTER TABLE [dbo].[PaymentLog]  WITH CHECK ADD  CONSTRAINT [FK_PaymentLog_Technician] FOREIGN KEY([TechnicianUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[PaymentLog] CHECK CONSTRAINT [FK_PaymentLog_Technician]
GO

ALTER TABLE [dbo].[ProfileNote]  WITH CHECK ADD  CONSTRAINT [FK_ProfileNote_Author] FOREIGN KEY([AuthorUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[ProfileNote] CHECK CONSTRAINT [FK_ProfileNote_Author]
GO

ALTER TABLE [dbo].[ProfileNote]  WITH CHECK ADD  CONSTRAINT [FK_ProfileNote_Technician] FOREIGN KEY([TechnicianUserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[ProfileNote] CHECK CONSTRAINT [FK_ProfileNote_Technician]
GO

ALTER TABLE [dbo].[TechnicianProfile]  WITH CHECK ADD  CONSTRAINT [FK_TechnicianProfile_WebUser] FOREIGN KEY([TechnicianId])
REFERENCES [dbo].[AspNetUsers] ([Id])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[TechnicianProfile] CHECK CONSTRAINT [FK_TechnicianProfile_WebUser]
GO

ALTER TABLE [dbo].[UserAgreement]  WITH CHECK ADD  CONSTRAINT [FK_UserAgreement_WebUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[UserAgreement] CHECK CONSTRAINT [FK_UserAgreement_WebUser]
GO

ALTER TABLE [dbo].[W9Data]  WITH CHECK ADD  CONSTRAINT [FK_W9Data_WebUser] FOREIGN KEY([UserId])
REFERENCES [dbo].[AspNetUsers] ([Id])
GO

ALTER TABLE [dbo].[W9Data] CHECK CONSTRAINT [FK_W9Data_WebUser]
GO


USE [XDentOps]
GO

/****** Object:  View [dbo].[UserView]    Script Date: 7/4/2025 2:05:02 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[UserView]
AS
SELECT
    -- Core User Information
    u.Id AS UserID,
    r.Id AS RoleID,
    r.Name AS RoleName,
    u.Email,
    u.FirstName,
    u.LastName,
    u.FirstName + ' ' + u.LastName AS FullName,
    u.PhoneNumber,
    u.ProfilePicUrl AS ProfilePictureUrl,
    u.IsActive,
    u.UserName,

    -- Primary Address Information from the new Address table
    a.AddressID,
    a.AddressType,
    a.AddressLine1,
    a.AddressLine2,
    a.City,
    a.State,
    a.ZipCode,
    a.Country

FROM
    dbo.AspNetUsers AS u
INNER JOIN
    dbo.AspNetUserRoles AS ur ON u.Id = ur.UserId
INNER JOIN
    dbo.AspNetRoles AS r ON ur.RoleId = r.Id
LEFT JOIN
    -- Use a LEFT JOIN to ensure all users are returned, even if they don't have a primary address yet.
    -- The join condition specifically looks for the address marked as primary.
    dbo.Address AS a ON u.Id = a.UserID AND a.IsPrimary = 1;

GO

/****** Object:  View [dbo].[TechnicianView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[TechnicianView]
AS
SELECT
    uv.*,	
    --
    tp.AvailabilityStatus,
    tp.PayRate,
    tp.ProfileReadinessPercent,
    tp.DateAdded AS ProfileDateAdded,
    tp.DateModified AS ProfileDateModified
FROM
    dbo.UserView AS uv
INNER JOIN
    dbo.TechnicianProfile AS tp ON uv.UserID = tp.TechnicianID;
GO

/****** Object:  View [dbo].[TechnicianRosterView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[TechnicianRosterView]
AS
SELECT
    uv.UserID,
    uv.FirstName,
    uv.LastName,
    uv.FullName,
    uv.Email,
    uv.PhoneNumber,
    uv.ProfilePictureUrl,
    tp.AvailabilityStatus,
    ComplianceStatus = CASE
        -- Condition 1: Check if there are any required documents that are missing entirely.
        WHEN EXISTS (
            SELECT 1
            FROM dbo.DocumentType dt
            WHERE dt.IsComplianceRequired = 1
            AND NOT EXISTS (
                SELECT 1
                FROM dbo.Document d
                WHERE d.UserID = uv.UserID AND d.DocumentTypeID = dt.DocumentTypeID AND d.IsActive = 1
            )
        ) THEN 'Missing Required Documents'
        -- Condition 2: Check if any active, required documents have expired.
        WHEN EXISTS (
            SELECT 1
            FROM dbo.Document d
            INNER JOIN dbo.DocumentType dt ON d.DocumentTypeID = dt.DocumentTypeID
            WHERE d.UserID = uv.UserID AND d.IsActive = 1 AND dt.IsComplianceRequired = 1
            AND d.ExpirationDate IS NOT NULL AND d.ExpirationDate < GETUTCDATE()
        ) THEN 'Expired Documents'
        -- Otherwise, they are compliant.
        ELSE 'Compliant'
    END
FROM
    dbo.UserView AS uv
INNER JOIN
    dbo.TechnicianProfile AS tp ON uv.UserID = tp.TechnicianID
WHERE
    uv.RoleName = 'Technician';
GO

/****** Object:  View [dbo].[DocumentView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[DocumentView]
AS
SELECT
    d.DocumentID,
    d.UserID,
    uv.FullName AS UserFullName,
    d.DocumentTypeID,
    dt.TypeName AS DocumentTypeName,
    d.FileName,
    d.StoragePath,
    d.MimeType,
    d.ExpirationDate,
    d.IsActive,
    d.DateAdded,
    d.DateModified,
    -- Get details from the most recent status history record
    LastState.StateName AS CurrentStateName,
    LastState.StateDateAdded AS CurrentStateDateAdded,
    LastState.ActorFullName AS CurrentStateActorFullName,
    LastState.Notes AS CurrentStateNotes
FROM
    dbo.Document AS d
INNER JOIN
    dbo.UserView AS uv ON d.UserID = uv.UserID
INNER JOIN
    dbo.DocumentType AS dt ON d.DocumentTypeID = dt.DocumentTypeID
OUTER APPLY (
    SELECT TOP 1
        ds.StateName,
        dsh.DateAdded AS StateDateAdded,
        actor.FullName AS ActorFullName,
        dsh.Notes
    FROM
        dbo.DocumentStateHistory dsh
    INNER JOIN
        dbo.DocumentState ds ON dsh.DocumentStateID = ds.DocumentStateID
    INNER JOIN
        dbo.UserView actor ON dsh.ActorUserID = actor.UserID
    WHERE
        dsh.DocumentID = d.DocumentID
    ORDER BY
        dsh.DateAdded DESC
) AS LastState;
GO

/****** Object:  View [dbo].[ProfileNoteView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[ProfileNoteView]
AS
SELECT
    pn.NoteID,
    pn.TechnicianUserID,
    tech.FullName AS TechnicianFullName,
    pn.AuthorUserID,
    author.FullName AS AuthorFullName,
    pn.NoteText,
    pn.IsActive,
    pn.DateAdded
FROM
    dbo.ProfileNote AS pn
INNER JOIN
    dbo.UserView AS tech ON pn.TechnicianUserID = tech.UserID
INNER JOIN
    dbo.UserView AS author ON pn.AuthorUserID = author.UserID;
GO

/****** Object:  View [dbo].[W9DataView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[W9DataView]
AS
SELECT
    w9.W9DataID,
    w9.UserID,
    uv.FullName AS UserFullName,
    w9.TaxYear,
    w9.IsActive,
    w9.FullName,
    w9.BusinessName,
    w9.TaxClassification,
    w9.AddressStreet,
    w9.AddressCityStateZip,
    w9.DateAdded,
    w9.DateModified
FROM
    dbo.W9Data AS w9
INNER JOIN
    dbo.UserView AS uv ON w9.UserID = uv.UserID;
GO

/****** Object:  View [dbo].[PaymentLogView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[PaymentLogView]
AS
SELECT
    pl.PaymentLogID,
    pl.TechnicianUserID,
    tech.FullName AS TechnicianFullName,
    pl.Amount,
    pl.PaymentDate,
    pl.JobID,
    pl.Notes,
    pl.RecordedByUserID,
    recorder.FullName AS RecordedByFullName,
    pl.IsActive,
    pl.DateAdded
FROM
    dbo.PaymentLog AS pl
INNER JOIN
    dbo.UserView AS tech ON pl.TechnicianUserID = tech.UserID
INNER JOIN
    dbo.UserView AS recorder ON pl.RecordedByUserID = recorder.UserID;
GO

/****** Object:  View [dbo].[NotificationView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[NotificationView]
AS
SELECT
    n.NotificationID,
    n.UserID,
    uv.FullName AS UserFullName,
    n.Channel,
    n.Subject,
    n.Message,
    n.IsRead,
    n.IsActive,
    n.DateAdded
FROM
    dbo.Notification AS n
INNER JOIN
    dbo.UserView AS uv ON n.UserID = uv.UserID;
GO

/****** Object:  View [dbo].[UserAgreementView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   VIEW [dbo].[UserAgreementView]
AS
SELECT
    ua.UserAgreementID,
    ua.UserID,
    uv.FullName AS UserFullName,
    ua.AgreementName,
    ua.DateAdded
FROM
    dbo.UserAgreement AS ua
INNER JOIN
    dbo.UserView AS uv ON ua.UserID = uv.UserID;
GO

/****** Object:  View [dbo].[RoleAllowedModules]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE   VIEW [dbo].[RoleAllowedModules]
AS
--1) Common for all
SELECT
	R.Id as RoleId,
	R.Name as RoleName,
	M.ModuleId, 
	M.ModuleName
FROM
	AspNetRoles R
CROSS JOIN Module M
WHERE
	M.ModuleId = 'COMM'
--	
UNION
--2) SuperUser gets all modules
SELECT
	R.Id as RoleId,
	R.Name as RoleName,
	M.ModuleId, 
	M.ModuleName
FROM
	AspNetRoles R
CROSS JOIN Module M
WHERE
	R.Name IN ('SuperAdmin')
--	
UNION
--3) Explictly assigned modules
SELECT
	R.Id as RoleId,
	R.Name as RoleName,
	M.ModuleId,
	M.ModuleName
FROM
	AspNetRoles R 
INNER JOIN ModuleRoleLookup MR ON 
	(MR.RoleID = R.Id)
INNER JOIN Module M ON 
	M.ModuleId = MR.ModuleId;
GO

/****** Object:  View [dbo].[RolesView]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- dbo.RolesView source

CREATE   VIEW [dbo].[RolesView] 
AS 
SELECT
	R.Id,
	R.Name,
	R.NormalizedName,
	R.Description,
	(SELECT COUNT(*) FROM AspNetUserRoles UR WHERE UR.RoleId = R.Id) AS UserCount,
	(SELECT STRING_AGG(RAM.ModuleName, ', ') FROM RoleAllowedModules RAM WHERE RAM.RoleId = R.Id) AS AllowedModules
FROM
	AspNetRoles R
GO

/****** Object:  View [dbo].[UserAllowedModules]    Script Date: 7/4/2025 2:05:03 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- dbo.UserAllowedModules source

CREATE    VIEW [dbo].[UserAllowedModules]
AS
--1) Everyone gets common
SELECT
	Id as UserId,
	UserName,
	M.ModuleId, 
	M.ModuleName
FROM
	ASPNETUSERS U
CROSS JOIN MODULE M
WHERE
	U.IsActive = 1
	AND M.ModuleId = 'COMM'
--	
UNION
--2) Explicit roles
SELECT
	U.Id as UserId, 
	U.UserName,
	RAM.ModuleId,
	RAM.ModuleName
FROM
	AspNetUsers U
INNER JOIN AspNetUserRoles UR ON 
	UR.UserId = U.Id 
INNER JOIN RoleAllowedModules RAM ON 
	RAM.RoleId = UR.RoleId
	

GO

================
File: xdent-ops-frontend/.rules/RULE-AZDO-TASKS.md
================
# RULE-AZDO-TASKS.md - Create Tasks Under User Story

## Purpose

This rule defines the workflow for creating frontend and backend tasks under a User Story when given a work item ID.

## Workflow Steps

### Step 1: Get User Story Details

```bash
az boards work-item show --id {WORK_ITEM_ID}
```

### Step 2: Validate Work Item

Check if the work item meets these criteria:

- **Work Item Type**: Must be "User Story"

**If validation fails, reject with reason:**

- "Work item #{ID} is a {WorkItemType}. Only User Stories are supported for task creation."

### Step 3: Review User Story Content

- Analyze the User Story title and description
- Review acceptance criteria
- Understand the business requirements
- Reference database schema from `.rules/DDL.sql` if needed

### Step 4: Create Frontend Task (IF APPLICABLE; Some User Stories will be BACKEND ONLY)

```bash
az boards work-item create \
  --title "FE: {Frontend task title based on User Story}" \
  --type "Task" \
  --parent {WORK_ITEM_ID} \
  --description "Implement frontend components and logic for {User Story summary}.

Requirements:
- Create/update React components using Refine framework
- Implement UI/UX as per acceptance criteria
- Handle client-side validation and state management
- Integrate with backend API endpoints
- Ensure responsive design and accessibility

Technical Notes:
- Use existing component patterns and conventions
- Types will be auto-generated from database schema
- Follow established routing and authentication patterns"
```

### Step 5: Create Backend Task (IF APPLICABLE; Some User Stories will be FRONTEND ONLY)

```bash
az boards work-item create \
  --title "BE: {Backend task title based on User Story}" \
  --type "Task" \
  --parent {WORK_ITEM_ID} \
  --description "Implement backend API and business logic for {User Story summary}.

Requirements:
- Create/update .NET Core Web API controllers and services
- Implement business logic and data validation
- Add/modify database operations (CRUD as needed)
- Ensure proper error handling and logging

Technical Notes:
- Follow existing service and repository patterns
- Types auto-generated from database schema in frontend and backend
- Implement proper authentication/authorization
```

### Step 6: Assign and Set State

```bash
# Assign both tasks to kc.abramson@gmail.com
az boards work-item update --id {FRONTEND_TASK_ID} --assigned-to "kc.abramson@gmail.com"
az boards work-item update --id {BACKEND_TASK_ID} --assigned-to "kc.abramson@gmail.com"
```

## Example Task Titles Based on User Story

**User Story**: "As a user, I want to manage my profile information"

**Generated Tasks**:

- `FE: Profile management UI and form handling`
- `BE: Profile API endpoints and validation logic`

**User Story**: "As an admin, I want to view system reports"

**Generated Tasks**:

- `FE: Admin dashboard with report visualization`
- `BE: Report generation and data aggregation APIs`

## Example Usage

```
User: "Create tasks for User Story 1234"

Agent Response:
1. ✅ Retrieved User Story 1234: "User profile management"
2. ✅ Validated as User Story work item
3. ✅ Analyzed requirements and acceptance criteria
4. ✅ Created FE task: "FE: Profile management UI and form handling" (ID: 1235)
5. ✅ Created BE task: "BE: Profile API endpoints and validation logic" (ID: 1236)
6. ✅ Both tasks assigned to kc.abramson@gmail.com
```

## Error Handling

- If work item doesn't exist: "Work item #{ID} not found"
- If not a User Story: "Work item #{ID} is not a User Story"
- If task creation fails: "Failed to create task: {error details}"

## Notes

- Tasks will automatically inherit area path and iteration from parent User Story
- Both tasks reference `.rules/DDL.sql` for database schema context
- Task descriptions are intentionally high-level for AI agent interpretation
- Follow existing project patterns and conventions

================
File: xdent-ops-frontend/.rules/RULE-AZDO-WI.md
================
# RULE-AZDO-WI.md - Azure DevOps Work Item Completion Instructions

## Purpose

This rule defines the complete workflow for processing and completing Azure DevOps work items when referenced by ID number.

## Workflow Steps

### Step 1: Ingest Work Item List

```bash
az boards query --wiql "SELECT [System.Id], [System.Title], [System.WorkItemType], [System.State], [System.AssignedTo], [System.CreatedDate], [System.ChangedDate], [System.AreaPath], [System.IterationPath], [System.Tags], [Microsoft.VSTS.Common.Priority], [Microsoft.VSTS.Common.Severity], [System.Description], [System.Parent], [Microsoft.VSTS.Common.AcceptanceCriteria] FROM WorkItems ORDER BY [System.Id]"
```

### Step 2: Validate Work Item Eligibility

Check if the work item meets these criteria:

- **Work Item Type**: Must be either "Task" or "User Story"
- **State**: Must be "New", "Pending", or "Active"

**If validation fails, reject with specific reason:**

- "Work item #{ID} is a {WorkItemType}. Only Tasks and User Stories are supported."
- "Work item #{ID} is in '{State}' state. Only New, Pending, or Active items can be completed."

### Step 3: Get Work Item Details and Update Assignment

```bash
# Get detailed work item information
az boards work-item show --id {WORK_ITEM_ID}

# Assign to kc.abramson@gmail.com
az boards work-item update --id {WORK_ITEM_ID} --assigned-to "kc.abramson@gmail.com"

# If not Active, set to Active
az boards work-item update --id {WORK_ITEM_ID} --state "Active"
```

### Step 4: Analyze Codebase

- Review current codebase structure
- Understand existing patterns and conventions
- Identify relevant files and components for the work item
- Check for dependencies and related code

### Step 5: Create Implementation Plan

Based on work item requirements:

- Break down the task into logical steps
- Identify files that need to be created/modified
- Plan the implementation approach
- Consider testing requirements
- Review acceptance criteria (if User Story)

### Step 6: Complete the Task

- Implement the required changes
- Follow existing code patterns and conventions
- Write/update tests as needed
- Ensure all acceptance criteria are met
- Verify the solution works as expected

### Step 7: Update Work Item with Detailed Comment

Add a comprehensive comment describing what was accomplished:

```bash
az boards work-item update --id {WORK_ITEM_ID} --discussion "Claude Code Edit: [Detailed description of changes made]

- Files modified: [list key files]
- Key changes: [summarize main implementations]
- Tests added/updated: [testing details if applicable]
- Acceptance criteria addressed: [for User Stories]
- Any considerations or notes: [technical details, dependencies, etc.]"
```

### Step 8: Close Work Item

**For User Stories:**

```bash
az boards work-item update --id {WORK_ITEM_ID} --state "Resolved"
```

**For Tasks:**

```bash
az boards work-item update --id {WORK_ITEM_ID} --state "Closed"
```

## Example Usage

```
User: "Follow instructions in RULE-AZDO-WI.md for 1234"

Agent Response:
1. ✅ Fetching work item list...
2. ✅ Validating work item 1234: User Story in Active state
3. ✅ Assigned to kc.abramson@gmail.com and set to Active
4. ✅ Analyzing codebase...
5. ✅ Implementation plan created
6. ✅ Implementing changes...
7. ✅ Added detailed comment with "Claude Code Edit" summary
8. ✅ Work item 1234 resolved successfully
```

## Error Handling

- If work item doesn't exist: "Work item #{ID} not found"
- If Azure CLI not authenticated: "Please authenticate with Azure DevOps using 'az login'"
- If insufficient permissions: "Insufficient permissions to update work item #{ID}"

## Notes

- Always confirm successful completion with the user
- Provide summary of changes made
- Include any relevant file paths or key implementations
- If implementation is complex, ask for user confirmation before proceeding

================
File: xdent-ops-frontend/CLAUDE.md
================
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

XDent Ops Frontend is a React-based admin portal built with Refine framework for managing dental technician operations. It connects to an ASP.NET Core backend API.

## Essential Commands

```bash
# Install dependencies (uses pnpm)
pnpm install

# Run development server
pnpm dev

# Build for production
pnpm build

# Start production server
pnpm start

# Generate TypeScript types from backend (run from backend directory)
cd ../xdent-ops-dotnet-backend && nswag run XDentOpsAPI.nswag
```

## Architecture

### Frontend Stack

- **Framework**: React 18 with TypeScript (strict mode enabled)
- **Meta-framework**: Refine (for admin panel features)
- **UI Library**: Ant Design v5
- **Build Tool**: Vite
- **Package Manager**: pnpm
- **Authentication**: Currently Google OAuth (needs migration to backend JWT auth)

### Key Directories

- `src/pages/` - Page components organized by feature (technicians/, Dashboard.tsx, login.tsx)
- `src/providers/` - Data providers (currently has unused dab-provider.ts)
- `src/services/XDentOps/api.ts` - Auto-generated TypeScript types from backend
- `src/components/` - Reusable UI components
- `src/interfaces/` - Custom TypeScript interfaces

### Backend Integration

- **API Base URL**: `https://localhost:7169` (proxied via Vite as `/api`)
- **Authentication**: JWT Bearer tokens (backend expects ASP.NET Identity)
- **Data Provider**: Currently using simple-rest, but dab-provider.ts exists unused

## Critical Issues to Address

1. **Authentication Mismatch**: Frontend uses Google OAuth while backend expects JWT from ASP.NET Identity login
2. **No API Client**: Despite having generated types, there's no actual API client implementation
3. **Data Provider Confusion**: Code imports dabProvider but uses simple-rest provider

## Working with the Backend

The backend is an ASP.NET Core API located at `../xdent-ops-dotnet-backend/`

### Key Backend Endpoints

- `POST /Account/login` - Login with email/password, returns JWT
- `GET/POST/PUT/DELETE /Technician` - CRUD operations for technicians
- Swagger docs available at `https://localhost:7169/swagger`

### Running Both Services

```bash
# Terminal 1: Backend
cd ../xdent-ops-dotnet-backend
dotnet run --launch-profile https

# Terminal 2: Frontend
cd ../xdent-ops-frontend
pnpm dev
```

## Development Patterns

### Adding New CRUD Resources

1. Generate types by running nswag from backend directory
2. Create page components in `src/pages/{resource}/` following the technicians pattern:
   - `list.tsx` - Table view with CRUD actions
   - `create.tsx` - Creation form
   - `edit.tsx` - Edit form
   - `show.tsx` - Detail view
3. Add resource to App.tsx routes

### API Integration Pattern

Currently using Refine's simple-rest provider with axios interceptor for JWT:

```typescript
// Token is stored in localStorage as 'token'
// Axios interceptor adds: Authorization: Bearer {token}
```

## Testing

**No testing framework is currently configured**. When adding tests, consider:

- Jest or Vitest for unit tests
- React Testing Library for component tests
- Cypress or Playwright for E2E tests

## How-To

List all azdo items. Run:

```bash
az boards query --wiql "SELECT [System.Id], [System.Title], [System.WorkItemType], [System.State], [System.AssignedTo], [System.CreatedDate], [System.ChangedDate], [System.AreaPath], [System.IterationPath], [System.Tags], [Microsoft.VSTS.Common.Priority], [Microsoft.VSTS.Common.Severity], [System.Description], [System.Parent], [Microsoft.VSTS.Common.AcceptanceCriteria] FROM WorkItems WHERE [System.TeamProject] = 'XDent' ORDER BY [System.Id]"
```

================
File: xdent-ops-frontend/Dockerfile
================
# This Dockerfile uses `serve` npm package to serve the static files with node process.
# You can find the Dockerfile for nginx in the following link:
# https://github.com/refinedev/dockerfiles/blob/main/vite/Dockerfile.nginx
FROM refinedev/node:18 AS base

FROM base as deps

COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* .npmrc* ./

RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

FROM base as builder

ENV NODE_ENV production

COPY --from=deps /app/refine/node_modules ./node_modules

COPY . .

RUN npm run build

FROM base as runner

ENV NODE_ENV production

RUN npm install -g serve

COPY --from=builder /app/refine/dist ./

USER refine

CMD ["serve"]

================
File: xdent-ops-frontend/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="refine | Build your React-based CRUD applications, without constraints."
    />
    <meta
      data-rh="true"
      property="og:image"
      content="https://refine.dev/img/refine_social.png"
    />
    <meta
      data-rh="true"
      name="twitter:image"
      content="https://refine.dev/img/refine_social.png"
    />
    <title>XDent Ops Portal</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script type="module" src="/src/index.tsx"></script>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm dev` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: xdent-ops-frontend/package.json
================
{
  "name": "xdent-ops-frontend",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "dependencies": {
    "@refinedev/cli": "^2.16.21",
    "@refinedev/core": "^4.47.1",
    "@refinedev/devtools": "^1.1.32",
    "@refinedev/kbar": "^1.3.6",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-router": "^7.0.2",
    "@refinedev/simple-rest": "^5.0.1",
    "@refinedev/antd": "^5.44.0",
    "antd": "^5.17.0",
    "@ant-design/icons": "^5.5.1",
    "@uiw/react-md-editor": "^3.19.5",
    "@refinedev/react-router": "^1.0.0",
    "axios": "^1.6.2"
  },
  "devDependencies": {
    "@types/node": "^18.16.2",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "@typescript-eslint/eslint-plugin": "^5.57.1",
    "@typescript-eslint/parser": "^5.57.1",
    "@vitejs/plugin-react": "^4.0.0",
    "eslint": "^8.38.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.3.4",
    "typescript": "^5.4.2",
    "vite": "^4.3.1"
  },
  "scripts": {
    "dev": "refine dev",
    "build": "tsc && refine build",
    "start": "refine start",
    "refine": "refine"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "refine": {
    "projectId": "SsE5XT-Bt8UMq-GIxZwn"
  }
}

================
File: xdent-ops-frontend/public/refine.svg
================
<svg width="238" height="65" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g clip-path="url(#clip0)">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M95.95 19.414h5.867a5.23 5.23 0 013.691 1.523 5.189 5.189 0 011.529 3.676c0 1.38-.55 2.702-1.529 3.677a5.23 5.23 0 01-3.691 1.523h-5.52a.917.917 0 00-.915.912v27.514a6.739 6.739 0 01-1.988 4.78A6.79 6.79 0 0188.596 65a6.8 6.8 0 01-4.799-1.98 6.747 6.747 0 01-1.987-4.78V17.333c0-5.314 1.58-9.532 4.74-12.654C89.71 1.558 94.16-.002 99.902 0c1.949-.005 3.891.216 5.788.659 1.141.26 2.249.644 3.306 1.146a1.583 1.583 0 01.809 1.976l-2.475 6.802a1.58 1.58 0 01-1.509 1.033 1.59 1.59 0 01-.63-.14 9.737 9.737 0 00-3.966-.798c-4.119 0-6.177 2.254-6.175 6.76v1.08a.914.914 0 00.9.896zm81.67 3.985c4.176 3.989 6.264 9.477 6.264 16.464v18.374a6.746 6.746 0 01-1.988 4.78 6.797 6.797 0 01-4.798 1.98h-.175a6.8 6.8 0 01-4.799-1.98 6.749 6.749 0 01-1.987-4.78V40.3c0-3.872-.855-6.79-2.565-8.752-1.71-1.963-4.219-2.95-7.527-2.964-3.246 0-5.71.988-7.394 2.964-1.684 1.976-2.524 4.893-2.522 8.752V58.24a6.746 6.746 0 01-1.988 4.78 6.797 6.797 0 01-4.798 1.98c-1.8 0-3.526-.712-4.798-1.98a6.746 6.746 0 01-1.988-4.78V39.866c0-6.991 2.088-12.48 6.264-16.463 4.176-3.985 9.975-5.978 17.399-5.98 7.424-.002 13.224 1.99 17.4 5.976zm25.64 21.145h30.965a3.77 3.77 0 002.614-1.038A3.743 3.743 0 00238 40.952v-.046c0-4.854-1.059-9.114-3.176-12.783a21.586 21.586 0 00-8.743-8.452c-3.713-1.963-7.86-2.944-12.442-2.944-4.693 0-8.94 1.024-12.739 3.072a22.824 22.824 0 00-8.964 8.581 23.76 23.76 0 00-3.263 12.348c0 4.625 1.102 8.757 3.306 12.394a22.606 22.606 0 009.394 8.538c4.05 2.05 8.719 3.076 14.008 3.076 5.628 0 10.357-1.11 14.187-3.33a5.425 5.425 0 002.655-3.875 5.416 5.416 0 00-1.372-4.488l-.073-.08c-1.626-1.754-4.634-2.172-6.727-1.007-.592.332-1.207.62-1.841.863a18.065 18.065 0 01-6.482 1.083c-3.539 0-6.493-.837-8.862-2.512a10.87 10.87 0 01-4.297-5.927.718.718 0 01.691-.919zm-.889-8.992a10.75 10.75 0 013.613-6c2.087-1.734 4.672-2.598 7.754-2.591 3.015 0 5.567.878 7.656 2.634A10.916 10.916 0 01225 35.548a.898.898 0 01-.173.767.91.91 0 01-.71.343h-20.86a.91.91 0 01-.886-.703.912.912 0 010-.403zm-81.742-15.235c1.8 0 3.526.712 4.798 1.98a6.746 6.746 0 011.988 4.78V55.1a6.746 6.746 0 01-1.988 4.78 6.8 6.8 0 01-9.597 0 6.749 6.749 0 01-1.987-4.78V27.077a6.737 6.737 0 011.987-4.78 6.793 6.793 0 014.799-1.98zm0-2.89a9.719 9.719 0 00-6.846 2.83 9.646 9.646 0 00-2.839 6.82V55.1a9.626 9.626 0 002.837 6.822 9.702 9.702 0 006.848 2.825 9.704 9.704 0 006.848-2.825 9.63 9.63 0 002.837-6.822V27.077a9.643 9.643 0 00-2.84-6.82 9.715 9.715 0 00-6.845-2.83zm-90.764.288a30.06 30.06 0 00-5.725 6.997 30.341 30.341 0 00-1.647 3.233c-2.758.183-4.892 1.152-6.399 2.908-1.681 1.962-2.522 4.88-2.522 8.752v18.63a6.747 6.747 0 01-1.987 4.78 6.8 6.8 0 01-4.799 1.98 6.8 6.8 0 01-4.798-1.98A6.747 6.747 0 010 58.236V39.17c0-6.989 2.088-12.477 6.264-16.463 4.176-3.987 9.975-5.98 17.4-5.98a34.097 34.097 0 016.346.556l-.146.432zm11.855 26.83h30.966c.971 0 1.905-.373 2.607-1.043a3.744 3.744 0 001.157-2.596c-.002-4.854-1.06-9.114-3.176-12.783a21.603 21.603 0 00-8.743-8.452c-3.713-1.963-7.86-2.944-12.442-2.944-4.698-.002-8.946 1.023-12.745 3.076a22.835 22.835 0 00-8.951 8.577 23.75 23.75 0 00-3.263 12.348c0 4.625 1.102 8.757 3.306 12.394a22.637 22.637 0 009.397 8.538c4.05 2.05 8.72 3.076 14.008 3.076 5.624 0 10.353-1.11 14.187-3.33a5.409 5.409 0 002.48-6.276 5.415 5.415 0 00-1.2-2.087l-.07-.079c-1.626-1.755-4.634-2.173-6.727-1.008-.592.332-1.207.62-1.84.863a18.068 18.068 0 01-6.483 1.083c-3.539 0-6.494-.837-8.865-2.512a10.895 10.895 0 01-4.297-5.927.72.72 0 01.694-.919zm-.889-8.993a10.75 10.75 0 013.613-6c2.087-1.734 4.665-2.598 7.735-2.591 3.016 0 5.57.878 7.658 2.634a10.935 10.935 0 013.613 5.954.901.901 0 01-.488 1.018.912.912 0 01-.394.091H41.714a.911.911 0 01-.883-.704.903.903 0 010-.402zm79.797-3.49c2.852 0 5.163-2.303 5.163-5.143 0-2.841-2.311-5.144-5.163-5.144-2.851 0-5.163 2.303-5.163 5.144 0 2.84 2.312 5.143 5.163 5.143z" fill="#fff"/>
  </g>
  <defs>
    <clipPath id="clip0">
      <path fill="#fff" d="M0 0h238v65H0z"/>
    </clipPath>
  </defs>
</svg>

================
File: xdent-ops-frontend/README.MD
================
# xdent-ops-frontend

<div align="center" style="margin: 30px;">
    <a href="https://refine.dev">
    <img alt="refine logo" src="https://refine.ams3.cdn.digitaloceanspaces.com/readme/refine-readme-banner.png">
    </a>
</div>
<br/>

This [Refine](https://github.com/refinedev/refine) project was generated with [create refine-app](https://github.com/refinedev/refine/tree/master/packages/create-refine-app).

## Getting Started

A React Framework for building internal tools, admin panels, dashboards & B2B apps with unmatched flexibility ✨

Refine's hooks and components simplifies the development process and eliminates the repetitive tasks by providing industry-standard solutions for crucial aspects of a project, including authentication, access control, routing, networking, state management, and i18n.

## Available Scripts

### Running the development server.

```bash
    pnpm dev
```

### Building for production.

```bash
    pnpm build
```

### Running the production server.

```bash
    pnpm start
```

## Learn More

To learn more about **Refine**, please check out the [Documentation](https://refine.dev/docs)

- **REST Data Provider** [Docs](https://refine.dev/docs/core/providers/data-provider/#overview)
- **Ant Design** [Docs](https://refine.dev/docs/ui-frameworks/antd/tutorial/)
- **React Router** [Docs](https://refine.dev/docs/core/providers/router-provider/)
- **Google Auth Provider** [Docs](https://refine.dev/docs/core/providers/auth-provider/)

## License

MIT

================
File: xdent-ops-frontend/src/App.tsx
================
import {
  AuthBindings,
  Authenticated,
  GitHubBanner,
  Refine,
} from "@refinedev/core";
import { DevtoolsPanel, DevtoolsProvider } from "@refinedev/devtools";
import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";

import {
  ErrorComponent,
  ThemedLayoutV2,
  ThemedSiderV2,
  useNotificationProvider,
} from "@refinedev/antd";
import "@refinedev/antd/dist/reset.css";

import routerBindings, {
  CatchAllNavigate,
  DocumentTitleHandler,
  NavigateToResource,
  UnsavedChangesNotifier,
} from "@refinedev/react-router";
import dataProvider from "@refinedev/simple-rest";
import { App as AntdApp } from "antd";
import axios from "axios";
import { BrowserRouter, Outlet, Route, Routes } from "react-router";
import { Header } from "./components/header";
import { ColorModeContextProvider } from "./contexts/color-mode";
import { CredentialResponse } from "./interfaces/google";
import {
  BlogPostCreate,
  BlogPostEdit,
  BlogPostList,
  BlogPostShow,
} from "./pages/blog-posts";
import {
  CategoryCreate,
  CategoryEdit,
  CategoryList,
  CategoryShow,
} from "./pages/categories";
import {
  TechnicianCreate,
  TechnicianEdit,
  TechnicianList,
  TechnicianShow,
} from "./pages/technicians";
import { Login } from "./pages/login";
import { parseJwt } from "./utils/parse-jwt";
import { dabProvider } from "./providers/dab-provider";
import { Dashboard } from "./pages/Dashboard";

const axiosInstance = axios.create();
axiosInstance.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (config.headers) {
    config.headers["Authorization"] = `Bearer ${token}`;
  }

  return config;
});

function App() {
  const authProvider: AuthBindings = {
    login: async ({ credential }: CredentialResponse) => {
      const profileObj = credential ? parseJwt(credential) : null;

      if (profileObj) {
        localStorage.setItem(
          "user",
          JSON.stringify({
            ...profileObj,
            avatar: profileObj.picture,
          })
        );

        localStorage.setItem("token", `${credential}`);

        return {
          success: true,
          redirectTo: "/",
        };
      }

      return {
        success: false,
      };
    },
    logout: async () => {
      const token = localStorage.getItem("token");

      if (token && typeof window !== "undefined") {
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        axios.defaults.headers.common = {};
        window.google?.accounts.id.revoke(token, () => {
          return {};
        });
      }

      return {
        success: true,
        redirectTo: "/login",
      };
    },
    onError: async (error) => {
      console.error(error);
      return { error };
    },
    check: async () => {
      const token = localStorage.getItem("token");

      if (token) {
        return {
          authenticated: true,
        };
      }

      return {
        authenticated: false,
        error: {
          message: "Check failed",
          name: "Token not found",
        },
        logout: true,
        redirectTo: "/login",
      };
    },
    getPermissions: async () => null,
    getIdentity: async () => {
      const user = localStorage.getItem("user");
      if (user) {
        return JSON.parse(user);
      }

      return null;
    },
  };

  return (
    <BrowserRouter>
      <RefineKbarProvider>
        <ColorModeContextProvider>
          <AntdApp>
            <DevtoolsProvider>
              <Refine
                dataProvider={dataProvider("/api")}
                notificationProvider={useNotificationProvider}
                routerProvider={routerBindings}
                authProvider={authProvider}
                resources={[
                  {
                    name: "dashboard",
                    list: "/dashboard",
                    meta: {
                      label: "Dashboard",
                    },
                  },
                  {
                    name: "technician",
                    list: "/technicians",
                    create: "/technicians/create",
                    edit: "/technicians/edit/:id",
                    show: "/technicians/show/:id",
                    meta: {
                      canDelete: true,
                      label: "Technicians",
                    },
                  },
                ]}
                options={{
                  syncWithLocation: true,
                  warnWhenUnsavedChanges: true,
                  useNewQueryKeys: true,
                  projectId: "SsE5XT-Bt8UMq-GIxZwn",
                }}
              >
                <Routes>
                  <Route
                    element={
                      <Authenticated
                        key="authenticated-inner"
                        fallback={<CatchAllNavigate to="/login" />}
                      >
                        <ThemedLayoutV2
                          Header={Header}
                          Sider={(props) => <ThemedSiderV2 {...props} fixed />}
                        >
                          <Outlet />
                        </ThemedLayoutV2>
                      </Authenticated>
                    }
                  >
                    <Route
                      index
                      element={<NavigateToResource resource="dashboard" />}
                    />
                    <Route path="/dashboard">
                      <Route index element={<Dashboard />} />
                    </Route>
                    <Route path="/blog-posts">
                      <Route index element={<BlogPostList />} />
                      <Route path="create" element={<BlogPostCreate />} />
                      <Route path="edit/:id" element={<BlogPostEdit />} />
                      <Route path="show/:id" element={<BlogPostShow />} />
                    </Route>
                    <Route path="/categories">
                      <Route index element={<CategoryList />} />
                      <Route path="create" element={<CategoryCreate />} />
                      <Route path="edit/:id" element={<CategoryEdit />} />
                      <Route path="show/:id" element={<CategoryShow />} />
                    </Route>
                    <Route path="/technicians">
                      <Route index element={<TechnicianList />} />
                      <Route path="create" element={<TechnicianCreate />} />
                      <Route path="edit/:id" element={<TechnicianEdit />} />
                      <Route path="show/:id" element={<TechnicianShow />} />
                    </Route>
                    <Route path="*" element={<ErrorComponent />} />
                  </Route>
                  <Route
                    element={
                      <Authenticated
                        key="authenticated-outer"
                        fallback={<Outlet />}
                      >
                        <NavigateToResource />
                      </Authenticated>
                    }
                  >
                    <Route path="/login" element={<Login />} />
                  </Route>
                </Routes>

                <RefineKbar />
                <UnsavedChangesNotifier />
                <DocumentTitleHandler />
              </Refine>
              <DevtoolsPanel />
            </DevtoolsProvider>
          </AntdApp>
        </ColorModeContextProvider>
      </RefineKbarProvider>
    </BrowserRouter>
  );
}

export default App;

================
File: xdent-ops-frontend/src/components/header/index.tsx
================
import type { RefineThemedLayoutV2HeaderProps } from "@refinedev/antd";
import { useGetIdentity } from "@refinedev/core";
import {
  Layout as AntdLayout,
  Avatar,
  Space,
  Switch,
  theme,
  Typography,
} from "antd";
import React, { useContext } from "react";
import { ColorModeContext } from "../../contexts/color-mode";

const { Text } = Typography;
const { useToken } = theme;

type IUser = {
  id: number;
  name: string;
  avatar: string;
};

export const Header: React.FC<RefineThemedLayoutV2HeaderProps> = ({
  sticky = true,
}) => {
  const { token } = useToken();
  const { data: user } = useGetIdentity<IUser>();
  const { mode, setMode } = useContext(ColorModeContext);

  const headerStyles: React.CSSProperties = {
    backgroundColor: token.colorBgElevated,
    display: "flex",
    justifyContent: "flex-end",
    alignItems: "center",
    padding: "0px 24px",
    height: "64px",
  };

  if (sticky) {
    headerStyles.position = "sticky";
    headerStyles.top = 0;
    headerStyles.zIndex = 1;
  }

  return (
    <AntdLayout.Header style={headerStyles}>
      <Space>
        <Switch
          checkedChildren="🌛"
          unCheckedChildren="🔆"
          onChange={() => setMode(mode === "light" ? "dark" : "light")}
          defaultChecked={mode === "dark"}
        />
        <Space style={{ marginLeft: "8px" }} size="middle">
          {user?.name && <Text strong>{user.name}</Text>}
          {user?.avatar && <Avatar src={user?.avatar} alt={user?.name} />}
        </Space>
      </Space>
    </AntdLayout.Header>
  );
};

================
File: xdent-ops-frontend/src/components/index.ts
================
export { Header } from "./header";

================
File: xdent-ops-frontend/src/contexts/color-mode/index.tsx
================
import { RefineThemes } from "@refinedev/antd";
import { ConfigProvider, theme } from "antd";
import {
  type PropsWithChildren,
  createContext,
  useEffect,
  useState,
} from "react";

type ColorModeContextType = {
  mode: string;
  setMode: (mode: string) => void;
};

export const ColorModeContext = createContext<ColorModeContextType>(
  {} as ColorModeContextType
);

export const ColorModeContextProvider: React.FC<PropsWithChildren> = ({
  children,
}) => {
  const colorModeFromLocalStorage = localStorage.getItem("colorMode");
  const isSystemPreferenceDark = window?.matchMedia(
    "(prefers-color-scheme: dark)"
  ).matches;

  const systemPreference = isSystemPreferenceDark ? "dark" : "light";
  const [mode, setMode] = useState(
    colorModeFromLocalStorage || systemPreference
  );

  useEffect(() => {
    window.localStorage.setItem("colorMode", mode);
  }, [mode]);

  const setColorMode = () => {
    if (mode === "light") {
      setMode("dark");
    } else {
      setMode("light");
    }
  };

  const { darkAlgorithm, defaultAlgorithm } = theme;

  return (
    <ColorModeContext.Provider
      value={{
        setMode: setColorMode,
        mode,
      }}
    >
      <ConfigProvider
        // you can change the theme colors here. example: ...RefineThemes.Magenta,
        theme={{
          ...RefineThemes.Blue,
          algorithm: mode === "light" ? defaultAlgorithm : darkAlgorithm,
        }}
      >
        {children}
      </ConfigProvider>
    </ColorModeContext.Provider>
  );
};

================
File: xdent-ops-frontend/src/index.tsx
================
import React from "react";
import { createRoot } from "react-dom/client";

import App from "./App";

const container = document.getElementById("root") as HTMLElement;
const root = createRoot(container);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: xdent-ops-frontend/src/interfaces/google.d.ts
================
export interface IdConfiguration {
  client_id: string;
  auto_select?: boolean;
  callback: (handleCredentialResponse: CredentialResponse) => void;
  login_uri?: string;
  native_callback?: (...args: any[]) => void;
  cancel_on_tap_outside?: boolean;
  prompt_parent_id?: string;
  nonce?: string;
  context?: string;
  state_cookie_domain?: string;
  ux_mode?: "popup" | "redirect";
  allowed_parent_origin?: string | string[];
  intermediate_iframe_close_callback?: (...args: any[]) => void;
}

export interface CredentialResponse {
  credential?: string;
  select_by?:
    | "auto"
    | "user"
    | "user_1tap"
    | "user_2tap"
    | "btn"
    | "btn_confirm"
    | "brn_add_session"
    | "btn_confirm_add_session";
  clientId?: string;
}

export interface GsiButtonConfiguration {
  type: "standard" | "icon";
  theme?: "outline" | "filled_blue" | "filled_black";
  size?: "large" | "medium" | "small";
  text?: "signin_with" | "signup_with" | "continue_with" | "signup_with";
  shape?: "rectangular" | "pill" | "circle" | "square";
  logo_alignment?: "left" | "center";
  width?: string;
  local?: string;
}

export interface PromptMomentNotification {
  isDisplayMoment: () => boolean;
  isDisplayed: () => boolean;
  isNotDisplayed: () => boolean;
  getNotDisplayedReason: () =>
    | "browser_not_supported"
    | "invalid_client"
    | "missing_client_id"
    | "opt_out_or_no_session"
    | "secure_http_required"
    | "suppressed_by_user"
    | "unregistered_origin"
    | "unknown_reason";
  isSkippedMoment: () => boolean;
  getSkippedReason: () =>
    | "auto_cancel"
    | "user_cancel"
    | "tap_outside"
    | "issuing_failed";
  isDismissedMoment: () => boolean;
  getDismissedReason: () =>
    | "credential_returned"
    | "cancel_called"
    | "flow_restarted";
  getMomentType: () => "display" | "skipped" | "dismissed";
}

export interface RevocationResponse {
  successful: boolean;
  error: string;
}

export interface Credential {
  id: string;
  password: string;
}

export interface Google {
  accounts: {
    id: {
      initialize: (input: IdConfiguration) => void;
      prompt: (
        momentListener?: (res: PromptMomentNotification) => void
      ) => void;
      renderButton: (
        parent: HTMLElement,
        options: GsiButtonConfiguration
      ) => void;
      disableAutoSelect: () => void;
      storeCredential: (credentials: Credential, callback: () => void) => void;
      cancel: () => void;
      onGoogleLibraryLoad: () => void;
      revoke: (
        hint: string,
        callback: (done: RevocationResponse) => void
      ) => void;
    };
  };
}

declare global {
  interface Window {
    google: Google;
  }
}

export interface UserPayload {
  iss: string;
  nbf: number;
  aud: string;
  sub: string;
  email: string;
  email_verified: boolean;
  azp: string;
  name: string;
  picture: string;
  given_name: string;
  family_name: string;
  iat: number;
  exp: number;
  jti: string;
}

================
File: xdent-ops-frontend/src/pages/blog-posts/create.tsx
================
import { Create, useForm, useSelect } from "@refinedev/antd";
import MDEditor from "@uiw/react-md-editor";
import { Form, Input, Select } from "antd";

export const BlogPostCreate = () => {
  const { formProps, saveButtonProps } = useForm({});

  const { selectProps: categorySelectProps } = useSelect({
    resource: "categories",
  });

  return (
    <Create saveButtonProps={saveButtonProps}>
      <Form {...formProps} layout="vertical">
        <Form.Item
          label={"Title"}
          name={["title"]}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Input />
        </Form.Item>
        <Form.Item
          label={"Content"}
          name="content"
          rules={[
            {
              required: true,
            },
          ]}
        >
          <MDEditor data-color-mode="light" />
        </Form.Item>
        <Form.Item
          label={"Category"}
          name={["category", "id"]}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Select {...categorySelectProps} />
        </Form.Item>
        <Form.Item
          label={"Status"}
          name={["status"]}
          initialValue={"draft"}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Select
            defaultValue={"draft"}
            options={[
              { value: "draft", label: "Draft" },
              { value: "published", label: "Published" },
              { value: "rejected", label: "Rejected" },
            ]}
            style={{ width: 120 }}
          />
        </Form.Item>
      </Form>
    </Create>
  );
};

================
File: xdent-ops-frontend/src/pages/blog-posts/edit.tsx
================
import { Edit, useForm, useSelect } from "@refinedev/antd";
import MDEditor from "@uiw/react-md-editor";
import { Form, Input, Select } from "antd";

export const BlogPostEdit = () => {
  const { formProps, saveButtonProps, queryResult, formLoading } = useForm({});

  const blogPostsData = queryResult?.data?.data;

  const { selectProps: categorySelectProps } = useSelect({
    resource: "categories",
    defaultValue: blogPostsData?.category,
    queryOptions: {
      enabled: !!blogPostsData?.category,
    },
  });

  return (
    <Edit saveButtonProps={saveButtonProps} isLoading={formLoading}>
      <Form {...formProps} layout="vertical">
        <Form.Item
          label={"Title"}
          name={["title"]}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Input />
        </Form.Item>
        <Form.Item
          label={"Content"}
          name="content"
          rules={[
            {
              required: true,
            },
          ]}
        >
          <MDEditor data-color-mode="light" />
        </Form.Item>
        <Form.Item
          label={"Category"}
          name={["category", "id"]}
          initialValue={formProps?.initialValues?.category?.id}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Select {...categorySelectProps} />
        </Form.Item>
        <Form.Item
          label={"Status"}
          name={["status"]}
          initialValue={"draft"}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Select
            defaultValue={"draft"}
            options={[
              { value: "draft", label: "Draft" },
              { value: "published", label: "Published" },
              { value: "rejected", label: "Rejected" },
            ]}
            style={{ width: 120 }}
          />
        </Form.Item>
      </Form>
    </Edit>
  );
};

================
File: xdent-ops-frontend/src/pages/blog-posts/index.ts
================
export * from "./create";
export * from "./edit";
export * from "./list";
export * from "./show";

================
File: xdent-ops-frontend/src/pages/blog-posts/list.tsx
================
import {
  DateField,
  DeleteButton,
  EditButton,
  List,
  MarkdownField,
  ShowButton,
  useTable,
} from "@refinedev/antd";
import { type BaseRecord, useMany } from "@refinedev/core";
import { Space, Table } from "antd";

export const BlogPostList = () => {
  const { tableProps } = useTable({
    syncWithLocation: true,
  });

  const { data: categoryData, isLoading: categoryIsLoading } = useMany({
    resource: "categories",
    ids:
      tableProps?.dataSource
        ?.map((item) => item?.category?.id)
        .filter(Boolean) ?? [],
    queryOptions: {
      enabled: !!tableProps?.dataSource,
    },
  });

  return (
    <List>
      <Table {...tableProps} rowKey="id">
        <Table.Column dataIndex="id" title={"ID"} />
        <Table.Column dataIndex="title" title={"Title"} />
        <Table.Column
          dataIndex="content"
          title={"Content"}
          render={(value: any) => {
            if (!value) return "-";
            return <MarkdownField value={value.slice(0, 80) + "..."} />;
          }}
        />
        <Table.Column
          dataIndex={"category"}
          title={"Category"}
          render={(value) =>
            categoryIsLoading ? (
              <>Loading...</>
            ) : (
              categoryData?.data?.find((item) => item.id === value?.id)?.title
            )
          }
        />
        <Table.Column dataIndex="status" title={"Status"} />
        <Table.Column
          dataIndex={["createdAt"]}
          title={"Created at"}
          render={(value: any) => <DateField value={value} />}
        />
        <Table.Column
          title={"Actions"}
          dataIndex="actions"
          render={(_, record: BaseRecord) => (
            <Space>
              <EditButton hideText size="small" recordItemId={record.id} />
              <ShowButton hideText size="small" recordItemId={record.id} />
              <DeleteButton hideText size="small" recordItemId={record.id} />
            </Space>
          )}
        />
      </Table>
    </List>
  );
};

================
File: xdent-ops-frontend/src/pages/blog-posts/show.tsx
================
import { DateField, MarkdownField, Show, TextField } from "@refinedev/antd";
import { useOne, useShow } from "@refinedev/core";
import { Typography } from "antd";

const { Title } = Typography;

export const BlogPostShow = () => {
  const { queryResult } = useShow({});
  const { data, isLoading } = queryResult;

  const record = data?.data;

  const { data: categoryData, isLoading: categoryIsLoading } = useOne({
    resource: "categories",
    id: record?.category?.id || "",
    queryOptions: {
      enabled: !!record,
    },
  });

  return (
    <Show isLoading={isLoading}>
      <Title level={5}>{"ID"}</Title>
      <TextField value={record?.id} />
      <Title level={5}>{"Title"}</Title>
      <TextField value={record?.title} />
      <Title level={5}>{"Content"}</Title>
      <MarkdownField value={record?.content} />
      <Title level={5}>{"Category"}</Title>
      <TextField
        value={
          categoryIsLoading ? <>Loading...</> : <>{categoryData?.data?.title}</>
        }
      />
      <Title level={5}>{"Status"}</Title>
      <TextField value={record?.status} />
      <Title level={5}>{"CreatedAt"}</Title>
      <DateField value={record?.createdAt} />
    </Show>
  );
};

================
File: xdent-ops-frontend/src/pages/categories/create.tsx
================
import { Create, useForm } from "@refinedev/antd";
import { Form, Input } from "antd";

export const CategoryCreate = () => {
  const { formProps, saveButtonProps } = useForm({});

  return (
    <Create saveButtonProps={saveButtonProps}>
      <Form {...formProps} layout="vertical">
        <Form.Item
          label={"Title"}
          name={["title"]}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Input />
        </Form.Item>
      </Form>
    </Create>
  );
};

================
File: xdent-ops-frontend/src/pages/categories/edit.tsx
================
import { Edit, useForm } from "@refinedev/antd";
import { Form, Input } from "antd";

export const CategoryEdit = () => {
  const { formProps, saveButtonProps } = useForm({});

  return (
    <Edit saveButtonProps={saveButtonProps}>
      <Form {...formProps} layout="vertical">
        <Form.Item
          label={"Title"}
          name={["title"]}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Input />
        </Form.Item>
      </Form>
    </Edit>
  );
};

================
File: xdent-ops-frontend/src/pages/categories/index.ts
================
export * from "./create";
export * from "./edit";
export * from "./list";
export * from "./show";

================
File: xdent-ops-frontend/src/pages/categories/list.tsx
================
import {
  DeleteButton,
  EditButton,
  List,
  ShowButton,
  useTable,
} from "@refinedev/antd";
import type { BaseRecord } from "@refinedev/core";
import { Space, Table } from "antd";

export const CategoryList = () => {
  const { tableProps } = useTable({
    syncWithLocation: true,
  });

  return (
    <List>
      <Table {...tableProps} rowKey="id">
        <Table.Column dataIndex="id" title={"ID"} />
        <Table.Column dataIndex="title" title={"title"} />
        <Table.Column
          title={"Actions"}
          dataIndex="actions"
          render={(_, record: BaseRecord) => (
            <Space>
              <EditButton hideText size="small" recordItemId={record.id} />
              <ShowButton hideText size="small" recordItemId={record.id} />
              <DeleteButton hideText size="small" recordItemId={record.id} />
            </Space>
          )}
        />
      </Table>
    </List>
  );
};

================
File: xdent-ops-frontend/src/pages/categories/show.tsx
================
import { Show, TextField } from "@refinedev/antd";
import { useShow } from "@refinedev/core";
import { Typography } from "antd";

const { Title } = Typography;

export const CategoryShow = () => {
  const { queryResult } = useShow({});
  const { data, isLoading } = queryResult;

  const record = data?.data;

  return (
    <Show isLoading={isLoading}>
      <Title level={5}>{"ID"}</Title>
      <TextField value={record?.id} />
      <Title level={5}>{"Title"}</Title>
      <TextField value={record?.title} />
    </Show>
  );
};

================
File: xdent-ops-frontend/src/pages/Dashboard.tsx
================
import { Row, Col, Card, Statistic } from "antd";
import {
  DollarCircleOutlined,
  ShoppingOutlined,
  UserOutlined,
  RiseOutlined,
} from "@ant-design/icons";

export const Dashboard: React.FC = () => {
  return (
    <div style={{ padding: "24px" }}>
      <h1>Dashboard</h1>
      <p>
        This is a simple React component without any Refine-specific
        functionality.
      </p>

      <Row gutter={[16, 16]} style={{ marginTop: "24px" }}>
        <Col span={6}>
          <Card>
            <Statistic
              title="Total Revenue"
              value={112893}
              precision={2}
              valueStyle={{ color: "#3f8600" }}
              prefix={<DollarCircleOutlined />}
              suffix="$"
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="Orders"
              value={1234}
              valueStyle={{ color: "#1890ff" }}
              prefix={<ShoppingOutlined />}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="New Customers"
              value={567}
              valueStyle={{ color: "#cf1322" }}
              prefix={<UserOutlined />}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="Growth Rate"
              value={11.28}
              precision={2}
              valueStyle={{ color: "#722ed1" }}
              prefix={<RiseOutlined />}
              suffix="%"
            />
          </Card>
        </Col>
      </Row>

      <Row gutter={[16, 16]} style={{ marginTop: "24px" }}>
        <Col span={24}>
          <Card title="Dashboard Overview" style={{ minHeight: "300px" }}>
            <div style={{ textAlign: "center", padding: "50px" }}>
              <h2>Welcome to the Dashboard</h2>
              <p>
                This is a proof of concept showing a regular React component as
                a Refine resource.
              </p>
              <p>
                No Refine hooks, no data fetching, just plain React with Ant
                Design components.
              </p>
            </div>
          </Card>
        </Col>
      </Row>

      <p style={{ marginTop: "32px", textAlign: "center", fontSize: "16px" }}>
        Hello world from Claude Code!
      </p>
    </div>
  );
};

================
File: xdent-ops-frontend/src/pages/login.tsx
================
import { useLogin } from "@refinedev/core";
import { useEffect, useRef } from "react";

import { ThemedTitleV2 } from "@refinedev/antd";
import { Layout, Space, Typography } from "antd";

import { CredentialResponse } from "../interfaces/google";

// Todo: Update your Google Client ID here
const GOOGLE_CLIENT_ID =
  "534587374875-ud3ccqdlbnbm25kp3g35kg7vkqclflil.apps.googleusercontent.com";

export const Login: React.FC = () => {
  const { mutate: login } = useLogin<CredentialResponse>();

  const GoogleButton = (): JSX.Element => {
    const divRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
      if (typeof window === "undefined" || !window.google || !divRef.current) {
        return;
      }

      try {
        window.google.accounts.id.initialize({
          ux_mode: "popup",
          client_id: GOOGLE_CLIENT_ID,
          callback: async (res: CredentialResponse) => {
            if (res.credential) {
              login(res);
            }
          },
        });
        window.google.accounts.id.renderButton(divRef.current, {
          theme: "filled_blue",
          size: "medium",
          type: "standard",
        });
      } catch (error) {
        console.log(error);
      }
    }, []);

    return <div ref={divRef} />;
  };

  return (
    <Layout
      style={{
        height: "100vh",
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <Space direction="vertical" align="center">
        <ThemedTitleV2
          collapsed={false}
          wrapperStyles={{
            fontSize: "22px",
            marginBottom: "36px",
          }}
        />
        <GoogleButton />
        <Typography.Text type="secondary">
          Powered by
          <img
            style={{ padding: "0 5px" }}
            alt="Google"
            src="https://refine.ams3.cdn.digitaloceanspaces.com/superplate-auth-icons%2Fgoogle.svg"
          />
          Google
        </Typography.Text>
      </Space>
    </Layout>
  );
};

================
File: xdent-ops-frontend/src/pages/technicians/create.tsx
================
import { Create, useForm } from "@refinedev/antd";
import { Form, Input, InputNumber, Select } from "antd";

export function TechnicianCreate() {
  const { formProps, saveButtonProps } = useForm();

  return (
    <Create saveButtonProps={saveButtonProps}>
      <Form {...formProps} layout="vertical">
        <Form.Item
          label={"First Name"}
          name={["firstName"]}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Input />
        </Form.Item>
        <Form.Item
          label={"Last Name"}
          name={["lastName"]}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Input />
        </Form.Item>
        <Form.Item
          label={"Email"}
          name={["email"]}
          rules={[
            {
              required: true,
              type: "email",
            },
          ]}
        >
          <Input />
        </Form.Item>
        <Form.Item label={"Phone Number"} name={["phoneNumber"]}>
          <Input />
        </Form.Item>
        <Form.Item label={"Address Street"} name={["addressStreet"]}>
          <Input />
        </Form.Item>
        <Form.Item label={"City"} name={["addressCity"]}>
          <Input />
        </Form.Item>
        <Form.Item label={"State"} name={["addressState"]}>
          <Input />
        </Form.Item>
        <Form.Item label={"Zip"} name={["addressZip"]}>
          <Input />
        </Form.Item>
        <Form.Item label={"Availability Status"} name={["availabilityStatus"]}>
          <Select
            options={[
              { label: "Available", value: "available" },
              { label: "Busy", value: "busy" },
              { label: "Offline", value: "offline" },
            ]}
          />
        </Form.Item>
        <Form.Item label={"Pay Rate"} name={["payRate"]}>
          <InputNumber />
        </Form.Item>
      </Form>
    </Create>
  );
}

================
File: xdent-ops-frontend/src/pages/technicians/edit.tsx
================
import { Edit, useForm } from "@refinedev/antd";
import { Form, Input, InputNumber, Select } from "antd";

export function TechnicianEdit() {
  const { formProps, saveButtonProps } = useForm();

  return (
    <Edit saveButtonProps={saveButtonProps}>
      <Form {...formProps} layout="vertical">
        <Form.Item
          label={"First Name"}
          name={["firstName"]}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Input />
        </Form.Item>
        <Form.Item
          label={"Last Name"}
          name={["lastName"]}
          rules={[
            {
              required: true,
            },
          ]}
        >
          <Input />
        </Form.Item>
        <Form.Item
          label={"Email"}
          name={["email"]}
          rules={[
            {
              required: true,
              type: "email",
            },
          ]}
        >
          <Input />
        </Form.Item>
        <Form.Item label={"Phone Number"} name={["phoneNumber"]}>
          <Input />
        </Form.Item>
        <Form.Item label={"Address Street"} name={["addressStreet"]}>
          <Input />
        </Form.Item>
        <Form.Item label={"City"} name={["addressCity"]}>
          <Input />
        </Form.Item>
        <Form.Item label={"State"} name={["addressState"]}>
          <Input />
        </Form.Item>
        <Form.Item label={"Zip"} name={["addressZip"]}>
          <Input />
        </Form.Item>
        <Form.Item label={"Availability Status"} name={["availabilityStatus"]}>
          <Select
            options={[
              { label: "Available", value: "available" },
              { label: "Busy", value: "busy" },
              { label: "Offline", value: "offline" },
            ]}
          />
        </Form.Item>
        <Form.Item label={"Pay Rate"} name={["payRate"]}>
          <InputNumber />
        </Form.Item>
      </Form>
    </Edit>
  );
}

================
File: xdent-ops-frontend/src/pages/technicians/index.ts
================
export { TechnicianCreate } from "./create";
export { TechnicianEdit } from "./edit";
export { TechnicianList } from "./list";
export { TechnicianShow } from "./show";

================
File: xdent-ops-frontend/src/pages/technicians/list.tsx
================
import { EditButton, List, ShowButton, useTable } from "@refinedev/antd";
import { Space, Table } from "antd";
import { TechnicianVM } from "@/services/XDentOps/api";

export function TechnicianList() {
  const { tableProps } = useTable<TechnicianVM>({
    syncWithLocation: true,
  });

  return (
    <List>
      <Table<TechnicianVM> {...tableProps} rowKey="userID">
        {/* <Table.Column dataIndex="userID" title={"ID"} /> */}
        <Table.Column dataIndex="firstName" title={"First Name"} />
        <Table.Column dataIndex="lastName" title={"Last Name"} />
        <Table.Column
          dataIndex="email"
          title={"Email"}
          render={(_, record) => (
            <a href={`mailto:${record.email}`}>{record.email}</a>
          )}
        />
        <Table.Column
          dataIndex="phoneNumber"
          title={"Phone"}
          render={(_, record) => (
            <a href={`tel:${record.phoneNumber}`}>{record.phoneNumber}</a>
          )}
        />
        <Table.Column dataIndex="availabilityStatus" title={"Status"} />
        <Table.Column dataIndex="payRate" title={"Pay Rate"} />
        <Table.Column
          dataIndex="profileReadinessPercent"
          title={"Profile Readiness"}
        />
        <Table.Column
          title={"Actions"}
          dataIndex="actions"
          render={(_, record: TechnicianVM) => (
            <Space>
              <EditButton hideText size="small" recordItemId={record.userID} />
              <ShowButton hideText size="small" recordItemId={record.userID} />
            </Space>
          )}
        />
      </Table>
    </List>
  );
}

================
File: xdent-ops-frontend/src/pages/technicians/show.tsx
================
import { Show, TextField, NumberField, List } from "@refinedev/antd";
import { useShow, useList } from "@refinedev/core";
import { Typography, Divider, Card, Row, Col, Tag, Empty, Space } from "antd";

const { Title, Text } = Typography;

export function TechnicianShow() {
  const { queryResult } = useShow();
  const { data, isLoading } = queryResult;

  const record = data?.data;
  const technicianUserID = record?.userID;

  // Fetch notes for this technician
  const { data: notesData, isLoading: notesLoading } = useList({
    resource: "profile_note",
    filters: [
      {
        field: "technicianUserID",
        operator: "eq",
        value: technicianUserID,
      },
      {
        field: "isActive",
        operator: "eq",
        value: true,
      },
    ],
    sorters: [
      {
        field: "dateAdded",
        order: "desc",
      },
    ],
    queryOptions: {
      enabled: !!technicianUserID,
    },
  });

  // Fetch documents for this technician
  const { data: documentsData, isLoading: documentsLoading } = useList({
    resource: "document",
    filters: [
      {
        field: "userID",
        operator: "eq",
        value: technicianUserID,
      },
      {
        field: "isActive",
        operator: "eq",
        value: true,
      },
    ],
    sorters: [
      {
        field: "dateAdded",
        order: "desc",
      },
    ],
    queryOptions: {
      enabled: !!technicianUserID,
    },
  });

  const notes = notesData?.data || [];
  const documents = documentsData?.data || [];

  const FieldGroup = ({
    label,
    value,
    span = 6,
  }: {
    label: string;
    value: any;
    span?: number;
  }) => (
    <Col span={span}>
      <div style={{ marginBottom: 16 }}>
        <Text
          type="secondary"
          style={{ fontSize: "12px", display: "block", marginBottom: 4 }}
        >
          {label}
        </Text>
        <TextField value={value} style={{ fontWeight: 500 }} />
      </div>
    </Col>
  );

  const NumberFieldGroup = ({
    label,
    value,
    span = 6,
  }: {
    label: string;
    value: any;
    span?: number;
  }) => (
    <Col span={span}>
      <div style={{ marginBottom: 16 }}>
        <Text
          type="secondary"
          style={{ fontSize: "12px", display: "block", marginBottom: 4 }}
        >
          {label}
        </Text>
        <NumberField value={value} style={{ fontWeight: 500 }} />
      </div>
    </Col>
  );

  return (
    <Show isLoading={isLoading}>
      <Row gutter={[16, 16]}>
        <Col span={24}>
          <Card title="Technician Information">
            <Row gutter={[16, 0]}>
              {/* Basic Info Row */}
              <FieldGroup label="ID" value={record?.userID ?? ""} span={4} />
              <FieldGroup
                label="First Name"
                value={record?.firstName}
                span={5}
              />
              <FieldGroup label="Last Name" value={record?.lastName} span={5} />
              <FieldGroup label="Email" value={record?.email} span={10} />
            </Row>

            <Row gutter={[16, 0]}>
              {/* Contact Info Row */}
              <FieldGroup
                label="Phone Number"
                value={record?.phoneNumber}
                span={6}
              />
              <FieldGroup
                label="Availability Status"
                value={record?.availabilityStatus}
                span={6}
              />
              <NumberFieldGroup
                label="Pay Rate"
                value={record?.payRate}
                span={6}
              />
              <NumberFieldGroup
                label="Profile Readiness %"
                value={record?.profileReadinessPercent}
                span={6}
              />
            </Row>

            <Row gutter={[16, 0]}>
              {/* Address Row */}
              <FieldGroup
                label="Address"
                value={`${record?.addressStreet || ""}, ${
                  record?.addressCity || ""
                }, ${record?.addressState || ""} ${record?.addressZip || ""}`}
                span={24}
              />
            </Row>
          </Card>
        </Col>

        <Col span={12}>
          <Card
            title={`Notes (${notes.length})`}
            loading={notesLoading}
            style={{ height: 450 }}
          >
            {notes.length === 0 ? (
              <Empty description="No notes found" />
            ) : (
              <div style={{ height: 350, overflowY: "auto", paddingRight: 8 }}>
                <Space
                  direction="vertical"
                  style={{ width: "100%" }}
                  size="small"
                >
                  {notes.map((note: any) => (
                    <Card
                      key={note.noteID}
                      size="small"
                      bodyStyle={{ padding: "12px" }}
                    >
                      <Text>{note.noteText}</Text>
                      <div
                        style={{
                          marginTop: 8,
                          paddingTop: 8,
                          borderTop: "1px solid #f0f0f0",
                        }}
                      >
                        <Text type="secondary" style={{ fontSize: "11px" }}>
                          {new Date(note.dateAdded).toLocaleDateString()}
                          {note.authorUserID &&
                            ` • Author: ${note.authorUserID}`}
                        </Text>
                      </div>
                    </Card>
                  ))}
                </Space>
              </div>
            )}
          </Card>
        </Col>

        <Col span={12}>
          <Card
            title={`Documents (${documents.length})`}
            loading={documentsLoading}
            style={{ height: 450 }}
          >
            {documents.length === 0 ? (
              <Empty description="No documents found" />
            ) : (
              <div style={{ height: 350, overflowY: "auto", paddingRight: 8 }}>
                <Space
                  direction="vertical"
                  style={{ width: "100%" }}
                  size="small"
                >
                  {documents.map((document: any) => (
                    <Card
                      key={document.documentID}
                      size="small"
                      bodyStyle={{ padding: "12px" }}
                    >
                      <div
                        style={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "flex-start",
                        }}
                      >
                        <div style={{ flex: 1, marginRight: 12 }}>
                          <Text strong style={{ fontSize: "14px" }}>
                            {document.fileName}
                          </Text>
                          <div style={{ marginTop: 4 }}>
                            <Text
                              type="secondary"
                              style={{ fontSize: "11px", display: "block" }}
                            >
                              Type: {document.documentTypeID}
                            </Text>
                            <Text
                              type="secondary"
                              style={{ fontSize: "11px", display: "block" }}
                            >
                              Added:{" "}
                              {new Date(
                                document.dateAdded
                              ).toLocaleDateString()}
                            </Text>
                            {document.expirationDate && (
                              <Text
                                type="secondary"
                                style={{ fontSize: "11px", display: "block" }}
                              >
                                Expires:{" "}
                                {new Date(
                                  document.expirationDate
                                ).toLocaleDateString()}
                              </Text>
                            )}
                          </div>
                        </div>
                        <Tag
                          color={
                            document.mimeType?.includes("pdf") ? "red" : "blue"
                          }
                          style={{ fontSize: "10px" }}
                        >
                          {document.mimeType?.split("/")[1]?.toUpperCase() ||
                            "Unknown"}
                        </Tag>
                      </div>
                    </Card>
                  ))}
                </Space>
              </div>
            )}
          </Card>
        </Col>
      </Row>
    </Show>
  );
}

================
File: xdent-ops-frontend/src/providers/dab-provider.ts
================
// src/providers/data-api-builder-provider.ts
import { DataProvider, HttpError } from "@refinedev/core";
import axios, { AxiosInstance } from "axios";

// Helper to map Refine's filter operators to Data API Builder's syntax
const mapOperator = (operator: string): string => {
  // Data API Builder uses OData-style operators
  switch (operator) {
    case "ne":
    case "gt":
    case "ge":
    case "lt":
    case "le":
      return operator;
    case "contains":
      // Note: Data API Builder doesn't have a direct 'contains' operator.
      // You might need to implement a custom function or use a different approach on the backend.
      // For this example, we'll comment it out and add a note.
      // return "contains";
      console.warn(
        `Operator 'contains' is not directly supported by Data API Builder. Please check your backend's capabilities.`
      );
      return "eq"; // Fallback to 'eq' for the sake of the example
    case "eq":
    default:
      return "eq";
  }
};

// Helper to format filter values (e.g., strings need to be in single quotes)
const formatValue = (value: any) => {
  if (typeof value === "string") {
    // Check if it's a date-like string, if not, wrap in quotes
    if (!/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$/.test(value)) {
      return `'${value.replace(/'/g, "''")}'`; // Escape single quotes
    }
  }
  return value;
};

// Helper to generate the $filter string
const generateFilter = (filters?: any[]): string | undefined => {
  if (!filters || filters.length === 0) {
    return undefined;
  }

  const queryFilters = filters.map((filter) => {
    if (filter.operator === "or" || filter.operator === "and") {
      // Handle logical operators by joining nested filters
      const nestedFilters = generateFilter(filter.value);
      return nestedFilters ? `(${nestedFilters})` : "";
    }
    // Handle conditional operators
    const { field, operator, value } = filter;
    const mappedOperator = mapOperator(operator);
    return `${field} ${mappedOperator} ${formatValue(value)}`;
  });

  return queryFilters.join(" and ");
};

// Helper to generate the $orderby string
const generateSort = (sorters?: any[]): string | undefined => {
  if (!sorters || sorters.length === 0) {
    return undefined;
  }
  return sorters.map((sorter) => `${sorter.field} ${sorter.order}`).join(",");
};

export const dabProvider = (
  apiUrl: string,
  httpClient: AxiosInstance = axios.create()
): DataProvider => ({
  getApiUrl: () => apiUrl,

  getList: async ({ resource, pagination, filters, sorters, meta }) => {
    const url = `${apiUrl}/${resource}`;

    const params = new URLSearchParams();

    const current = pagination?.current ?? 1;
    const pageSize = pagination?.pageSize ?? 10;

    // For Data API Builder, pagination is done with $first and $after.
    // Refine's `useList` sends page numbers, which we'll have to adapt.
    // This simple adaptation won't support cursor-based continuation tokens from `nextLink`.
    // For full support, `useInfiniteList` is recommended.
    params.append("$first", pageSize.toString());
    // This simulates offset-based pagination.
    const skip = (current - 1) * pageSize;
    // Data API Builder does not support an offset parameter like `$skip`.
    // This is a limitation when using standard page-based pagination controls.
    if (skip > 0) {
      console.warn(
        "Data API Builder doesn't support offset-based pagination ($skip). Consider using `useInfiniteList` for cursor-based pagination with `$after`."
      );
    }

    const queryFilters = generateFilter(filters);
    if (queryFilters) {
      params.append("$filter", queryFilters);
    }

    const querySorters = generateSort(sorters);
    if (querySorters) {
      params.append("$orderby", querySorters);
    }

    const { data } = await httpClient.get(`${url}?${params.toString()}`);

    // Data API builder returns data in a `value` array.
    // It does not provide a total count in the response headers by default.
    // This means pagination controls will not know the total number of pages.
    return {
      data: data.value,
      total: data.value.length, // This is a fallback and only reflects the current page size.
    };
  },

  getOne: async ({ resource, id, meta }) => {
    const url = `${apiUrl}/${resource}/${id}`;
    const { data } = await httpClient.get(url);
    // The response for getOne might be in a `value` array with one item.
    return {
      data: data.value && data.value.length > 0 ? data.value[0] : data,
    };
  },

  create: async ({ resource, variables }) => {
    const url = `${apiUrl}/${resource}`;
    const { data } = await httpClient.post(url, variables);
    return {
      data,
    };
  },

  update: async ({ resource, id, variables }) => {
    // Data API Builder typically uses PATCH for partial updates
    const url = `${apiUrl}/${resource}/${id}`;
    const { data } = await httpClient.patch(url, variables);
    return {
      data,
    };
  },

  deleteOne: async ({ resource, id, variables }) => {
    const url = `${apiUrl}/${resource}/${id}`;
    const { data } = await httpClient.delete(url, {
      data: variables,
    });
    return {
      data,
    };
  },

  // getMany is not required, Refine will call getOne multiple times if not provided.
  // custom is not required.
});

================
File: xdent-ops-frontend/src/services/XDentOps/api.ts
================
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class AspNetRoleDTO implements IAspNetRoleDTO {
    id?: string | undefined;
    name?: string | undefined;
    normalizedName?: string | undefined;
    concurrencyStamp?: string | undefined;
    description?: string | undefined;
    aspNetUsers?: AspNetUserDTO[] | undefined;
    modules?: ModuleDTO[] | undefined;

    constructor(data?: IAspNetRoleDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.normalizedName = _data["normalizedName"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.description = _data["description"];
            if (Array.isArray(_data["aspNetUsers"])) {
                this.aspNetUsers = [] as any;
                for (let item of _data["aspNetUsers"])
                    this.aspNetUsers!.push(AspNetUserDTO.fromJS(item));
            }
            if (Array.isArray(_data["modules"])) {
                this.modules = [] as any;
                for (let item of _data["modules"])
                    this.modules!.push(ModuleDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AspNetRoleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AspNetRoleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["normalizedName"] = this.normalizedName;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["description"] = this.description;
        if (Array.isArray(this.aspNetUsers)) {
            data["aspNetUsers"] = [];
            for (let item of this.aspNetUsers)
                data["aspNetUsers"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.modules)) {
            data["modules"] = [];
            for (let item of this.modules)
                data["modules"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IAspNetRoleDTO {
    id?: string | undefined;
    name?: string | undefined;
    normalizedName?: string | undefined;
    concurrencyStamp?: string | undefined;
    description?: string | undefined;
    aspNetUsers?: AspNetUserDTO[] | undefined;
    modules?: ModuleDTO[] | undefined;
}

export class AspNetUserDTO implements IAspNetUserDTO {
    readonly displayName?: string | undefined;
    token?: string | undefined;
    datePreviousLogin?: Date | undefined;
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    suffix?: string | undefined;
    isActive?: boolean;
    dateLastLogin?: Date | undefined;
    email2?: string | undefined;
    phone2?: string | undefined;
    preferredName?: string | undefined;
    creds?: string | undefined;
    profilePicUrl?: string | undefined;
    documents?: DocumentDTO[] | undefined;
    documentStateHistories?: DocumentStateHistoryDTO[] | undefined;
    managerTechnicianAssignments_ManagerUserId?: ManagerTechnicianAssignmentDTO[] | undefined;
    managerTechnicianAssignments_TechnicianUserId?: ManagerTechnicianAssignmentDTO[] | undefined;
    notifications?: NotificationDTO[] | undefined;
    paymentLogs_TechnicianUserId?: PaymentLogDTO[] | undefined;
    paymentLogs_RecordedByUserId?: PaymentLogDTO[] | undefined;
    profileNotes_TechnicianUserId?: ProfileNoteDTO[] | undefined;
    profileNotes_AuthorUserId?: ProfileNoteDTO[] | undefined;
    technicianProfile?: TechnicianProfileDTO;
    userAgreements?: UserAgreementDTO[] | undefined;
    w9Datas?: W9DataDTO[] | undefined;
    aspNetRoles?: AspNetRoleDTO[] | undefined;

    constructor(data?: IAspNetUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).displayName = _data["displayName"];
            this.token = _data["token"];
            this.datePreviousLogin = _data["datePreviousLogin"] ? new Date(_data["datePreviousLogin"].toString()) : <any>undefined;
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.suffix = _data["suffix"];
            this.isActive = _data["isActive"];
            this.dateLastLogin = _data["dateLastLogin"] ? new Date(_data["dateLastLogin"].toString()) : <any>undefined;
            this.email2 = _data["email2"];
            this.phone2 = _data["phone2"];
            this.preferredName = _data["preferredName"];
            this.creds = _data["creds"];
            this.profilePicUrl = _data["profilePicUrl"];
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(DocumentDTO.fromJS(item));
            }
            if (Array.isArray(_data["documentStateHistories"])) {
                this.documentStateHistories = [] as any;
                for (let item of _data["documentStateHistories"])
                    this.documentStateHistories!.push(DocumentStateHistoryDTO.fromJS(item));
            }
            if (Array.isArray(_data["managerTechnicianAssignments_ManagerUserId"])) {
                this.managerTechnicianAssignments_ManagerUserId = [] as any;
                for (let item of _data["managerTechnicianAssignments_ManagerUserId"])
                    this.managerTechnicianAssignments_ManagerUserId!.push(ManagerTechnicianAssignmentDTO.fromJS(item));
            }
            if (Array.isArray(_data["managerTechnicianAssignments_TechnicianUserId"])) {
                this.managerTechnicianAssignments_TechnicianUserId = [] as any;
                for (let item of _data["managerTechnicianAssignments_TechnicianUserId"])
                    this.managerTechnicianAssignments_TechnicianUserId!.push(ManagerTechnicianAssignmentDTO.fromJS(item));
            }
            if (Array.isArray(_data["notifications"])) {
                this.notifications = [] as any;
                for (let item of _data["notifications"])
                    this.notifications!.push(NotificationDTO.fromJS(item));
            }
            if (Array.isArray(_data["paymentLogs_TechnicianUserId"])) {
                this.paymentLogs_TechnicianUserId = [] as any;
                for (let item of _data["paymentLogs_TechnicianUserId"])
                    this.paymentLogs_TechnicianUserId!.push(PaymentLogDTO.fromJS(item));
            }
            if (Array.isArray(_data["paymentLogs_RecordedByUserId"])) {
                this.paymentLogs_RecordedByUserId = [] as any;
                for (let item of _data["paymentLogs_RecordedByUserId"])
                    this.paymentLogs_RecordedByUserId!.push(PaymentLogDTO.fromJS(item));
            }
            if (Array.isArray(_data["profileNotes_TechnicianUserId"])) {
                this.profileNotes_TechnicianUserId = [] as any;
                for (let item of _data["profileNotes_TechnicianUserId"])
                    this.profileNotes_TechnicianUserId!.push(ProfileNoteDTO.fromJS(item));
            }
            if (Array.isArray(_data["profileNotes_AuthorUserId"])) {
                this.profileNotes_AuthorUserId = [] as any;
                for (let item of _data["profileNotes_AuthorUserId"])
                    this.profileNotes_AuthorUserId!.push(ProfileNoteDTO.fromJS(item));
            }
            this.technicianProfile = _data["technicianProfile"] ? TechnicianProfileDTO.fromJS(_data["technicianProfile"]) : <any>undefined;
            if (Array.isArray(_data["userAgreements"])) {
                this.userAgreements = [] as any;
                for (let item of _data["userAgreements"])
                    this.userAgreements!.push(UserAgreementDTO.fromJS(item));
            }
            if (Array.isArray(_data["w9Datas"])) {
                this.w9Datas = [] as any;
                for (let item of _data["w9Datas"])
                    this.w9Datas!.push(W9DataDTO.fromJS(item));
            }
            if (Array.isArray(_data["aspNetRoles"])) {
                this.aspNetRoles = [] as any;
                for (let item of _data["aspNetRoles"])
                    this.aspNetRoles!.push(AspNetRoleDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AspNetUserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AspNetUserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["token"] = this.token;
        data["datePreviousLogin"] = this.datePreviousLogin ? this.datePreviousLogin.toISOString() : <any>undefined;
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["suffix"] = this.suffix;
        data["isActive"] = this.isActive;
        data["dateLastLogin"] = this.dateLastLogin ? this.dateLastLogin.toISOString() : <any>undefined;
        data["email2"] = this.email2;
        data["phone2"] = this.phone2;
        data["preferredName"] = this.preferredName;
        data["creds"] = this.creds;
        data["profilePicUrl"] = this.profilePicUrl;
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.documentStateHistories)) {
            data["documentStateHistories"] = [];
            for (let item of this.documentStateHistories)
                data["documentStateHistories"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.managerTechnicianAssignments_ManagerUserId)) {
            data["managerTechnicianAssignments_ManagerUserId"] = [];
            for (let item of this.managerTechnicianAssignments_ManagerUserId)
                data["managerTechnicianAssignments_ManagerUserId"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.managerTechnicianAssignments_TechnicianUserId)) {
            data["managerTechnicianAssignments_TechnicianUserId"] = [];
            for (let item of this.managerTechnicianAssignments_TechnicianUserId)
                data["managerTechnicianAssignments_TechnicianUserId"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.notifications)) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.paymentLogs_TechnicianUserId)) {
            data["paymentLogs_TechnicianUserId"] = [];
            for (let item of this.paymentLogs_TechnicianUserId)
                data["paymentLogs_TechnicianUserId"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.paymentLogs_RecordedByUserId)) {
            data["paymentLogs_RecordedByUserId"] = [];
            for (let item of this.paymentLogs_RecordedByUserId)
                data["paymentLogs_RecordedByUserId"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.profileNotes_TechnicianUserId)) {
            data["profileNotes_TechnicianUserId"] = [];
            for (let item of this.profileNotes_TechnicianUserId)
                data["profileNotes_TechnicianUserId"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.profileNotes_AuthorUserId)) {
            data["profileNotes_AuthorUserId"] = [];
            for (let item of this.profileNotes_AuthorUserId)
                data["profileNotes_AuthorUserId"].push(item ? item.toJSON() : <any>undefined);
        }
        data["technicianProfile"] = this.technicianProfile ? this.technicianProfile.toJSON() : <any>undefined;
        if (Array.isArray(this.userAgreements)) {
            data["userAgreements"] = [];
            for (let item of this.userAgreements)
                data["userAgreements"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.w9Datas)) {
            data["w9Datas"] = [];
            for (let item of this.w9Datas)
                data["w9Datas"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.aspNetRoles)) {
            data["aspNetRoles"] = [];
            for (let item of this.aspNetRoles)
                data["aspNetRoles"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IAspNetUserDTO {
    displayName?: string | undefined;
    token?: string | undefined;
    datePreviousLogin?: Date | undefined;
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    suffix?: string | undefined;
    isActive?: boolean;
    dateLastLogin?: Date | undefined;
    email2?: string | undefined;
    phone2?: string | undefined;
    preferredName?: string | undefined;
    creds?: string | undefined;
    profilePicUrl?: string | undefined;
    documents?: DocumentDTO[] | undefined;
    documentStateHistories?: DocumentStateHistoryDTO[] | undefined;
    managerTechnicianAssignments_ManagerUserId?: ManagerTechnicianAssignmentDTO[] | undefined;
    managerTechnicianAssignments_TechnicianUserId?: ManagerTechnicianAssignmentDTO[] | undefined;
    notifications?: NotificationDTO[] | undefined;
    paymentLogs_TechnicianUserId?: PaymentLogDTO[] | undefined;
    paymentLogs_RecordedByUserId?: PaymentLogDTO[] | undefined;
    profileNotes_TechnicianUserId?: ProfileNoteDTO[] | undefined;
    profileNotes_AuthorUserId?: ProfileNoteDTO[] | undefined;
    technicianProfile?: TechnicianProfileDTO;
    userAgreements?: UserAgreementDTO[] | undefined;
    w9Datas?: W9DataDTO[] | undefined;
    aspNetRoles?: AspNetRoleDTO[] | undefined;
}

export class DocumentDTO implements IDocumentDTO {
    documentId?: string;
    userId?: string | undefined;
    documentTypeId?: string;
    fileName?: string | undefined;
    storagePath?: string | undefined;
    mimeType?: string | undefined;
    expirationDate?: Date | undefined;
    isActive?: boolean;
    dateAdded?: Date;
    dateModified?: Date;
    aspNetUser?: AspNetUserDTO;
    documentType?: DocumentTypeDTO;
    documentStateHistories?: DocumentStateHistoryDTO[] | undefined;

    constructor(data?: IDocumentDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentId = _data["documentId"];
            this.userId = _data["userId"];
            this.documentTypeId = _data["documentTypeId"];
            this.fileName = _data["fileName"];
            this.storagePath = _data["storagePath"];
            this.mimeType = _data["mimeType"];
            this.expirationDate = _data["expirationDate"] ? new Date(_data["expirationDate"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.dateModified = _data["dateModified"] ? new Date(_data["dateModified"].toString()) : <any>undefined;
            this.aspNetUser = _data["aspNetUser"] ? AspNetUserDTO.fromJS(_data["aspNetUser"]) : <any>undefined;
            this.documentType = _data["documentType"] ? DocumentTypeDTO.fromJS(_data["documentType"]) : <any>undefined;
            if (Array.isArray(_data["documentStateHistories"])) {
                this.documentStateHistories = [] as any;
                for (let item of _data["documentStateHistories"])
                    this.documentStateHistories!.push(DocumentStateHistoryDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DocumentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentId"] = this.documentId;
        data["userId"] = this.userId;
        data["documentTypeId"] = this.documentTypeId;
        data["fileName"] = this.fileName;
        data["storagePath"] = this.storagePath;
        data["mimeType"] = this.mimeType;
        data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["dateModified"] = this.dateModified ? this.dateModified.toISOString() : <any>undefined;
        data["aspNetUser"] = this.aspNetUser ? this.aspNetUser.toJSON() : <any>undefined;
        data["documentType"] = this.documentType ? this.documentType.toJSON() : <any>undefined;
        if (Array.isArray(this.documentStateHistories)) {
            data["documentStateHistories"] = [];
            for (let item of this.documentStateHistories)
                data["documentStateHistories"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IDocumentDTO {
    documentId?: string;
    userId?: string | undefined;
    documentTypeId?: string;
    fileName?: string | undefined;
    storagePath?: string | undefined;
    mimeType?: string | undefined;
    expirationDate?: Date | undefined;
    isActive?: boolean;
    dateAdded?: Date;
    dateModified?: Date;
    aspNetUser?: AspNetUserDTO;
    documentType?: DocumentTypeDTO;
    documentStateHistories?: DocumentStateHistoryDTO[] | undefined;
}

export class DocumentStateDTO implements IDocumentStateDTO {
    documentStateId?: string;
    stateName?: string | undefined;
    dateAdded?: Date;
    documentStateHistories?: DocumentStateHistoryDTO[] | undefined;

    constructor(data?: IDocumentStateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentStateId = _data["documentStateId"];
            this.stateName = _data["stateName"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            if (Array.isArray(_data["documentStateHistories"])) {
                this.documentStateHistories = [] as any;
                for (let item of _data["documentStateHistories"])
                    this.documentStateHistories!.push(DocumentStateHistoryDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DocumentStateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentStateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentStateId"] = this.documentStateId;
        data["stateName"] = this.stateName;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        if (Array.isArray(this.documentStateHistories)) {
            data["documentStateHistories"] = [];
            for (let item of this.documentStateHistories)
                data["documentStateHistories"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IDocumentStateDTO {
    documentStateId?: string;
    stateName?: string | undefined;
    dateAdded?: Date;
    documentStateHistories?: DocumentStateHistoryDTO[] | undefined;
}

export class DocumentStateHistoryDTO implements IDocumentStateHistoryDTO {
    documentStateHistoryId?: string;
    documentId?: string;
    documentStateId?: string;
    actorUserId?: string | undefined;
    notes?: string | undefined;
    dateAdded?: Date;
    document?: DocumentDTO;
    documentState?: DocumentStateDTO;
    aspNetUser?: AspNetUserDTO;

    constructor(data?: IDocumentStateHistoryDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentStateHistoryId = _data["documentStateHistoryId"];
            this.documentId = _data["documentId"];
            this.documentStateId = _data["documentStateId"];
            this.actorUserId = _data["actorUserId"];
            this.notes = _data["notes"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.document = _data["document"] ? DocumentDTO.fromJS(_data["document"]) : <any>undefined;
            this.documentState = _data["documentState"] ? DocumentStateDTO.fromJS(_data["documentState"]) : <any>undefined;
            this.aspNetUser = _data["aspNetUser"] ? AspNetUserDTO.fromJS(_data["aspNetUser"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DocumentStateHistoryDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentStateHistoryDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentStateHistoryId"] = this.documentStateHistoryId;
        data["documentId"] = this.documentId;
        data["documentStateId"] = this.documentStateId;
        data["actorUserId"] = this.actorUserId;
        data["notes"] = this.notes;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["document"] = this.document ? this.document.toJSON() : <any>undefined;
        data["documentState"] = this.documentState ? this.documentState.toJSON() : <any>undefined;
        data["aspNetUser"] = this.aspNetUser ? this.aspNetUser.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDocumentStateHistoryDTO {
    documentStateHistoryId?: string;
    documentId?: string;
    documentStateId?: string;
    actorUserId?: string | undefined;
    notes?: string | undefined;
    dateAdded?: Date;
    document?: DocumentDTO;
    documentState?: DocumentStateDTO;
    aspNetUser?: AspNetUserDTO;
}

export class DocumentTypeDTO implements IDocumentTypeDTO {
    documentTypeId?: string;
    typeName?: string | undefined;
    isComplianceRequired?: boolean;
    documents?: DocumentDTO[] | undefined;

    constructor(data?: IDocumentTypeDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.documentTypeId = _data["documentTypeId"];
            this.typeName = _data["typeName"];
            this.isComplianceRequired = _data["isComplianceRequired"];
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(DocumentDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DocumentTypeDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentTypeDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["documentTypeId"] = this.documentTypeId;
        data["typeName"] = this.typeName;
        data["isComplianceRequired"] = this.isComplianceRequired;
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IDocumentTypeDTO {
    documentTypeId?: string;
    typeName?: string | undefined;
    isComplianceRequired?: boolean;
    documents?: DocumentDTO[] | undefined;
}

export class LoginResultVM implements ILoginResultVM {
    status?: string | undefined;
    type?: string | undefined;
    token?: string | undefined;

    constructor(data?: ILoginResultVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.type = _data["type"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): LoginResultVM {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResultVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["type"] = this.type;
        data["token"] = this.token;
        return data;
    }
}

export interface ILoginResultVM {
    status?: string | undefined;
    type?: string | undefined;
    token?: string | undefined;
}

export class LoginVM implements ILoginVM {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginVM {
        data = typeof data === 'object' ? data : {};
        let result = new LoginVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginVM {
    email?: string | undefined;
    password?: string | undefined;
}

export class ManagerTechnicianAssignmentDTO implements IManagerTechnicianAssignmentDTO {
    managerUserId?: string | undefined;
    technicianUserId?: string | undefined;
    dateAdded?: Date;
    aspNetUser_ManagerUserId?: AspNetUserDTO;
    aspNetUser_TechnicianUserId?: AspNetUserDTO;

    constructor(data?: IManagerTechnicianAssignmentDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.managerUserId = _data["managerUserId"];
            this.technicianUserId = _data["technicianUserId"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.aspNetUser_ManagerUserId = _data["aspNetUser_ManagerUserId"] ? AspNetUserDTO.fromJS(_data["aspNetUser_ManagerUserId"]) : <any>undefined;
            this.aspNetUser_TechnicianUserId = _data["aspNetUser_TechnicianUserId"] ? AspNetUserDTO.fromJS(_data["aspNetUser_TechnicianUserId"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ManagerTechnicianAssignmentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ManagerTechnicianAssignmentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["managerUserId"] = this.managerUserId;
        data["technicianUserId"] = this.technicianUserId;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["aspNetUser_ManagerUserId"] = this.aspNetUser_ManagerUserId ? this.aspNetUser_ManagerUserId.toJSON() : <any>undefined;
        data["aspNetUser_TechnicianUserId"] = this.aspNetUser_TechnicianUserId ? this.aspNetUser_TechnicianUserId.toJSON() : <any>undefined;
        return data;
    }
}

export interface IManagerTechnicianAssignmentDTO {
    managerUserId?: string | undefined;
    technicianUserId?: string | undefined;
    dateAdded?: Date;
    aspNetUser_ManagerUserId?: AspNetUserDTO;
    aspNetUser_TechnicianUserId?: AspNetUserDTO;
}

export class ModuleDTO implements IModuleDTO {
    moduleId?: string | undefined;
    moduleName?: string | undefined;
    aspNetRoles?: AspNetRoleDTO[] | undefined;

    constructor(data?: IModuleDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.moduleId = _data["moduleId"];
            this.moduleName = _data["moduleName"];
            if (Array.isArray(_data["aspNetRoles"])) {
                this.aspNetRoles = [] as any;
                for (let item of _data["aspNetRoles"])
                    this.aspNetRoles!.push(AspNetRoleDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModuleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["moduleId"] = this.moduleId;
        data["moduleName"] = this.moduleName;
        if (Array.isArray(this.aspNetRoles)) {
            data["aspNetRoles"] = [];
            for (let item of this.aspNetRoles)
                data["aspNetRoles"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IModuleDTO {
    moduleId?: string | undefined;
    moduleName?: string | undefined;
    aspNetRoles?: AspNetRoleDTO[] | undefined;
}

export class NotificationDTO implements INotificationDTO {
    notificationId?: string;
    userId?: string | undefined;
    channel?: string | undefined;
    subject?: string | undefined;
    message?: string | undefined;
    isRead?: boolean;
    isActive?: boolean;
    dateAdded?: Date;
    aspNetUser?: AspNetUserDTO;

    constructor(data?: INotificationDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.notificationId = _data["notificationId"];
            this.userId = _data["userId"];
            this.channel = _data["channel"];
            this.subject = _data["subject"];
            this.message = _data["message"];
            this.isRead = _data["isRead"];
            this.isActive = _data["isActive"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.aspNetUser = _data["aspNetUser"] ? AspNetUserDTO.fromJS(_data["aspNetUser"]) : <any>undefined;
        }
    }

    static fromJS(data: any): NotificationDTO {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notificationId"] = this.notificationId;
        data["userId"] = this.userId;
        data["channel"] = this.channel;
        data["subject"] = this.subject;
        data["message"] = this.message;
        data["isRead"] = this.isRead;
        data["isActive"] = this.isActive;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["aspNetUser"] = this.aspNetUser ? this.aspNetUser.toJSON() : <any>undefined;
        return data;
    }
}

export interface INotificationDTO {
    notificationId?: string;
    userId?: string | undefined;
    channel?: string | undefined;
    subject?: string | undefined;
    message?: string | undefined;
    isRead?: boolean;
    isActive?: boolean;
    dateAdded?: Date;
    aspNetUser?: AspNetUserDTO;
}

export class PaymentLogDTO implements IPaymentLogDTO {
    paymentLogId?: string;
    technicianUserId?: string | undefined;
    amount?: number;
    paymentDate?: Date;
    jobId?: string | undefined;
    notes?: string | undefined;
    recordedByUserId?: string | undefined;
    isActive?: boolean;
    dateAdded?: Date;
    aspNetUser_TechnicianUserId?: AspNetUserDTO;
    aspNetUser_RecordedByUserId?: AspNetUserDTO;

    constructor(data?: IPaymentLogDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.paymentLogId = _data["paymentLogId"];
            this.technicianUserId = _data["technicianUserId"];
            this.amount = _data["amount"];
            this.paymentDate = _data["paymentDate"] ? new Date(_data["paymentDate"].toString()) : <any>undefined;
            this.jobId = _data["jobId"];
            this.notes = _data["notes"];
            this.recordedByUserId = _data["recordedByUserId"];
            this.isActive = _data["isActive"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.aspNetUser_TechnicianUserId = _data["aspNetUser_TechnicianUserId"] ? AspNetUserDTO.fromJS(_data["aspNetUser_TechnicianUserId"]) : <any>undefined;
            this.aspNetUser_RecordedByUserId = _data["aspNetUser_RecordedByUserId"] ? AspNetUserDTO.fromJS(_data["aspNetUser_RecordedByUserId"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PaymentLogDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentLogDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentLogId"] = this.paymentLogId;
        data["technicianUserId"] = this.technicianUserId;
        data["amount"] = this.amount;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["jobId"] = this.jobId;
        data["notes"] = this.notes;
        data["recordedByUserId"] = this.recordedByUserId;
        data["isActive"] = this.isActive;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["aspNetUser_TechnicianUserId"] = this.aspNetUser_TechnicianUserId ? this.aspNetUser_TechnicianUserId.toJSON() : <any>undefined;
        data["aspNetUser_RecordedByUserId"] = this.aspNetUser_RecordedByUserId ? this.aspNetUser_RecordedByUserId.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPaymentLogDTO {
    paymentLogId?: string;
    technicianUserId?: string | undefined;
    amount?: number;
    paymentDate?: Date;
    jobId?: string | undefined;
    notes?: string | undefined;
    recordedByUserId?: string | undefined;
    isActive?: boolean;
    dateAdded?: Date;
    aspNetUser_TechnicianUserId?: AspNetUserDTO;
    aspNetUser_RecordedByUserId?: AspNetUserDTO;
}

export class ProfileNoteDTO implements IProfileNoteDTO {
    noteId?: string;
    technicianUserId?: string | undefined;
    authorUserId?: string | undefined;
    noteText?: string | undefined;
    isActive?: boolean;
    dateAdded?: Date;
    aspNetUser_TechnicianUserId?: AspNetUserDTO;
    aspNetUser_AuthorUserId?: AspNetUserDTO;

    constructor(data?: IProfileNoteDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.noteId = _data["noteId"];
            this.technicianUserId = _data["technicianUserId"];
            this.authorUserId = _data["authorUserId"];
            this.noteText = _data["noteText"];
            this.isActive = _data["isActive"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.aspNetUser_TechnicianUserId = _data["aspNetUser_TechnicianUserId"] ? AspNetUserDTO.fromJS(_data["aspNetUser_TechnicianUserId"]) : <any>undefined;
            this.aspNetUser_AuthorUserId = _data["aspNetUser_AuthorUserId"] ? AspNetUserDTO.fromJS(_data["aspNetUser_AuthorUserId"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProfileNoteDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileNoteDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["noteId"] = this.noteId;
        data["technicianUserId"] = this.technicianUserId;
        data["authorUserId"] = this.authorUserId;
        data["noteText"] = this.noteText;
        data["isActive"] = this.isActive;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["aspNetUser_TechnicianUserId"] = this.aspNetUser_TechnicianUserId ? this.aspNetUser_TechnicianUserId.toJSON() : <any>undefined;
        data["aspNetUser_AuthorUserId"] = this.aspNetUser_AuthorUserId ? this.aspNetUser_AuthorUserId.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProfileNoteDTO {
    noteId?: string;
    technicianUserId?: string | undefined;
    authorUserId?: string | undefined;
    noteText?: string | undefined;
    isActive?: boolean;
    dateAdded?: Date;
    aspNetUser_TechnicianUserId?: AspNetUserDTO;
    aspNetUser_AuthorUserId?: AspNetUserDTO;
}

export class RoleList implements IRoleList {
    data?: RolesView[] | undefined;
    total?: number | undefined;
    success?: boolean | undefined;

    constructor(data?: IRoleList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RolesView.fromJS(item));
            }
            this.total = _data["total"];
            this.success = _data["success"];
        }
    }

    static fromJS(data: any): RoleList {
        data = typeof data === 'object' ? data : {};
        let result = new RoleList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        data["total"] = this.total;
        data["success"] = this.success;
        return data;
    }
}

export interface IRoleList {
    data?: RolesView[] | undefined;
    total?: number | undefined;
    success?: boolean | undefined;
}

export class RoleVM implements IRoleVM {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IRoleVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): RoleVM {
        data = typeof data === 'object' ? data : {};
        let result = new RoleVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IRoleVM {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
}

export class RolesView implements IRolesView {
    id!: string;
    name?: string | undefined;
    normalizedName?: string | undefined;
    description?: string | undefined;
    userCount?: number | undefined;
    allowedModules?: string | undefined;

    constructor(data?: IRolesView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.normalizedName = _data["normalizedName"];
            this.description = _data["description"];
            this.userCount = _data["userCount"];
            this.allowedModules = _data["allowedModules"];
        }
    }

    static fromJS(data: any): RolesView {
        data = typeof data === 'object' ? data : {};
        let result = new RolesView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["normalizedName"] = this.normalizedName;
        data["description"] = this.description;
        data["userCount"] = this.userCount;
        data["allowedModules"] = this.allowedModules;
        return data;
    }
}

export interface IRolesView {
    id: string;
    name?: string | undefined;
    normalizedName?: string | undefined;
    description?: string | undefined;
    userCount?: number | undefined;
    allowedModules?: string | undefined;
}

export class TechnicianProfileDTO implements ITechnicianProfileDTO {
    technicianId?: string | undefined;
    availabilityStatus?: string | undefined;
    payRate?: number | undefined;
    profileReadinessPercent?: number;
    dateAdded?: Date;
    dateModified?: Date;
    aspNetUser?: AspNetUserDTO;

    constructor(data?: ITechnicianProfileDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.technicianId = _data["technicianId"];
            this.availabilityStatus = _data["availabilityStatus"];
            this.payRate = _data["payRate"];
            this.profileReadinessPercent = _data["profileReadinessPercent"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.dateModified = _data["dateModified"] ? new Date(_data["dateModified"].toString()) : <any>undefined;
            this.aspNetUser = _data["aspNetUser"] ? AspNetUserDTO.fromJS(_data["aspNetUser"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TechnicianProfileDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TechnicianProfileDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["technicianId"] = this.technicianId;
        data["availabilityStatus"] = this.availabilityStatus;
        data["payRate"] = this.payRate;
        data["profileReadinessPercent"] = this.profileReadinessPercent;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["dateModified"] = this.dateModified ? this.dateModified.toISOString() : <any>undefined;
        data["aspNetUser"] = this.aspNetUser ? this.aspNetUser.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITechnicianProfileDTO {
    technicianId?: string | undefined;
    availabilityStatus?: string | undefined;
    payRate?: number | undefined;
    profileReadinessPercent?: number;
    dateAdded?: Date;
    dateModified?: Date;
    aspNetUser?: AspNetUserDTO;
}

export class TechnicianVM implements ITechnicianVM {
    userID?: string | undefined;
    roleID?: string | undefined;
    roleName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    fullName?: string | undefined;
    phoneNumber?: string | undefined;
    profilePictureUrl?: string | undefined;
    isActive?: boolean | undefined;
    userName?: string | undefined;
    availabilityStatus?: string | undefined;
    payRate?: number | undefined;
    profileReadinessPercent?: number | undefined;
    profileDateAdded?: Date | undefined;
    profileDateModified?: Date | undefined;

    constructor(data?: ITechnicianVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userID = _data["userID"];
            this.roleID = _data["roleID"];
            this.roleName = _data["roleName"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.fullName = _data["fullName"];
            this.phoneNumber = _data["phoneNumber"];
            this.profilePictureUrl = _data["profilePictureUrl"];
            this.isActive = _data["isActive"];
            this.userName = _data["userName"];
            this.availabilityStatus = _data["availabilityStatus"];
            this.payRate = _data["payRate"];
            this.profileReadinessPercent = _data["profileReadinessPercent"];
            this.profileDateAdded = _data["profileDateAdded"] ? new Date(_data["profileDateAdded"].toString()) : <any>undefined;
            this.profileDateModified = _data["profileDateModified"] ? new Date(_data["profileDateModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TechnicianVM {
        data = typeof data === 'object' ? data : {};
        let result = new TechnicianVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userID"] = this.userID;
        data["roleID"] = this.roleID;
        data["roleName"] = this.roleName;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["profilePictureUrl"] = this.profilePictureUrl;
        data["isActive"] = this.isActive;
        data["userName"] = this.userName;
        data["availabilityStatus"] = this.availabilityStatus;
        data["payRate"] = this.payRate;
        data["profileReadinessPercent"] = this.profileReadinessPercent;
        data["profileDateAdded"] = this.profileDateAdded ? this.profileDateAdded.toISOString() : <any>undefined;
        data["profileDateModified"] = this.profileDateModified ? this.profileDateModified.toISOString() : <any>undefined;
        return data;
    }
}

export interface ITechnicianVM {
    userID?: string | undefined;
    roleID?: string | undefined;
    roleName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    fullName?: string | undefined;
    phoneNumber?: string | undefined;
    profilePictureUrl?: string | undefined;
    isActive?: boolean | undefined;
    userName?: string | undefined;
    availabilityStatus?: string | undefined;
    payRate?: number | undefined;
    profileReadinessPercent?: number | undefined;
    profileDateAdded?: Date | undefined;
    profileDateModified?: Date | undefined;
}

export class UserAgreementDTO implements IUserAgreementDTO {
    userAgreementId?: string;
    userId?: string | undefined;
    agreementName?: string | undefined;
    dateAdded?: Date;
    aspNetUser?: AspNetUserDTO;

    constructor(data?: IUserAgreementDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userAgreementId = _data["userAgreementId"];
            this.userId = _data["userId"];
            this.agreementName = _data["agreementName"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.aspNetUser = _data["aspNetUser"] ? AspNetUserDTO.fromJS(_data["aspNetUser"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserAgreementDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserAgreementDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userAgreementId"] = this.userAgreementId;
        data["userId"] = this.userId;
        data["agreementName"] = this.agreementName;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["aspNetUser"] = this.aspNetUser ? this.aspNetUser.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserAgreementDTO {
    userAgreementId?: string;
    userId?: string | undefined;
    agreementName?: string | undefined;
    dateAdded?: Date;
    aspNetUser?: AspNetUserDTO;
}

export class UserList implements IUserList {
    data?: AspNetUserDTO[] | undefined;
    total?: number | undefined;
    success?: boolean | undefined;

    constructor(data?: IUserList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AspNetUserDTO.fromJS(item));
            }
            this.total = _data["total"];
            this.success = _data["success"];
        }
    }

    static fromJS(data: any): UserList {
        data = typeof data === 'object' ? data : {};
        let result = new UserList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        data["total"] = this.total;
        data["success"] = this.success;
        return data;
    }
}

export interface IUserList {
    data?: AspNetUserDTO[] | undefined;
    total?: number | undefined;
    success?: boolean | undefined;
}

export class UserVM implements IUserVM {
    id?: string | undefined;
    userName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    suffix?: string | undefined;
    isActive?: boolean;
    email2?: string | undefined;
    phone2?: string | undefined;
    preferredName?: string | undefined;
    creds?: string | undefined;
    profilePicUrl?: string | undefined;
    dateLastLogin?: Date | undefined;
    roles?: RoleVM[] | undefined;
    allowedModules?: ModuleDTO[] | undefined;

    constructor(data?: IUserVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.suffix = _data["suffix"];
            this.isActive = _data["isActive"];
            this.email2 = _data["email2"];
            this.phone2 = _data["phone2"];
            this.preferredName = _data["preferredName"];
            this.creds = _data["creds"];
            this.profilePicUrl = _data["profilePicUrl"];
            this.dateLastLogin = _data["dateLastLogin"] ? new Date(_data["dateLastLogin"].toString()) : <any>undefined;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(RoleVM.fromJS(item));
            }
            if (Array.isArray(_data["allowedModules"])) {
                this.allowedModules = [] as any;
                for (let item of _data["allowedModules"])
                    this.allowedModules!.push(ModuleDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserVM {
        data = typeof data === 'object' ? data : {};
        let result = new UserVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["suffix"] = this.suffix;
        data["isActive"] = this.isActive;
        data["email2"] = this.email2;
        data["phone2"] = this.phone2;
        data["preferredName"] = this.preferredName;
        data["creds"] = this.creds;
        data["profilePicUrl"] = this.profilePicUrl;
        data["dateLastLogin"] = this.dateLastLogin ? this.dateLastLogin.toISOString() : <any>undefined;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.allowedModules)) {
            data["allowedModules"] = [];
            for (let item of this.allowedModules)
                data["allowedModules"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IUserVM {
    id?: string | undefined;
    userName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    suffix?: string | undefined;
    isActive?: boolean;
    email2?: string | undefined;
    phone2?: string | undefined;
    preferredName?: string | undefined;
    creds?: string | undefined;
    profilePicUrl?: string | undefined;
    dateLastLogin?: Date | undefined;
    roles?: RoleVM[] | undefined;
    allowedModules?: ModuleDTO[] | undefined;
}

export class W9DataDTO implements IW9DataDTO {
    w9DataId?: string;
    userId?: string | undefined;
    taxYear?: number;
    isActive?: boolean;
    fullName?: string | undefined;
    businessName?: string | undefined;
    taxClassification?: string | undefined;
    addressStreet?: string | undefined;
    addressCityStateZip?: string | undefined;
    taxIDNumberEncrypted?: string | undefined;
    dateAdded?: Date;
    dateModified?: Date;
    aspNetUser?: AspNetUserDTO;

    constructor(data?: IW9DataDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.w9DataId = _data["w9DataId"];
            this.userId = _data["userId"];
            this.taxYear = _data["taxYear"];
            this.isActive = _data["isActive"];
            this.fullName = _data["fullName"];
            this.businessName = _data["businessName"];
            this.taxClassification = _data["taxClassification"];
            this.addressStreet = _data["addressStreet"];
            this.addressCityStateZip = _data["addressCityStateZip"];
            this.taxIDNumberEncrypted = _data["taxIDNumberEncrypted"];
            this.dateAdded = _data["dateAdded"] ? new Date(_data["dateAdded"].toString()) : <any>undefined;
            this.dateModified = _data["dateModified"] ? new Date(_data["dateModified"].toString()) : <any>undefined;
            this.aspNetUser = _data["aspNetUser"] ? AspNetUserDTO.fromJS(_data["aspNetUser"]) : <any>undefined;
        }
    }

    static fromJS(data: any): W9DataDTO {
        data = typeof data === 'object' ? data : {};
        let result = new W9DataDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["w9DataId"] = this.w9DataId;
        data["userId"] = this.userId;
        data["taxYear"] = this.taxYear;
        data["isActive"] = this.isActive;
        data["fullName"] = this.fullName;
        data["businessName"] = this.businessName;
        data["taxClassification"] = this.taxClassification;
        data["addressStreet"] = this.addressStreet;
        data["addressCityStateZip"] = this.addressCityStateZip;
        data["taxIDNumberEncrypted"] = this.taxIDNumberEncrypted;
        data["dateAdded"] = this.dateAdded ? this.dateAdded.toISOString() : <any>undefined;
        data["dateModified"] = this.dateModified ? this.dateModified.toISOString() : <any>undefined;
        data["aspNetUser"] = this.aspNetUser ? this.aspNetUser.toJSON() : <any>undefined;
        return data;
    }
}

export interface IW9DataDTO {
    w9DataId?: string;
    userId?: string | undefined;
    taxYear?: number;
    isActive?: boolean;
    fullName?: string | undefined;
    businessName?: string | undefined;
    taxClassification?: string | undefined;
    addressStreet?: string | undefined;
    addressCityStateZip?: string | undefined;
    taxIDNumberEncrypted?: string | undefined;
    dateAdded?: Date;
    dateModified?: Date;
    aspNetUser?: AspNetUserDTO;
}

================
File: xdent-ops-frontend/src/utils/parse-jwt.ts
================
import { UserPayload } from "../interfaces/google";

export function parseJwt(token: string): UserPayload {
  const base64Url = token.split(".")[1];
  const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
  const jsonPayload = decodeURIComponent(
    window
      .atob(base64)
      .split("")
      .map(function (c) {
        return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
      })
      .join("")
  );

  return JSON.parse(jsonPayload);
}

================
File: xdent-ops-frontend/src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: xdent-ops-frontend/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "allowJs": false,
    "skipLibCheck": true,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": ["src"],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}

================
File: xdent-ops-frontend/tsconfig.node.json
================
{
  "compilerOptions": {
    "composite": true,
    "module": "ESNext",
    "moduleResolution": "node"
  },
  "include": ["vite.config.ts"]
}

================
File: xdent-ops-frontend/vite.config.ts
================
import react from "@vitejs/plugin-react";
import { defineConfig } from "vite";
import * as path from "path";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  server: {
    proxy: {
      "/api": {
        target: "https://localhost:7169/",
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ""),
        secure: false,
      },
    },
  },
});



================================================================
End of Codebase
================================================================
