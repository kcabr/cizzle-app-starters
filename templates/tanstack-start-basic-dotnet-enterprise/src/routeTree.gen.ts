/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as RedirectImport } from './routes/redirect'
import { Route as DeferredImport } from './routes/deferred'
import { Route as CounterImport } from './routes/counter'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as WeatherRouteImport } from './routes/weather.route'
import { Route as UsersRouteImport } from './routes/users.route'
import { Route as StocksRouteImport } from './routes/stocks.route'
import { Route as RecipesRouteImport } from './routes/recipes.route'
import { Route as PostsRouteImport } from './routes/posts.route'
import { Route as NewsRouteImport } from './routes/news.route'
import { Route as IndexImport } from './routes/index'
import { Route as WeatherIndexImport } from './routes/weather.index'
import { Route as UsersIndexImport } from './routes/users.index'
import { Route as RecipesIndexImport } from './routes/recipes.index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as NewsIndexImport } from './routes/news.index'
import { Route as WeatherCityIdImport } from './routes/weather.$cityId'
import { Route as UsersUserIdImport } from './routes/users.$userId'
import { Route as StocksStockIdImport } from './routes/stocks.$stockId'
import { Route as RecipesRecipeIdImport } from './routes/recipes.$recipeId'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as NewsSearchImport } from './routes/news.search'
import { Route as PathlessLayoutNestedLayoutImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as PostsPostIdDeepImport } from './routes/posts_.$postId.deep'
import { Route as PathlessLayoutNestedLayoutRouteBImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteAImport } from './routes/_pathlessLayout/_nested-layout/route-a'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const CounterRoute = CounterImport.update({
  id: '/counter',
  path: '/counter',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const WeatherRouteRoute = WeatherRouteImport.update({
  id: '/weather',
  path: '/weather',
  getParentRoute: () => rootRoute,
} as any)

const UsersRouteRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const StocksRouteRoute = StocksRouteImport.update({
  id: '/stocks',
  path: '/stocks',
  getParentRoute: () => rootRoute,
} as any)

const RecipesRouteRoute = RecipesRouteImport.update({
  id: '/recipes',
  path: '/recipes',
  getParentRoute: () => rootRoute,
} as any)

const PostsRouteRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const NewsRouteRoute = NewsRouteImport.update({
  id: '/news',
  path: '/news',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WeatherIndexRoute = WeatherIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WeatherRouteRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any)

const RecipesIndexRoute = RecipesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RecipesRouteRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRouteRoute,
} as any)

const NewsIndexRoute = NewsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NewsRouteRoute,
} as any)

const WeatherCityIdRoute = WeatherCityIdImport.update({
  id: '/$cityId',
  path: '/$cityId',
  getParentRoute: () => WeatherRouteRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRouteRoute,
} as any)

const StocksStockIdRoute = StocksStockIdImport.update({
  id: '/$stockId',
  path: '/$stockId',
  getParentRoute: () => StocksRouteRoute,
} as any)

const RecipesRecipeIdRoute = RecipesRecipeIdImport.update({
  id: '/$recipeId',
  path: '/$recipeId',
  getParentRoute: () => RecipesRouteRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRouteRoute,
} as any)

const NewsSearchRoute = NewsSearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => NewsRouteRoute,
} as any)

const PathlessLayoutNestedLayoutRoute = PathlessLayoutNestedLayoutImport.update(
  {
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any,
)

const PostsPostIdDeepRoute = PostsPostIdDeepImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/news': {
      id: '/news'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof NewsRouteImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRoute
    }
    '/recipes': {
      id: '/recipes'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesRouteImport
      parentRoute: typeof rootRoute
    }
    '/stocks': {
      id: '/stocks'
      path: '/stocks'
      fullPath: '/stocks'
      preLoaderRoute: typeof StocksRouteImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRoute
    }
    '/weather': {
      id: '/weather'
      path: '/weather'
      fullPath: '/weather'
      preLoaderRoute: typeof WeatherRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/counter': {
      id: '/counter'
      path: '/counter'
      fullPath: '/counter'
      preLoaderRoute: typeof CounterImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/news/search': {
      id: '/news/search'
      path: '/search'
      fullPath: '/news/search'
      preLoaderRoute: typeof NewsSearchImport
      parentRoute: typeof NewsRouteImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsRouteImport
    }
    '/recipes/$recipeId': {
      id: '/recipes/$recipeId'
      path: '/$recipeId'
      fullPath: '/recipes/$recipeId'
      preLoaderRoute: typeof RecipesRecipeIdImport
      parentRoute: typeof RecipesRouteImport
    }
    '/stocks/$stockId': {
      id: '/stocks/$stockId'
      path: '/$stockId'
      fullPath: '/stocks/$stockId'
      preLoaderRoute: typeof StocksStockIdImport
      parentRoute: typeof StocksRouteImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof UsersRouteImport
    }
    '/weather/$cityId': {
      id: '/weather/$cityId'
      path: '/$cityId'
      fullPath: '/weather/$cityId'
      preLoaderRoute: typeof WeatherCityIdImport
      parentRoute: typeof WeatherRouteImport
    }
    '/news/': {
      id: '/news/'
      path: '/'
      fullPath: '/news/'
      preLoaderRoute: typeof NewsIndexImport
      parentRoute: typeof NewsRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsRouteImport
    }
    '/recipes/': {
      id: '/recipes/'
      path: '/'
      fullPath: '/recipes/'
      preLoaderRoute: typeof RecipesIndexImport
      parentRoute: typeof RecipesRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof UsersRouteImport
    }
    '/weather/': {
      id: '/weather/'
      path: '/'
      fullPath: '/weather/'
      preLoaderRoute: typeof WeatherIndexImport
      parentRoute: typeof WeatherRouteImport
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteAImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface NewsRouteRouteChildren {
  NewsSearchRoute: typeof NewsSearchRoute
  NewsIndexRoute: typeof NewsIndexRoute
}

const NewsRouteRouteChildren: NewsRouteRouteChildren = {
  NewsSearchRoute: NewsSearchRoute,
  NewsIndexRoute: NewsIndexRoute,
}

const NewsRouteRouteWithChildren = NewsRouteRoute._addFileChildren(
  NewsRouteRouteChildren,
)

interface PostsRouteRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteRouteChildren: PostsRouteRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteRouteWithChildren = PostsRouteRoute._addFileChildren(
  PostsRouteRouteChildren,
)

interface RecipesRouteRouteChildren {
  RecipesRecipeIdRoute: typeof RecipesRecipeIdRoute
  RecipesIndexRoute: typeof RecipesIndexRoute
}

const RecipesRouteRouteChildren: RecipesRouteRouteChildren = {
  RecipesRecipeIdRoute: RecipesRecipeIdRoute,
  RecipesIndexRoute: RecipesIndexRoute,
}

const RecipesRouteRouteWithChildren = RecipesRouteRoute._addFileChildren(
  RecipesRouteRouteChildren,
)

interface StocksRouteRouteChildren {
  StocksStockIdRoute: typeof StocksStockIdRoute
}

const StocksRouteRouteChildren: StocksRouteRouteChildren = {
  StocksStockIdRoute: StocksStockIdRoute,
}

const StocksRouteRouteWithChildren = StocksRouteRoute._addFileChildren(
  StocksRouteRouteChildren,
)

interface UsersRouteRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

interface WeatherRouteRouteChildren {
  WeatherCityIdRoute: typeof WeatherCityIdRoute
  WeatherIndexRoute: typeof WeatherIndexRoute
}

const WeatherRouteRouteChildren: WeatherRouteRouteChildren = {
  WeatherCityIdRoute: WeatherCityIdRoute,
  WeatherIndexRoute: WeatherIndexRoute,
}

const WeatherRouteRouteWithChildren = WeatherRouteRoute._addFileChildren(
  WeatherRouteRouteChildren,
)

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/news': typeof NewsRouteRouteWithChildren
  '/posts': typeof PostsRouteRouteWithChildren
  '/recipes': typeof RecipesRouteRouteWithChildren
  '/stocks': typeof StocksRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/weather': typeof WeatherRouteRouteWithChildren
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/counter': typeof CounterRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/test': typeof TestRoute
  '/news/search': typeof NewsSearchRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/stocks/$stockId': typeof StocksStockIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/weather/$cityId': typeof WeatherCityIdRoute
  '/news/': typeof NewsIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/recipes/': typeof RecipesIndexRoute
  '/users/': typeof UsersIndexRoute
  '/weather/': typeof WeatherIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/stocks': typeof StocksRouteRouteWithChildren
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/counter': typeof CounterRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/test': typeof TestRoute
  '/news/search': typeof NewsSearchRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/stocks/$stockId': typeof StocksStockIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/weather/$cityId': typeof WeatherCityIdRoute
  '/news': typeof NewsIndexRoute
  '/posts': typeof PostsIndexRoute
  '/recipes': typeof RecipesIndexRoute
  '/users': typeof UsersIndexRoute
  '/weather': typeof WeatherIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/news': typeof NewsRouteRouteWithChildren
  '/posts': typeof PostsRouteRouteWithChildren
  '/recipes': typeof RecipesRouteRouteWithChildren
  '/stocks': typeof StocksRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/weather': typeof WeatherRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/counter': typeof CounterRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/test': typeof TestRoute
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/news/search': typeof NewsSearchRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/stocks/$stockId': typeof StocksStockIdRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/weather/$cityId': typeof WeatherCityIdRoute
  '/news/': typeof NewsIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/recipes/': typeof RecipesIndexRoute
  '/users/': typeof UsersIndexRoute
  '/weather/': typeof WeatherIndexRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/news'
    | '/posts'
    | '/recipes'
    | '/stocks'
    | '/users'
    | '/weather'
    | ''
    | '/counter'
    | '/deferred'
    | '/redirect'
    | '/test'
    | '/news/search'
    | '/posts/$postId'
    | '/recipes/$recipeId'
    | '/stocks/$stockId'
    | '/users/$userId'
    | '/weather/$cityId'
    | '/news/'
    | '/posts/'
    | '/recipes/'
    | '/users/'
    | '/weather/'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/stocks'
    | ''
    | '/counter'
    | '/deferred'
    | '/redirect'
    | '/test'
    | '/news/search'
    | '/posts/$postId'
    | '/recipes/$recipeId'
    | '/stocks/$stockId'
    | '/users/$userId'
    | '/weather/$cityId'
    | '/news'
    | '/posts'
    | '/recipes'
    | '/users'
    | '/weather'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/'
    | '/news'
    | '/posts'
    | '/recipes'
    | '/stocks'
    | '/users'
    | '/weather'
    | '/_pathlessLayout'
    | '/counter'
    | '/deferred'
    | '/redirect'
    | '/test'
    | '/_pathlessLayout/_nested-layout'
    | '/news/search'
    | '/posts/$postId'
    | '/recipes/$recipeId'
    | '/stocks/$stockId'
    | '/users/$userId'
    | '/weather/$cityId'
    | '/news/'
    | '/posts/'
    | '/recipes/'
    | '/users/'
    | '/weather/'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/posts_/$postId/deep'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NewsRouteRoute: typeof NewsRouteRouteWithChildren
  PostsRouteRoute: typeof PostsRouteRouteWithChildren
  RecipesRouteRoute: typeof RecipesRouteRouteWithChildren
  StocksRouteRoute: typeof StocksRouteRouteWithChildren
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  WeatherRouteRoute: typeof WeatherRouteRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  CounterRoute: typeof CounterRoute
  DeferredRoute: typeof DeferredRoute
  RedirectRoute: typeof RedirectRoute
  TestRoute: typeof TestRoute
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NewsRouteRoute: NewsRouteRouteWithChildren,
  PostsRouteRoute: PostsRouteRouteWithChildren,
  RecipesRouteRoute: RecipesRouteRouteWithChildren,
  StocksRouteRoute: StocksRouteRouteWithChildren,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  WeatherRouteRoute: WeatherRouteRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  CounterRoute: CounterRoute,
  DeferredRoute: DeferredRoute,
  RedirectRoute: RedirectRoute,
  TestRoute: TestRoute,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/news",
        "/posts",
        "/recipes",
        "/stocks",
        "/users",
        "/weather",
        "/_pathlessLayout",
        "/counter",
        "/deferred",
        "/redirect",
        "/test",
        "/posts_/$postId/deep"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/news": {
      "filePath": "news.route.tsx",
      "children": [
        "/news/search",
        "/news/"
      ]
    },
    "/posts": {
      "filePath": "posts.route.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/recipes": {
      "filePath": "recipes.route.tsx",
      "children": [
        "/recipes/$recipeId",
        "/recipes/"
      ]
    },
    "/stocks": {
      "filePath": "stocks.route.tsx",
      "children": [
        "/stocks/$stockId"
      ]
    },
    "/users": {
      "filePath": "users.route.tsx",
      "children": [
        "/users/$userId",
        "/users/"
      ]
    },
    "/weather": {
      "filePath": "weather.route.tsx",
      "children": [
        "/weather/$cityId",
        "/weather/"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/_nested-layout"
      ]
    },
    "/counter": {
      "filePath": "counter.tsx"
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/_pathlessLayout/_nested-layout": {
      "filePath": "_pathlessLayout/_nested-layout.tsx",
      "parent": "/_pathlessLayout",
      "children": [
        "/_pathlessLayout/_nested-layout/route-a",
        "/_pathlessLayout/_nested-layout/route-b"
      ]
    },
    "/news/search": {
      "filePath": "news.search.tsx",
      "parent": "/news"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/recipes/$recipeId": {
      "filePath": "recipes.$recipeId.tsx",
      "parent": "/recipes"
    },
    "/stocks/$stockId": {
      "filePath": "stocks.$stockId.tsx",
      "parent": "/stocks"
    },
    "/users/$userId": {
      "filePath": "users.$userId.tsx",
      "parent": "/users"
    },
    "/weather/$cityId": {
      "filePath": "weather.$cityId.tsx",
      "parent": "/weather"
    },
    "/news/": {
      "filePath": "news.index.tsx",
      "parent": "/news"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/recipes/": {
      "filePath": "recipes.index.tsx",
      "parent": "/recipes"
    },
    "/users/": {
      "filePath": "users.index.tsx",
      "parent": "/users"
    },
    "/weather/": {
      "filePath": "weather.index.tsx",
      "parent": "/weather"
    },
    "/_pathlessLayout/_nested-layout/route-a": {
      "filePath": "_pathlessLayout/_nested-layout/route-a.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_pathlessLayout/_nested-layout/route-b": {
      "filePath": "_pathlessLayout/_nested-layout/route-b.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/posts_/$postId/deep": {
      "filePath": "posts_.$postId.deep.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
